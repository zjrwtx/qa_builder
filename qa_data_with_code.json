[
  {
    "question": "Given: A DNA string s\n of length at most 1000 nt.\n\nReturn: Four integers (separated by spaces) counting the respective number of times that the symbols 'A', 'C', 'G', and 'T' occur in s\n.\n\nSample Dataset\nAGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC",
    "final_answer": "20 12 17 21",
    "rationale": "from Bio.Seq import Seq\n\ns = \"AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC\"\ndna_seq = Seq(s)\n\na_count = dna_seq.count(\"A\")\nc_count = dna_seq.count(\"C\")\ng_count = dna_seq.count(\"G\")\nt_count = dna_seq.count(\"T\")\n\nresult = f\"{a_count} {c_count} {g_count} {t_count}\"\nprint(result)"
  },
  {
    "question": "Given: A DNA string t\n having length at most 1000 nt.\n\nReturn: The transcribed RNA string of t\n.\n\nSample Dataset\nGATGGAACTTGACTACGTAAATT",
    "final_answer": "GAUGGAACUUGACUACGUAAAUU",
    "rationale": "from Bio.Seq import Seq\nt = \"GATGGAACTTGACTACGTAAATT\"\ndna_seq = Seq(t)\nrna_seq = dna_seq.transcribe()\nresult = str(rna_seq)\nprint(result)"
  },
  {
    "question": "Given: A DNA string s\n of length at most 1000 bp.\n\nReturn: The reverse complement sc\n of s\n.\n\nSample Dataset\nAAAACCCGGT",
    "final_answer": "ACCGGGTTTT",
    "rationale": "from Bio.Seq import Seq\ns = \"AAAACCCGGT\"\nseq = Seq(s)\nsc = seq.reverse_complement()\nresult = str(sc)\nprint(result)"
  },
  {
    "question": "A sequence is an ordered collection of objects (usually numbers), which are allowed to repeat. Sequences can be finite or infinite. Two examples are the finite sequence (\u03c0,\u22122\u2013\u221a,0,\u03c0)\n and the infinite sequence of odd numbers (1,3,5,7,9,\u2026)\n. We use the notation an\n to represent the n\n-th term of a sequence.\n\nA recurrence relation is a way of defining the terms of a sequence with respect to the values of previous terms. In the case of Fibonacci's rabbits from the introduction, any given month will contain the rabbits that were alive the previous month, plus any new offspring. A key observation is that the number of offspring in any month is equal to the number of rabbits that were alive two months prior. As a result, if Fn\n represents the number of rabbit pairs alive after the n\n-th month, then we obtain the Fibonacci sequence having terms Fn\n that are defined by the recurrence relation Fn=Fn\u22121+Fn\u22122\n (with F1=F2=1\n to initiate the sequence). Although the sequence bears Fibonacci's name, it was known to Indian mathematicians over two millennia ago.\n\nWhen finding the n\n-th term of a sequence defined by a recurrence relation, we can simply use the recurrence relation to generate terms for progressively larger values of n\n. This problem introduces us to the computational technique of dynamic programming, which successively builds up solutions by using the answers to smaller cases.\n\nGiven: Positive integers n\u226440\n and k\u22645\n.\n\nReturn: The total number of rabbit pairs that will be present after n\n months, if we begin with 1 pair and in each generation, every pair of reproduction-age rabbits produces a litter of k\n rabbit pairs (instead of only 1 pair).\n\nSample Dataset\n5 3",
    "final_answer": "19",
    "rationale": "n, k = 5, 3\ndef rabbit_pairs(n, k):\n    fib = [0] * (n + 1)\n    fib[1] = fib[2] = 1\n    for i in range(3, n + 1):\n        fib[i] = fib[i-1] + k * fib[i-2]\n    return fib[n]\nresult = rabbit_pairs(n, k)\nprint(result)"
  },
  {
    "question": "Given: At most 10 DNA strings in FASTA format (of length at most 1 kbp each).\n\nReturn: The ID of the string having the highest GC-content, followed by the GC-content of that string. Rosalind allows for a default error of 0.001 in all decimal answers unless otherwise stated; please see the note on absolute error below.\n\nSample Dataset\n>Rosalind_0808\nCCACCCTCGTGGTATGGCTAGGCATTCAGGAACCGGAGAACGCTTCAGACCAGCCCGGAC\nTGGGAACCTGCGGGCAGTAGGTGGAAT",
    "final_answer": "Rosalind_0808\n60.919540",
    "rationale": "from Bio import SeqIO\n\ndef gc_content(dna):\n    gc_count = sum(1 for base in dna if base in \"GC\")\n    return float(gc_count) / len(dna) * 100\n\ndef highest_gc_content(fasta_file):\n    highest_gc = 0\n    highest_id = \"\"\n    for record in SeqIO.parse(fasta_file, \"fasta\"):\n        content = gc_content(str(record.seq))\n        if content > highest_gc:\n            highest_gc = content\n            highest_id = record.id\n    return highest_id, highest_gc\n\nfasta_data = \"\"\">Rosalind_0808\nCCACCCTCGTGGTATGGCTAGGCATTCAGGAACCGGAGAACGCTTCAGACCAGCCCGGAC\nTGGGAACCTGCGGGCAGTAGGTGGAAT\"\"\"\n\nwith open(\"temp.fasta\", \"w\") as file:\n    file.write(fasta_data)\n\nresult_id, result_gc = highest_gc_content(\"temp.fasta\")\nresult = f\"{result_id}\\n{result_gc:.6f}\"\nprint(result)"
  },
  {
    "question": "Given two strings s\n and t\n of equal length, the Hamming distance between s\n and t\n, denoted dH(s,t)\n, is the number of corresponding symbols that differ in s\n and t\n\nGiven: Two DNA strings s\n and t\n of equal length (not exceeding 1 kbp).\n\nReturn: The Hamming distance dH(s,t)\n.\n\nSample Dataset\nGAGCCTACTAACGGGAT\nCATCGTAATGACGGCCT",
    "final_answer": "7",
    "rationale": "def hamming_distance(s, t):\n    return sum(1 for a, b in zip(s, t) if a != b)\n\ns = \"GAGCCTACTAACGGGAT\"\nt = \"CATCGTAATGACGGCCT\"\n\nresult = hamming_distance(s, t)\nprint(result)"
  },
  {
    "question": "Given: Three positive integers k\n, m\n, and n\n, representing a population containing k+m+n\n organisms: k\n individuals are homozygous dominant for a factor, m\n are heterozygous, and n\n are homozygous recessive.\n\nReturn: The probability that two randomly selected mating organisms will produce an individual possessing a dominant allele (and thus displaying the dominant phenotype). Assume that any two organisms can mate.\n\nSample Dataset\n2 2 2",
    "final_answer": "0.78333",
    "rationale": "from itertools import combinations\n\nk = 2\nm = 2\nn = 2\n\ntotal = k + m + n\n\nprob_k_k = (k / total) * ((k - 1) / (total - 1))\nprob_k_m = (k / total) * (m / (total - 1)) + (m / total) * (k / (total - 1))\nprob_k_n = (k / total) * (n / (total - 1)) + (n / total) * (k / (total - 1))\nprob_m_m = (m / total) * ((m - 1) / (total - 1)) * 0.75\nprob_m_n = (m / total) * (n / (total - 1)) * 0.5 + (n / total) * (m / (total - 1)) * 0.5\n\nresult = prob_k_k + prob_k_m + prob_k_n + prob_m_m + prob_m_n\nprint(result)"
  },
  {
    "question": "Problem\nThe 20 commonly occurring amino acids are abbreviated by using 20 letters from the English alphabet (all letters except for B, J, O, U, X, and Z). Protein strings are constructed from these 20 symbols. Henceforth, the term genetic string will incorporate protein strings along with DNA strings and RNA strings.\n\nThe RNA codon table dictates the details regarding the encoding of specific codons into the amino acid alphabet.\n\nGiven: An RNA string s\n corresponding to a strand of mRNA (of length at most 10 kbp).\n\nReturn: The protein string encoded by s\n.\n\nSample Dataset\nAUGGCCAUGGCGCCCAGAACUGAGAUCAAUAGUACCCGUAUUAACGGGUGA",
    "final_answer": "MAMAPRTEINSTRING",
    "rationale": "s = \"GAGCCTACTAACGGGAT\"\nt = \"CATCGTAATGACGGCCT\"\nhamming_distance = sum(1 for a, b in zip(s, t) if a != b)\nresult = hamming_distance\nprint(result)"
  }
]