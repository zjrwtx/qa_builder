[
  {
    "question": "Given: A DNA string s\n of length at most 1000 nt.\n\nReturn: Four integers (separated by spaces) counting the respective number of times that the symbols 'A', 'C', 'G', and 'T' occur in s\n.\n\nSample Dataset\nAGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC",
    "final_answer": "20 12 17 21"
  },
  {
    "question": "Given: A DNA string t\n having length at most 1000 nt.\n\nReturn: The transcribed RNA string of t\n.\n\nSample Dataset\nGATGGAACTTGACTACGTAAATT",
    "final_answer": "GAUGGAACUUGACUACGUAAAUU"
  },
  {
    "question": "Given: A DNA string s\n of length at most 1000 bp.\n\nReturn: The reverse complement sc\n of s\n.\n\nSample Dataset\nAAAACCCGGT",
    "final_answer": "ACCGGGTTTT"
  },
  {
    "question": "A sequence is an ordered collection of objects (usually numbers), which are allowed to repeat. Sequences can be finite or infinite. Two examples are the finite sequence (π,−2–√,0,π)\n and the infinite sequence of odd numbers (1,3,5,7,9,…)\n. We use the notation an\n to represent the n\n-th term of a sequence.\n\nA recurrence relation is a way of defining the terms of a sequence with respect to the values of previous terms. In the case of Fibonacci's rabbits from the introduction, any given month will contain the rabbits that were alive the previous month, plus any new offspring. A key observation is that the number of offspring in any month is equal to the number of rabbits that were alive two months prior. As a result, if Fn\n represents the number of rabbit pairs alive after the n\n-th month, then we obtain the Fibonacci sequence having terms Fn\n that are defined by the recurrence relation Fn=Fn−1+Fn−2\n (with F1=F2=1\n to initiate the sequence). Although the sequence bears Fibonacci's name, it was known to Indian mathematicians over two millennia ago.\n\nWhen finding the n\n-th term of a sequence defined by a recurrence relation, we can simply use the recurrence relation to generate terms for progressively larger values of n\n. This problem introduces us to the computational technique of dynamic programming, which successively builds up solutions by using the answers to smaller cases.\n\nGiven: Positive integers n≤40\n and k≤5\n.\n\nReturn: The total number of rabbit pairs that will be present after n\n months, if we begin with 1 pair and in each generation, every pair of reproduction-age rabbits produces a litter of k\n rabbit pairs (instead of only 1 pair).\n\nSample Dataset\n5 3",
    "final_answer": "19"
  },
  {
    "question": "Given: At most 10 DNA strings in FASTA format (of length at most 1 kbp each).\n\nReturn: The ID of the string having the highest GC-content, followed by the GC-content of that string. Rosalind allows for a default error of 0.001 in all decimal answers unless otherwise stated; please see the note on absolute error below.\n\nSample Dataset\n>Rosalind_0808\nCCACCCTCGTGGTATGGCTAGGCATTCAGGAACCGGAGAACGCTTCAGACCAGCCCGGAC\nTGGGAACCTGCGGGCAGTAGGTGGAAT",
    "final_answer": "60.919540"
  },
  {
    "question": "Given two strings s\n and t\n of equal length, the Hamming distance between s\n and t\n, denoted dH(s,t)\n, is the number of corresponding symbols that differ in s\n and t\n\nGiven: Two DNA strings s\n and t\n of equal length (not exceeding 1 kbp).\n\nReturn: The Hamming distance dH(s,t)\n.\n\nSample Dataset\nGAGCCTACTAACGGGAT\nCATCGTAATGACGGCCT",
    "final_answer": "7"
  },
  {
    "question": "Given: Three positive integers k\n, m\n, and n\n, representing a population containing k+m+n\n organisms: k\n individuals are homozygous dominant for a factor, m\n are heterozygous, and n\n are homozygous recessive.\n\nReturn: The probability that two randomly selected mating organisms will produce an individual possessing a dominant allele (and thus displaying the dominant phenotype). Assume that any two organisms can mate.\n\nSample Dataset\n2 2 2",
    "final_answer": "0.78333"
  },
  {
    "question": "Given: Six nonnegative integers, each of which does not exceed 20,000. The integers correspond to the number of couples in a population possessing each genotype pairing for a given factor. In order, the six given integers represent the number of couples having the following genotypes:\n\nAA-AA\nAA-Aa\nAA-aa\nAa-Aa\nAa-aa\naa-aa\nReturn: The expected number of offspring displaying the dominant phenotype in the next generation, under the assumption that every couple has exactly two offspring.\n\nSample Dataset\n1 0 0 1 0 1",
    "final_answer": "3.5"
  },
  {
    "question": "Problem\nA common substring of a collection of strings is a substring of every member of the collection. We say that a common substring is a longest common substring if there does not exist a longer common substring. For example, \"CG\" is a common substring of \"ACGTACGT\" and \"AACCGTATA\", but it is not as long as possible; in this case, \"CGTA\" is a longest common substring of \"ACGTACGT\" and \"AACCGTATA\".\n\nNote that the longest common substring is not necessarily unique; for a simple example, \"AA\" and \"CC\" are both longest common substrings of \"AACC\" and \"CCAA\".\n\nGiven: A collection of k\n (k≤100\n) DNA strings of length at most 1 kbp each in FASTA format.\n\nReturn: A longest common substring of the collection. (If multiple solutions exist, you may return any single solution.)\n\nSample Dataset\n>Rosalind_1\nGATTACA\n>Rosalind_2\nTAGACCA\n>Rosalind_3\nATACA",
    "final_answer": "AC"
  },
  {
    "question": "Given: Two positive integers \\(k\\) (\\(k\\leq7\\)) and \\(N\\) (\\(N\\leq 2^{k}\\)). In this problem, we begin with Tom, who in the \\(0\\)th generation has genotype \\(Aa\\ Bb\\). Tom has two children in the \\(1\\)st generation, each of whom has two children, and so on. Each organism always mates with an organism having genotype \\(Aa\\ Bb\\). \n\nReturn: The probability that at least $N$ Aa Bb organisms will belong to the $k$-th generation of Tom's family tree (don't count the Aa Bb mates at each level). Assume that Mendel's second law holds for the factors.\nSample Dataset\n2 1",
    "final_answer": "0.684"
  },
  {
    "question": "For positive integers $a$ and $n$, $a$ **modulo** $n$ (written $a\\ \\mathrm{mod}\\ n$ in shorthand) is the remainder when $a$ is divided by $n$. For example, $29\\ \\mathrm{mod}\\ 11 = 7$ because $29 = 11\\times2 + 7$.\n\n**Modular arithmetic** is the study of addition, subtraction, multiplication, and division with respect to the modulo operation. We say that $a$ and $b$ are **congruent** modulo $n$ if $a\\ \\mathrm{mod}\\ n = b\\ \\mathrm{mod}\\ n$; in this case, we use the notation $a\\equiv b\\ \\mathrm{mod}\\ n$.\n\nTwo useful facts in modular arithmetic are that if $a\\equiv b\\ \\mathrm{mod}\\ n$ and $c\\equiv d\\ \\mathrm{mod}\\ n$, then $a + c\\equiv b + d\\ \\mathrm{mod}\\ n$ and $a\\times c\\equiv b\\times d\\ \\mathrm{mod}\\ n$. To check your understanding of these rules, you may wish to verify these relationships for $a = 29$, $b = 73$, $c = 10$, $d = 32$, and $n = 11$.\n\nAs you will see in this exercise, some Rosalind problems will ask for a (very large) integer solution modulo a smaller number to avoid the computational pitfalls that arise with storing such large numbers.\n\n**Given**: A protein string of length at most 1000 aa.\n\n**Return**: The total number of different RNA strings from which the protein could have been translated, modulo 1,000,000. (Don't neglect the importance of the **stop codon** in protein translation.)\n\n\nSample Dataset\nMA",
    "final_answer": "12"
  },
  {
    "question": "Either strand of a DNA double helix can serve as the coding strand for RNA transcription. Hence, a given DNA string implies six total reading frames, or ways in which the same region of DNA can be translated into amino acids: three reading frames result from reading the string itself, whereas three more result from reading its reverse complement.\n\nAn open reading frame (ORF) is one which starts from the start codon and ends by stop codon, without any other stop codons in between. Thus, a candidate protein string is derived by translating an open reading frame into amino acids until a stop codon is reached.\n\nGiven: A DNA string s\n of length at most 1 kbp in FASTA format.\n\nReturn: Every distinct candidate protein string that can be translated from ORFs of s\n. Strings can be returned in any order.\n\nSample Dataset\n>Rosalind_99\nAGCCATGTAGCTAACTCAGGTTACATGGGGATGACCCCGCGACTTGGATTAGAGTCTCTTTTGGAATAAGCCTGAATGATCCGAGTAGCATCTCAG",
    "final_answer": "MLLGSFRLIPKETLIQVAGSSPCNLS\nM\nMGMTPRLGLESLLE\nMTPRLGLESLLE"
  },
  {
    "question": "In a weighted alphabet, every symbol is assigned a positive real number called a weight. A string formed from a weighted alphabet is called a weighted string, and its weight is equal to the sum of the weights of its symbols.\n\nThe standard weight assigned to each member of the 20-symbol amino acid alphabet is the monoisotopic mass of the corresponding amino acid.\n\nGiven: A protein string P\n of length at most 1000 aa.\n\nReturn: The total weight of P\n. Consult the monoisotopic mass table.\n\nSample Dataset\nSKADYEK",
    "final_answer": "821.392"
  },
  {
    "question": "A DNA string is a reverse palindrome if it is equal to its reverse complement. For instance, GCATGC is a reverse palindrome because its reverse complement is GCATGC. \n\nGiven: A DNA string of length at most 1 kbp in FASTA format.\n\nReturn: The position and length of every reverse palindrome in the string having length between 4 and 12. You may return these pairs in any order.\n\nSample Dataset\n>Rosalind_24\nTCAATGCATGCGGGTCTATATGCAT\n",
    "final_answer": "4 6\n5 4\n6 6\n7 4\n17 4\n18 4\n20 6\n21 4"
  },
  {
    "question": "An array is a structure containing an ordered collection of objects (numbers, strings, other arrays, etc.). We let $A[k]$ denote the $k$-th value in array $A$. You may like to think of an array as simply a matrix having only one row.\n\nA random string is constructed so that the probability of choosing each subsequent symbol is based on a fixed underlying symbol frequency.\n\nGC - content offers us natural symbol frequencies for constructing random DNA strings. If the GC - content is $x$, then we set the symbol frequencies of C and G equal to $\\frac{x}{2}$ and the symbol frequencies of A and T equal to $\\frac{1 - x}{2}$. For example, if the GC - content is 40%, then as we construct the string, the next symbol is 'G'/'C' with probability 0.2, and the next symbol is 'A'/'T' with probability 0.3.\n\nIn practice, many probabilities wind up being very small. In order to work with small probabilities, we may plug them into a function that \"blows them up\" for the sake of comparison. Specifically, the common logarithm of $x$ (defined for $x>0$ and denoted $\\log_{10}(x)$) is the exponent to which we must raise 10 to obtain $x$.\n\n**Given**: A DNA string $s$ of length at most 100 bp and an array $A$ containing at most 20 numbers between 0 and 1.\n\n**Return**: An array $B$ having the same length as $A$ in which $B[k]$ represents the common logarithm of the probability that a random string constructed with the GC - content found in $A[k]$ will match $s$ exactly.\n\n**Sample Dataset**\n\nACGATACAA\n0.129 0.287 0.423 0.476 0.641 0.742 0.783",
    "final_answer": "-5.737 -5.217 -5.263 -5.360 -5.958 -6.628 -7.009"
  },
  {
    "question": "A matching in a graph $G$ is a collection of edges of $G$ for which no node belongs to more than one edge in the collection. See Figure 2 for examples of matchings. If $G$ contains an even number of nodes (say $2n$), then a matching on $G$ is **perfect** if it contains $n$ edges, which is clearly the maximum possible. An example of a graph containing a perfect matching is shown in Figure 3.\n\nFirst, let $K_{n}$ denote the **complete graph** on $2n$ labeled nodes, in which every **node** is connected to every other node with an edge, and let $p_{n}$ denote the total number of perfect matchings in $K_{n}$. For a given node $x$, there are $2n - 1$ ways to join $x$ to the other nodes in the graph, after which point we must form a perfect matching on the remaining $2n - 2$ nodes. This reasoning provides us with the **recurrence relation** $p_{n}=(2n - 1)\\cdot p_{n - 1}$; using the fact that $p_{1}$ is 1, this recurrence relation implies the closed equation $p_{n}=(2n - 1)(2n - 3)(2n - 5)\\cdots(3)(1)$.\n\nGiven an RNA string $s = s_{1}\\cdots s_{n}$, a **bonding graph** for $s$ is formed as follows. First, assign each symbol of $s$ to a node, and arrange these nodes in order around a circle, connecting them with edges called **adjacency edges**. Second, form all possible edges $\\{A, U\\}$ and $\\{C, G\\}$, called **basepair edges**; we will represent basepair edges with dashed edges, as illustrated by the bonding graph in Figure 4.\n\nNote that a matching contained in the basepair edges will represent one possibility for base pairing interactions in $s$, as shown in Figure 5. For such a matching to exist, $s$ must have the same number of occurrences of 'A' as 'U' and the same number of occurrences of 'C' as 'G'.\n\n**Given**: An RNA string $s$ of length at most 80 bp having the same number of occurrences of 'A' as 'U' and the same number of occurrences of 'C' as 'G'.\n\n**Return**: The total possible number of **perfect matchings** of basepair edges in the bonding graph of $s$.\n\n**Sample Dataset**\n\n>Rosalind_23\nAGCUAGUCAU",
    "final_answer": "12"
  },
  {
    "question": "For a collection of strings, a larger string containing every one of the smaller strings as a substring is called a superstring.\n\nBy the assumption of parsimony, a shortest possible superstring over a collection of reads serves as a candidate chromosome.\n\nGiven: At most 50 DNA strings of approximately equal length, not exceeding 1 kbp, in FASTA format (which represent reads deriving from the same strand of a single linear chromosome).\n\nThe dataset is guaranteed to satisfy the following condition: there exists a unique way to reconstruct the entire chromosome from these reads by gluing together pairs of reads that overlap by more than half their length.\n\nReturn: A shortest superstring containing all the given strings (thus corresponding to a reconstructed chromosome).\n\nSample Dataset\n>Rosalind_56\nATTAGACCTG\n>Rosalind_57\nCCTGCCGGAA\n>Rosalind_58\nAGACCTGCCG\n>Rosalind_59\nGCCGGAATAC",
    "final_answer": "ATTAGACCTGCCGGAATAC\n"
  },
  {
    "question": "Assume that an **alphabet** $\\mathscr{A}$ has a predetermined order; that is, we write the alphabet as a **permutation** $\\mathscr{A}=(a_1,a_2,\\ldots,a_k)$, where $a_1 < a_2 < \\cdots < a_k$. For instance, the English alphabet is organized as (A, B, $\\ldots$, Z).\n\nGiven two strings $s$ and $t$ having the same length $n$, we say that $s$ precedes $t$ in the **lexicographic order** (and write $s <_{\\mathrm{Lex}} t$) if the first symbol $s[j]$ that doesn't match $t[j]$ satisfies $s_j < t_j$ in $\\mathscr{A}$.\n\n**Given**: A collection of at most 10 symbols defining an ordered alphabet, and a positive integer $n$ ($n\\leq10$).\n\n**Return**: All strings of length $n$ that can be formed from the alphabet, ordered lexicographically (use the standard order of symbols in the English alphabet).\n\n**Sample Dataset**\n\nA C G T\n2",
    "final_answer": "AA\nAC\nAG\nAT\nCA\nCC\nCG\nCT\nGA\nGC\nGG\nGT\nTA\nTC\nTG\nTT"
  },
  {
    "question": "A subsequence of a string is a collection of symbols contained in order (though not necessarily contiguously) in the string (e.g., ACG is a subsequence of TATGCTAAGATC). The indices of a subsequence are the positions in the string at which the symbols of the subsequence appear; thus, the indices of ACG in TATGCTAAGATC can be represented by (2, 5, 9).\n\nAs a substring can have multiple locations, a subsequence can have multiple collections of indices, and the same index can be reused in more than one appearance of the subsequence; for example, ACG is a subsequence of AACCGGTT in 8 different ways.\n\nGiven: Two DNA strings s\n and t\n (each of length at most 1 kbp) in FASTA format.\n\nReturn: One collection of indices of s\n in which the symbols of t\n appear as a subsequence of s\n. If multiple solutions exist, you may return any one.\n\nSample Dataset\n>Rosalind_14\nACGTACGTGACG\n>Rosalind_18\nGTA",
    "final_answer": "3 8 10"
  }
]