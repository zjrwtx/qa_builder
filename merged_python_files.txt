!!!!!!!!python file name:heart_score.py
"""
 below is the content of heart_score.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function compute_heart_score_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench.utils.age_conversion import (
    age_conversion_explanation,
)


def compute_heart_score_explanation(input_parameters):
    r"""
    Calculates the patient's heart score and generates a detailed
    explanatory text.

    Parameters:
        input_parameters (dict): A dictionary containing the following
        key-value pairs:
            - "age" (array): The patient's albumin concentration in the
            format (value, unit).
                - Value (float): Age.
                - Unit (str): The unit can be "months", "years".
            - "hypertension" (boolean): The patient's history of hypertension.
            - "history" (str): 'Slightly suspicious', 'Moderately
            suspicious', or 'Highly suspicious'.
            - "diabetes_mellitus" (boolean): The patient's diabetes status.
            - "smoking" (boolean): The patient's history of smoking.
            - "family_with_cvd" (boolean): The patient's parent or sibling
            with Cardiovascular disease before age 65.
            - "atherosclerotic_disease" (boolean): The patient's
            atherosclerotic disease.
            - "initial_troponin" (str): The patient's initial troponin:
            "less than or equal to normal limit",
                "between the normal limit or up to three times the normal
                limit",
                or "greater than three times normal limit".
            - "electrocardiogram" (str): The patient's electrocardiogram
            status: "Normal", "Non-specific repolarization disturbance",
            or "Significant ST deviation".
            - "hypercholesterolemia" (boolean): The patient's
            hypercholesterolemia status.
            - "obesity" (boolean): The patient's obesity (BMI > 30 kg/m²).
            - "risk_factors" (dict): Any above risk factors == True should
            be added in this dictionary.

    Returns:
        dict: Contains two key-value pairs:
            - "Explanation" (str): A detailed description of
            the calculation process.
            - "Answer" (float): The patient's corrected calcium
            concentration (in mg/dL).

    Notes:
        - Uses the `conversion_explanation` function to convert Albumin
        level to standard unit g/dL.
        - Uses the `conversion_explanation` function to convert Calcium
        level to standard unit mg/dL.

    Example:
        test_case = {'age': [60, 'years'],
            'hypertension': False,
            'history': 'Slightly suspicious',
            'diabetes_mellitus': False,
            'smoking': False,
            'family_with_cvd': True,
            'atherosclerotic_disease': False,
            'initial_troponin': 'less than or equal to normal limit',
            'electrocardiogram': 'Normal',
            'hypercholesterolemia': False,
            'obesity': False,
            'risk_factors': {'family_with_cvd'}
         }
        compute_heart_score_explanation(test_case)

        output: "{'Explanation': "\nThe HEART Score for risk stratification
        in patients with chest pain is shown below: \n    \n       1.
        History: Slightly suspicious = 0 points, Moderately suspicious = +1
        point, Highly suspicious = +2 points\n 2. EKG: Normal = 0 points,
        Non-specific repolarization disturbance = +1 point, Significant ST
        deviation = +2 points\n 3. Age: <45 years = 0 points, 45-64 years =
        +1 point, ≥65 years = +2 points\n 4. Risk factors (HTN,
        hypercholesterolemia, DM, obesity (BMI >30 kg/m²), smoking (current
        or cessation within 3 months), positive family history of
        cardiovascular disease before age 65, atherosclerotic disease such
        as prior MI, PCI/CABG, CVA/TIA, or peripheral arterial disease): No
        known risk factors = 0 points, 1-2 risk factors = +1 point, ≥3 risk
        factors or history of atherosclerotic disease = +2 points\n 5.
        Initial troponin level: ≤normal limit = 0 points, 1-3x normal limit
        = +1 point, >3x normal limit = +2 points \n    \n       The total
        score is calculated by summing the points for each criterion.\n\n\n
        The current HEART Score is 0.\nThe value of 'history' in the
        patient's note is determined to be 'Slightly suspicious'. Based on
        the HEART Score criteria, 0 points are added for 'history', keeping
        the current total at 0.\nThe value of 'electrocardiogram' in the
        patient's note is determined to be 'Normal'. Based on the HEART
        Score criteria, 0 points are added for 'electrocardiogram', keeping
        the current total at 0.\nThe patient is 60 years old. The patient's
        age is between 45 and 65 years and so we increment the current
        total by 1, making the current total 0 + 1 = 1.\nThe following risk
        factor(s) are present based on the patient's note: family with cvd.
        The following risk factor(s) are mentioned in the patient's note,
        but these risk factors are noted to be absent from the patient:
        hypertension, hypercholesterolemia, diabetes mellitus, obesity,
        smoking, atherosclerotic disease. Based on the HEART Score risk
        factors criteria, 1 risk factors are present and so 1 point is
        added for the risk factors criteria, making the current total,
        1 + 1 = 2.\nThe value of 'initial troponin' in the patient's
        note is determined to be 'less than or equal to normal limit'.
        Based on the HEART Score criteria, 0 points are added for 'initial
        troponin', keeping the current total at 2.\nBased on the patient's
        data, the HEART Score is 2.\n", 'Answer': 2}"
    """

    explanation = """
       The HEART Score for risk stratification in patients with
       chest pain is shown below:

       1. History: Slightly suspicious = 0 points, Moderately suspicious =
        +1 point, Highly suspicious = +2 points
       2. EKG: Normal = 0 points, Non-specific repolarization disturbance =
        +1 point, Significant ST deviation = +2 points
       3. Age: <45 years = 0 points, 45-64 years = +1 point, ≥65 years =
        +2 points
       4. Risk factors (HTN, hypercholesterolemia, DM, obesity (BMI >30 kg/m²),
        smoking (current or cessation within 3 months), positive family
        history of cardiovascular disease before age 65, atherosclerotic
        disease such as prior MI, PCI/CABG, CVA/TIA, or peripheral arterial
        disease): No known risk factors = 0 points, 1-2 risk factors = +1
        point, ≥3 risk factors or history of atherosclerotic disease = +2
        points
       5. Initial troponin level: ≤normal limit = 0 points, 1~3x normal limit
        = +1 point, >3x normal limit = +2 points

       The total score is calculated by summing the points for each criterion.
    """

    # Define parameters and their default values
    parameters = {
        'history': {
            'Slightly suspicious': 0,
            'Moderately suspicious': 1,
            'Highly suspicious': 2,
        },
        'electrocardiogram': {
            'Normal': 0,
            'Non-specific repolarization disturbance': 1,
            'Significant ST deviation': 2,
        },
        'age': {'< 45': 0, '45 - 65': 1, '> 65': 2},
        'risk_factors': {
            'hypertension': 1,
            'hypercholesterolemia': 1,
            'diabetes_mellitus': 1,
            'obesity': 1,
            'smoking': 1,
            'family_with_cvd': 1,
            'atherosclerotic_disease': 1,
        },
        'initial_troponin': {
            'less than or equal to normal limit': 0,
            'between the normal limit or up to '
            'three times the normal limit': 1,
            'greater than three times normal limit': 2,
        },
    }

    factor_name = {
        'hypertension': 'hypertension',
        'hypercholesterolemia': 'hypercholesterolemia',
        'diabetes_mellitus': 'diabetes mellitus',
        'obesity': 'obesity',
        'smoking': 'smoking',
        'family_with_cvd': "family with cvd",
        'atherosclerotic_disease': "atherosclerotic disease",
        'initial_tropopin': 'initial tropopin',
    }

    default_value = {
        'history': 'Slightly suspicious',
        'electrocardiogram': 'Normal',
        'initial_troponin': 'less than or equal to normal limit',
    }

    # Initialize total score and output explanation
    total_score = 0
    explanation += "The current HEART Score is 0.\n"

    for param, options in parameters.items():
        param_value = input_parameters.get(param)

        if param == 'risk_factors':
            present_factors = [
                factor
                for factor in options.keys()
                if input_parameters.get(factor)
            ]
            present_factors_names = [
                factor_name[factor]
                for factor in options.keys()
                if input_parameters.get(factor)
            ]

            if present_factors:
                explanation += (
                    f"The following risk factor(s) are present based on the "
                    f"patient's note: "
                    f"{', '.join(present_factors_names)}. "
                )

            present_but_false = [
                factor
                for factor in options.keys()
                if factor in input_parameters and not input_parameters[factor]
            ]
            present_but_false_names = [
                factor_name[factor]
                for factor in options.keys()
                if factor in input_parameters and not input_parameters[factor]
            ]

            if present_but_false:
                explanation += (
                    f"The following risk factor(s) are mentioned in the "
                    f"patient's note, but these risk factors are noted "
                    f"to be absent from the patient: "
                    f"{', '.join(present_but_false_names)}. "
                )
                for item in present_but_false:
                    input_parameters[item] = False

            missing_factors = [
                factor
                for factor in options.keys()
                if factor not in input_parameters
            ]
            missing_factors_names = [
                factor_name[factor]
                for factor in options.keys()
                if factor in input_parameters and not input_parameters[factor]
            ]

            if missing_factors:
                explanation += (
                    f"The following risk factor(s) are missing from the "
                    f"patient's data: {', '.join(missing_factors_names)}. "
                    f"We will assume that these are all absent from the "
                    f"patient. "
                )

            for factor in missing_factors:
                input_parameters[factor] = False

            factors = present_factors + missing_factors + present_but_false

        elif param in ['history', 'electrocardiogram', 'initial_troponin']:
            if param == 'initial_troponin':
                param_name = 'initial troponin'
            else:
                param_name = param

            if param not in input_parameters:
                explanation += (
                    f"'{param_name}' is missing from the patient's data and "
                    f"so we assume it's value is {default_value[param]}."
                )
                input_parameters[param] = default_value[param]
            else:
                explanation += (
                    f"The value of '{param_name}' in the "
                    f"patient's note is determined to be '"
                    f"{param_value}'. "
                )

        elif param == "age":
            age_explanation, age = age_conversion_explanation(
                input_parameters["age"]
            )
            explanation += age_explanation

        # Add points based on parameter value
        if param == 'risk_factors':
            # Compute the number of risk factors
            risk_factors_count = sum(
                1 for factor in factors if input_parameters[factor]
            )
            explanation += (
                f"Based on the HEART Score risk factors criteria, "
                f"{risk_factors_count} risk factors are present and so "
            )

            if risk_factors_count == 0:
                explanation += (
                    f"0 points are added for the risk factors criteria, "
                    f"keeping the current total at {total_score}.\n"
                )
            elif 1 <= risk_factors_count <= 2:
                explanation += (
                    f"1 point is added for the risk factors criteria, "
                    f"making the current total, {total_score} + 1 = "
                    f"{total_score + 1}.\n"
                )
                total_score += 1
            elif (
                risk_factors_count < 3
                and input_parameters['atherosclerotic_disease']
            ):
                explanation += (
                    f"2 points are added for the risk factors criteria as "
                    f"atherosclerotic disease is present,"
                    f" making the current total {total_score} + 2 = "
                    f"{total_score + 2}.\n"
                )
                total_score += 2
            elif risk_factors_count >= 3:
                explanation += (
                    f"2 points are added as 3 or more risk factors are "
                    f"present, making the current total {total_score} + 2 = "
                    f"{total_score + 2}.\n"
                )
                total_score += 2

        elif param == "age":
            if age < 45:
                explanation += (
                    f"The patient's age is less than 45 years "
                    f"and so keep the current total at "
                    f"{total_score}.\n"
                )
            elif 45 <= age < 65:
                explanation += (
                    f"The patient's age is between 45 and 65 years "
                    f"and so we increment the current total by 1, "
                    f"making the current total {total_score} + 1 = "
                    f"{total_score + 1}.\n"
                )
                total_score += 1
            else:
                explanation += (
                    f"The patient's age is greater than 65 years "
                    f"and so we increment the current total by 2, "
                    f"making the current total {total_score} + 2 = "
                    f"{total_score + 2}.\n"
                )
                total_score += 2
        else:
            points = options[input_parameters[param]]

            if param == 'initial_troponin':
                param = 'initial troponin'

            if points == 0:
                explanation += (
                    f"Based on the HEART Score criteria, 0 points are added "
                    f"for '{param}', keeping the current total at "
                    f"{total_score}.\n"
                )
            elif points == 1:
                explanation += (
                    f"Based on the HEART Score criteria, 1 point is added "
                    f"for '{param}', increasing the current total to"
                    f" {total_score} + 1 = {total_score + 1}.\n"
                )
                total_score += 1
            else:
                explanation += (
                    f"Based on the HEART Score criteria, 2 points are added "
                    f"for '{param}', increasing the current total to"
                    f" {total_score} + 2 = {total_score + 2}.\n"
                )
                total_score += 2

    explanation += (
        f"Based on the patient's data, the HEART Score is {total_score}.\n"
    )

    return {"Explanation": explanation, "Answer": total_score}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            'age': [25, 'years'],
            'hypertension': False,
            'history': 'Slightly suspicious',
            'electrocardiogram': 'Normal',
            'diabetes_mellitus': False,
            'smoking': False,
            'atherosclerotic_disease': False,
            'hypercholesterolemia': False,
            'obesity': False,
            'family_with_cvd': False,
            'initial_troponin': 'less than or equal to normal limit',
            'risk_factors': {},
        },
        {
            'age': [57, 'years'],
            'history': 'Moderately suspicious',
            'electrocardiogram': 'Normal',
            'hypertension': True,
            'hypercholesterolemia': True,
            'diabetes_mellitus': False,
            'obesity': False,
            'smoking': False,
            'family_with_cvd': False,
            'atherosclerotic_disease': False,
            'initial_troponin': 'less than or equal to normal limit',
            'risk_factors': {'hypertension', 'hypercholesterolemia'},
        },
        {
            'age': [60, 'years'],
            'hypertension': False,
            'history': 'Slightly suspicious',
            'diabetes_mellitus': False,
            'smoking': False,
            'family_with_cvd': True,
            'atherosclerotic_disease': False,
            'initial_troponin': 'less than or equal to normal limit',
            'electrocardiogram': 'Normal',
            'hypercholesterolemia': False,
            'obesity': False,
            'risk_factors': {'family_with_cvd'},
        },
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = compute_heart_score_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:glasgow_bleeding_score.py
"""
 below is the content of glasgow_bleeding_score.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function glasgow_bleeding_score_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench.utils.unit_converter_new import (
    conversion_explanation,
)


def glasgow_bleeding_score_explanation(input_parameters):
    explanation = r"""
    The Glasgow-Blatchford Score (GBS) for assessing the severity of 
    gastrointestinal bleeding is shown below:

       1. Hemoglobin level (g/dL): Enter value (norm: 12-17 g/dL)
       2. BUN level (mg/dL): Enter value (norm: 8-20 mg/dL)
       3. Initial systolic blood pressure (mm Hg): Enter value (norm: 
       100-120 mm Hg)
       4. Sex: Female = +1 point, Male = 0 points
       5. Heart rate ≥100: No = 0 points, Yes = +1 point
       6. Melena present: No = 0 points, Yes = +1 point
       7. Recent syncope: No = 0 points, Yes = +2 points
       8. Hepatic disease history: No = 0 points, Yes = +2 points
       9. Cardiac failure present: No = 0 points, Yes = +2 points
    
    The total score is calculated by summing the points for each criterion (
    additional lab values may also be factored into the score).\n\n
    """

    score = 0

    hemoglobin_exp, hemoglobin = conversion_explanation(
        input_parameters["hemoglobin"][0],
        "hemoglobin",
        64500,
        None,
        input_parameters["hemoglobin"][1],
        "g/dL",
    )
    bun_exp, bun = conversion_explanation(
        input_parameters["bun"][0],
        "BUN",
        28.08,
        None,
        input_parameters["bun"][1],
        "mg/dL",
    )
    gender = input_parameters["sex"]
    systiolic_bp = input_parameters["sys_bp"][0]
    heart_rate = input_parameters["heart_rate"][0]

    explanation += (
        f"The current glasgow bleeding score is 0. The patient's "
        f"gender is {gender}.\n"
    )
    explanation += hemoglobin_exp

    if gender == "Male":
        if 12 < hemoglobin <= 13:
            explanation += (
                f"Because the patient is a male and the "
                f"hemoglobin concentration is between 12 and 13 "
                f"g/dL, we add one point, making the current "
                f"score {score} + 1 = {score + 1}.\n"
            )
            score += 1
        elif 10 <= hemoglobin < 12:
            explanation += (
                f"Because the patient is a male and the "
                f"hemoglobin concentration is between 10 and 12 "
                f"g/dL, we add three points, making the current "
                f"score {score} + 3 = {score + 3}.\n"
            )
            score += 3
        elif hemoglobin < 10:
            explanation += (
                f"Because the patient is a male and the "
                f"hemoglobin concentration is less than "
                f"10 and 12 g/dL, we add six points, "
                f"making the current score "
                f"{score} + 6 = {score + 6}.\n"
            )
            score += 6
        elif hemoglobin > 13:
            explanation += (
                f"Because the patient is a male and the "
                f"hemoglobin concentration is greater than 13 "
                f"g/dL, we do not add any points, "
                f"keeping the current score at {score}.\n"
            )

    else:
        if 10 < hemoglobin <= 12:
            explanation += (
                f"Because the patient is a female "
                f"and the hemoglobin concentration is between 10 "
                f"and 12 mg/dL, we add one point, making the "
                f"current score {score} + 1 = {score + 1}.\n"
            )
            score += 1
        elif hemoglobin < 10:
            explanation += (
                f"Because the patient is a female and the "
                f"hemoglobin concentration is less "
                f"than 10 mg/dL, we add three points, "
                f"making the current score "
                f"{score} + 3 = {score + 3}.\n"
            )
            score += 6
        elif hemoglobin > 12:
            explanation += (
                f"Because the patient is a female and the "
                f"hemoglobin concentration is greater than 12 "
                f"mg/dL, we do not add any points, keeping the "
                f"current score at {score}.\n"
            )

    explanation += bun_exp

    if 18.2 <= bun < 22.4:
        explanation += (
            f"The BUN concentration is between 18.2 and 22.4 "
            f"mg/dL, and so we add two points, "
            f"making the current score "
            f"{score} + 2 = {score + 2}.\n"
        )
        score += 2
    elif 22.4 <= bun < 28:
        explanation += (
            f"The BUN concentration is between "
            f"22.4 and 28 mg/dL, and so we add three points, "
            f"making the current score "
            f"{score} + 3 = {score + 3}.\n"
        )
        score += 3
    elif 28 <= bun < 70:
        explanation += (
            f"The BUN concentration is between 28 and 70 mg/dL, "
            f"and so we add four points, making the current score"
            f" {score} + 4 = {score + 4}.\n"
        )
        score += 4
    elif bun > 70:
        explanation += (
            f"The BUN concentration is greater than 70 mg/dL, "
            f"and so we add six points, making the current score"
            f" {score} + 6 = {score + 6}.\n"
        )
        score += 6
    elif bun < 18.2:
        explanation += (
            f"The BUN concentration is less than 18.2 mg/dL, "
            f"and so we do not make any changes to the score, "
            f"keeping the score at {score}.\n"
        )

    explanation += f"The patient's blood pressure is {systiolic_bp} mm Hg. "

    if 100 <= systiolic_bp < 110:
        explanation += (
            f"Because the patient's systolic blood pressure is "
            f"between 100 and 110 mm Hg, we increase the "
            f"score by one point, making the current score "
            f"{score} + 1 = {score + 1}.\n"
        )
        score += 1
    elif 90 <= systiolic_bp < 100:
        explanation += (
            f"Because the patient's systolic blood pressure is "
            f"between 90 and 100 mm Hg, we increase the score by "
            f"two points, making the current score "
            f"{score} + 2 = {score + 2}.\n"
        )
        score += 2
    elif systiolic_bp < 90:
        explanation += (
            f"Because the patient's systolic blood pressure is "
            f"less than 90 mm Hg, we increase the score by three "
            f"points, making the current score "
            f"{score} + 3 = {score + 3}.\n"
        )
        score += 3
    elif systiolic_bp >= 110:
        explanation += (
            f"Because the patient's systolic blood pressure is "
            f"greater than or equal to 110 mm Hg, we do not add "
            f"points to the score, keeping the current score at"
            f" {score} + 3 = {score + 3}.\n"
        )

    explanation += (
        f"The patient's heart rate is {heart_rate} beats per " f"minute. "
    )

    if heart_rate >= 100:
        explanation += (
            f"Because the heart rate is greater or equal to than "
            f"100 beats per minute, we increase the score by one "
            f"point, making the current score {score} + 1 ="
            f" {score + 1}.\n"
        )
        score += 1
    else:
        explanation += (
            f"Because the heart rate is less than 100 beats per "
            f"minute, we do not change the score, keeping the "
            f"current score at {score}.\n"
        )

    default_parameters = {
        "melena_present": "melena",
        "syncope": "recent syncope",
        "hepatic_disease_history": "hepatic disease history",
        "cardiac_failure": "cardiac failure",
    }

    for parameter in default_parameters:
        if parameter not in input_parameters:
            explanation += (
                f"The patient's status for"
                f" {default_parameters[parameter]} is missing "
                f"from the patient note and so we assume it is "
                f"absent from the patient.\n"
            )
            input_parameters[parameter] = False
            explanation += (
                f"Hence, we do not add any points to the score, "
                f"keeping it at {score}.\n"
            )

        elif (
            parameter
            in ['syncope', 'hepatic_disease_history', 'cardiac_failure']
            and input_parameters[parameter]
        ):
            explanation += (
                f"The patient has a"
                f" {default_parameters[parameter]}, and so we "
                f"add two points to the current total, "
                f"making the current total "
                f"{score} + 2 =  {score + 2}.\n"
            )
            score += 2

        elif input_parameters[parameter]:
            explanation += (
                f"The patient has "
                f"{default_parameters[parameter]} and so we add "
                f"one point to the current total, making the "
                f"current total {score} + 1 =  {score + 1}.\n"
            )
            score += 1

        else:
            explanation += (
                f"The patient's status for "
                f"{default_parameters[parameter]} is reported to "
                f"be absent for the patient, and "
                f"so we do not add any points, "
                f"keeping the current total at {score}.\n"
            )

    explanation += f"The patient's Glasgow Bleeding Score is {score}.\n"

    return {"Explanation": explanation, "Answer": score}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            "hemoglobin": (12, 'g/dL'),
            "bun": (10, 'mg/dL'),
            "sys_bp": (70, "mm"),
            "sex": "Male",
            "heart_rate": (92.0, "breaths per minute"),
            "platelet_count": (277000.0, 'µL'),
            "melena_present": False,
            "syncope": False,
            "hepatic_disease_history": False,
            "cardiac_failure": False,
        }
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = glasgow_bleeding_score_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:psi_score.py
"""
 below is the content of psi_score.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function psi_score_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench.utils.age_conversion import (
    age_conversion_explanation,
)
from camel.toolkits.medcalc_bench.utils.convert_temperature import (
    fahrenheit_to_celsius_explanation,
)
from camel.toolkits.medcalc_bench.utils.unit_converter_new import (
    conversion_explanation,
)


def psi_score_explanation(input_variables):
    age_exp, age = age_conversion_explanation(input_variables["age"])
    gender = input_variables["sex"]
    pulse = input_variables["heart_rate"][0]
    temperature_exp, temperature = fahrenheit_to_celsius_explanation(
        input_variables["temperature"][0],
        input_variables["temperature"][1],
    )
    pH = input_variables["pH"]
    respiratory_rate = input_variables["respiratory_rate"][0]
    sys_bp = input_variables["sys_bp"][0]
    bun_exp, bun = conversion_explanation(
        input_variables["bun"][0],
        'BUN',
        28.02,
        None,
        input_variables["bun"][1],
        "mg/dL",
    )
    sodium_exp, sodium = conversion_explanation(
        input_variables["sodium"][0],
        "sodium",
        22.99,
        None,
        input_variables["sodium"][1],
        "mmol/L",
    )
    glucose_exp, glucose = conversion_explanation(
        input_variables["glucose"][0],
        "glucose",
        180.16,
        None,
        input_variables["glucose"][1],
        "mg/dL",
    )
    hemocratit = input_variables["hemocratit"][0]
    partial_pressure_oxygen = input_variables.get("partial_pressure_oxygen")

    explanation = """
    The rules for computing the Pneumonia Severity Index (PSI) are shown below:
    
       1. Age: Enter age in years (age score will be equal to age in years)
       2. Sex: Female = -10 points, Male = 0 points
       3. Nursing home resident: No = 0 points, Yes = +10 points
       4. Neoplastic disease: No = 0 points, Yes = +30 points
       5. Liver disease history: No = 0 points, Yes = +20 points
       6. Congestive heart failure (CHF) history: No = 0 points, Yes = +10 
       points
       7. Cerebrovascular disease history: No = 0 points, Yes = +10 points
       8. Renal disease history: No = 0 points, Yes = +10 points
       9. Altered mental status: No = 0 points, Yes = +20 points
       10. Respiratory rate ≥30 breaths/min: No = 0 points, Yes = +20 points
       11. Systolic blood pressure <90 mmHg: No = 0 points, Yes = +20 points
       12. Temperature <35°C (95°F) or >39.9°C (103.8°F): No = 0 points, 
       Yes = +15 points
       13. Pulse ≥125 beats/min: No = 0 points, Yes = +10 points
       14. pH <7.35: No = 0 points, Yes = +30 points
       15. BUN ≥30 mg/dL or ≥11 mmol/L: No = 0 points, Yes = +20 points
       16. Sodium <130 mmol/L: No = 0 points, Yes = +20 points
       17. Glucose ≥250 mg/dL or ≥14 mmol/L: No = 0 points, Yes = +10 points
       18. Hematocrit <30%: No = 0 points, Yes = +10 points
       19. Partial pressure of oxygen <60 mmHg or <8 kPa: No = 0 points, 
       Yes = +10 points
       20. Pleural effusion on x-ray: No = 0 points, Yes = +10 points
    
    The total score is calculated by summing the points for each criterion.\n\n
    """

    explanation += "The current PSI score is 0.\n"
    age_explanation, age = age_conversion_explanation(input_variables["age"])
    explanation += age_explanation
    explanation += (
        f"We add the the number of years of age of the "
        f"patient to the psi score, making the current "
        f"total 0 + {age} = {age}.\n"
    )

    psi_score = 0

    psi_score += age

    if gender == "Female":
        explanation += (
            f"Because the patient is female, we subtract "
            f"10 points from the current total, making the "
            f"current total {psi_score} - 10 "
            f"= {psi_score - 10}.\n"
        )
        psi_score -= 10
    else:
        explanation += (
            f"Because the patient is male, no adjustments "
            f"are made to the score, keeping the "
            f"current total at {psi_score}.\n"
        )

    parameters = {
        "nursing_home_resident": ("Nursing Home Resident", 10),
        "neoplastic_disease": ("Neoplastic disease", 30),
        "liver_disease": ("Liver disease history", 20),
        "chf": ("CHF History", 10),
        "cerebrovascular_disease": ("Cerebrovascular disease history", 10),
        "renal_disease": ("Renal Disease History", 10),
        "altered_mental_status": ("Altered Mental Status", 20),
        "pleural_effusion": ("Pleural effusion on x-ray", 10),
    }

    for parameter in parameters:
        if parameter == 'nursing_home_resident':
            if parameter not in input_variables:
                explanation += (
                    f"Whether patient is a nursing home "
                    f"resident is not reported. Hence, "
                    f"we assume this to be false and so "
                    f"not add any points to the current "
                    f"total keeping it at {psi_score}.\n"
                )
            elif not input_variables[parameter]:
                explanation += (
                    f"The patient is not a nursing home "
                    f"resident and so we do not add any "
                    f"points to the current total "
                    f"keeping it at {psi_score}.\n"
                )
            else:
                explanation += (
                    f"The patient is reported to be a "
                    f"nursing home resident and so we "
                    f"add 10 points to the score, "
                    f"making the current total "
                    f"{psi_score} + 10 = {psi_score + 10}.\n"
                )
                psi_score += 10
            continue

        if parameter not in input_variables:
            explanation += (
                f"{parameters[parameter][0]} is not reported "
                f"for the patient and so we assume it to be "
                f"false. Hence, we do not add any points "
                f"to the current total keeping it at {psi_score}.\n"
            )
        elif not input_variables[parameter]:
            explanation += (
                f"{parameters[parameter][0]} is reported "
                f"to be false for the patient and so we do "
                f"not add any points to the current total "
                f"keeping it at {psi_score}.\n"
            )
        elif input_variables[parameter]:
            points = parameters[parameter][1]
            explanation += (
                f"{parameters[parameter][0]} is reported to "
                f"be present for the patient and so we add "
                f"{points} points to the score, making "
                f"the current total {psi_score} + {points} "
                f"= {psi_score + points}.\n"
            )
            psi_score += points

    explanation += f"The patient's pulse is {pulse} beats per minute. "

    if pulse >= 125:
        explanation += (
            f"The pulse is greater or equal to than 125 beats "
            f"per minute, and so we add 10 points to the "
            f"score, making the current total {psi_score} "
            f"+ 10 = {psi_score + 10}.\n"
        )
        psi_score += 10
    else:
        explanation += (
            f"The pulse is less than 125 beats per minute "
            f"and so we do not add any points to the score, "
            f"keeping it at {psi_score}.\n"
        )

    explanation += temperature_exp
    if temperature < 35:
        explanation += (
            f"The patient's temperature is less than 35 "
            f"degrees celsius, and so we add 15 points to "
            f"the score, making the current total {psi_score} "
            f"+ 15 = {psi_score + 15}.\n"
        )
        psi_score += 15
    elif temperature > 39.9:
        explanation += (
            f"The patient's temperature is greater than "
            f"39.9 degrees celsius and so we add 15 points "
            f"to the score, making the current total "
            f"{psi_score} + 15 = {psi_score + 15}.\n"
        )
        psi_score += 15
    else:
        explanation += (
            f"The patient's temperature is greater than 35 "
            f"degrees celsius and the temperature is less "
            f"than 39.9 degrees celsius, and so we do not "
            f"add any points to the score, keeping the "
            f"total at {psi_score}.\n"
        )

    explanation += f"The patient's pH is {pH}. "

    if pH < 7.35:
        explanation += (
            f"The patient's pH is less than 7.35, and so "
            f"we add 30 points to the score, making the "
            f"current total {psi_score} + 30 = {psi_score + 30}.\n"
        )
        psi_score += 30
    else:
        explanation += (
            f"The patient's pH is greater than or equal "
            f"to 7.35, and so we do not add any points "
            f"to the score, keeping the current total "
            f"at {psi_score}.\n"
        )

    explanation += (
        f"The patient's respiratory rate is {respiratory_rate} "
        f"breaths per minute. "
    )

    if respiratory_rate >= 30:
        explanation += (
            f"The patient's respiratory rate is greater "
            f"than or equal to 30 breaths per minute and "
            f"so we add 20 points to the score, making "
            f"current total {psi_score} + 20 = {psi_score + 20}.\n"
        )
        psi_score += 20
    else:
        explanation += (
            f"The patient's respiratory rate is less than "
            f"30 breaths per minute and so we do not add "
            f"any points to the score, keeping the total "
            f"score at {psi_score}.\n"
        )

    explanation += f"The patient's systolic blood pressure is {sys_bp} mm Hg. "

    if sys_bp < 90:
        explanation += (
            f"The patient's systolic blood pressure is "
            f"less than 90 mm Hg and so we add 20 points "
            f"to the score, making current total "
            f"{psi_score} + 20 = {psi_score + 20}.\n"
        )
        psi_score += 20
    else:
        explanation += (
            f"The patient's systolic blood pressure is "
            f"greater than or equal to 90 mm Hg and so "
            f"we do not add any points to the score, "
            f"keeping the total at {psi_score}.\n"
        )

    explanation += bun_exp

    if bun >= 30:
        explanation += (
            f"The patient's BUN is greater than or equal "
            f"to 30 mg/dL, and so we add 20 points to "
            f"the score, making current total {psi_score} "
            f"+ 20 = {psi_score + 20}.\n"
        )
        psi_score += 20
    else:
        explanation += (
            f"The patient's BUN is less than 30 mg/dL, "
            f"and so we do not add any points to the "
            f"score, keeping the total at {psi_score}.\n"
        )

    explanation += sodium_exp

    if sodium < 130:
        explanation += (
            f"The patient's sodium is less than 130 "
            f"mmol/L, and so we add 20 points to the "
            f"score, making the current total "
            f"{psi_score} + 20 = {psi_score + 20}.\n"
        )
        psi_score += 20
    else:
        explanation += (
            f"The patient's sodium is greater than or "
            f"equal to 130 mmol/L, and so we do not "
            f"add any points to the score, keeping "
            f"the total at {psi_score}.\n"
        )

    explanation += glucose_exp

    if glucose >= 250:
        explanation += (
            f"The patient's glucose concentration is "
            f"greater than 250 mg/dL, and so we add 10 "
            f"points to the score, making the current "
            f"total {psi_score} + 10 = {psi_score + 10}.\n"
        )
        psi_score += 10
    else:
        explanation += (
            f"The patient's glucose concentration is "
            f"less than or equal to than 250 mg/dL, "
            f"and so we not add any points to the current "
            f"total, keeping it at {psi_score}.\n"
        )

    explanation += f"The patient's hemocratit is {hemocratit} %. "

    if hemocratit < 30:
        explanation += (
            f"The patient's hemocratit is less than 30%, "
            f"and so we add 10 points to the score, "
            f"making the current total {psi_score} + "
            f"10 = {psi_score + 10}.\n"
        )
        psi_score += 10
    else:
        explanation += (
            f"The patient's hemocratit is greater than or equal "
            f"to 30%, and so we not add any points to "
            f"the current total, keeping it at {psi_score}.\n"
        )

    if partial_pressure_oxygen[1] == "mm Hg":
        explanation += (
            f"The patient's partial pressure of oxygen "
            f"is {partial_pressure_oxygen[0]} mm Hg. "
        )

        if partial_pressure_oxygen[0] < 60:
            explanation += (
                f"The patient's partial pressure of "
                f"oxygen is less than 60 mm Hg, and so "
                f"we add {psi_score} points to the score, "
                f"making the current total {psi_score} "
                f"+ 10 = {psi_score + 10}.\n"
            )
            psi_score += 10
        else:
            explanation += (
                f"The patient's partial pressure of "
                f"oxygen is greater than or equal to "
                f"60 mm Hg, and so we not add any points "
                f"to the current total, keeping "
                f"it at {psi_score}.\n"
            )

    elif partial_pressure_oxygen[1] == "kPa":
        explanation += (
            f"The patient's partial pressure of oxygen "
            f"is {partial_pressure_oxygen[0]} kPa. "
        )

        if partial_pressure_oxygen[0] < 8:
            explanation += (
                f"The patient's partial pressure of "
                f"oxygen is less than 8 kPa, and so we "
                f"add {psi_score} points to the score, "
                f"making the current total {psi_score} "
                f"+ 10 = {psi_score + 10}.\n"
            )
            psi_score += 10
        else:
            explanation += (
                f"The patient's partial pressure of "
                f"oxygen is greater than or equal to 8 "
                f"kPa, and so we not add any points to "
                f"the current total, keeping it at {psi_score}.\n"
            )

    explanation += f"The patient's PSI score is {psi_score}.\n"

    return {"Explanation": explanation, "Answer": psi_score}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            "sex": "Male",
            "age": (17, "years"),
            "temperature": (99.0, "degrees fahreinheit"),
            "heart_rate": (98.0, 'beats per minute'),
            "pH": 7.3,
            "respiratory_rate": (17.0, "breaths per minute"),
            "sys_bp": (70, "mm"),
            "bun": (3.5, "mmol/L"),
            "sodium": (134.0, "mmol/L"),
            "glucose": (97.3, "mg/dL"),
            "hemocratit": (20, "%"),
            "partial_pressure_oxygen": (80, "mm"),
            "nursing_home_resident": False,  # Optional
            "neoplastic_disease": False,  # Optional
            "liver_disease": False,  # Optional
            "chf": False,  # Optional
            "cerebrovascular_disease": False,  # Optional
            "renal_disease": False,  # Optional
            "altered_mental_status": False,  # Optional
            "pleural_effusion": False,  # Optional
        },
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = psi_score_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:merge.py
"""
 below is the content of merge.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import argparse
from pathlib import Path


def merge_python_files(directory, output_file):
    """
    将指定目录下的所有Python文件合并到一个txt文件中
    
    Args:
        directory (str): 包含Python文件的目录路径
        output_file (str): 输出txt文件的路径
    """
    # 确保目录存在
    if not os.path.isdir(directory):
        raise ValueError(f"目录不存在: {directory}")
    
    # 获取所有Python文件
    python_files = list(Path(directory).glob("**/*.py"))
    
    if not python_files:
        print(f"在 {directory} 目录下未找到Python文件")
        return
    
    print(f"找到 {len(python_files)} 个Python文件")
    
    # 写入合并后的文件
    with open(output_file, "w", encoding="utf-8") as outfile:
        for py_file in python_files:
            file_name = py_file.name
            
            # 写入文件名
            outfile.write(f"{file_name}\n")
            outfile.write(f'"""\n')
            
            # 读取并写入文件内容
            try:
                with open(py_file, "r", encoding="utf-8") as infile:
                    content = infile.read()
                    outfile.write(content)
                    
                    # 确保文件内容结尾有换行符
                    if not content.endswith("\n"):
                        outfile.write("\n")
            except Exception as e:
                outfile.write(f"读取文件出错: {str(e)}\n")
            
            # 结束引号
            outfile.write('"""\n\n')
    
    print(f"所有Python文件已合并到: {output_file}")


def main():
    parser = argparse.ArgumentParser(description="将目录中的所有Python文件合并到一个txt文件中")
    parser.add_argument(
        "-d", "--directory", 
        required=True,
        help="包含Python文件的目录路径"s
    )
    parser.add_argument(
        "-o", "--output", 
        default="merged_python_files.txt",
        help="输出文件的路径 (默认: merged_python_files.txt)"
    )
    
    args = parser.parse_args()
    merge_python_files(args.directory, args.output)


if __name__ == "__main__":
    main()
"""

!!!!!!!!python file name:anion_gap.py
"""
 below is the content of anion_gap.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function compute_anion_gap_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench.utils.rounding import round_number
from camel.toolkits.medcalc_bench.utils.unit_converter_new import (
    conversion_explanation,
)


def compute_anion_gap_explanation(input_parameters):
    r"""
    Calculates the patient's anion gap and generates a detailed explanatory
    text.

    Parameters:
        input_parameters (dict): A dictionary containing the following
        key-value pairs:
            - "sodium" (array): The patient's blood sodium level in the
            format (value, unit).
                - Value (float): The blood sodium level.
                - Unit (str): The unit of blood sodium level.
            - "chloride" (array): The patient's chloride level in the
            format (value, unit).
                - Value (float): The value of chloride level.
                - Unit (str): The unit of chloride level, eg. "mmol/L",
                "mEq/L", and so on.
            - "bicarbonate" (array): The patient's bicarbonate level in the
            format (value, unit).
                - Value (float): The value of bicarbonate level.
                - Unit (str): The unit of bicarbonate level, eg. "mmol/L",
                "mEq/L", and so on.

    Returns:
        dict: Contains two key-value pairs:
            - "Explanation" (str): A detailed description of
            the calculation process.
            - "Answer" (float): The patient's anion gap.

    Notes:
        - None

    Example:
        compute_anion_gap_explanation({'chloride': [106.0, 'mEq/L'],
        'bicarbonate': [20.0, 'mEq/L'],'sodium': [140.0, 'mEq/L']})
        output: "{'Explanation': "The formula for computing a patient's
        anion gap is: sodium (mEq/L) - (chloride (mEq/L)+ bicarbonate
        (mEq/L)).\nThe concentration of sodium is 140.0 mEq/L.
        \nThe concentration of chloride is 106.0 mEq/L. \nThe concentration
        of bicarbonate is 20.0 mEq/L. \nPlugging in these values into the
        anion gap formula gives us 140.0 mEq/L - (106.0 mEq/L + 20.0 mEq/L)
        = 14.0 mEq/L. Hence, The patient's anion gap is 14.0 mEq/L.\n",
        'Answer': 14.0}"
    """

    explanation = ""
    explanation += (
        "The formula for computing a patient's anion gap is: "
        "sodium (mEq/L) - (chloride (mEq/L)+ bicarbonate (mEq/L)).\n"
    )

    sodium = input_parameters["sodium"]
    chloride = input_parameters["chloride"]
    bicarbonate = input_parameters["bicarbonate"]

    sodium_exp, sodium = conversion_explanation(
        sodium[0], "sodium", 22.99, 1, sodium[1], "mEq/L"
    )
    chloride_exp, chloride = conversion_explanation(
        chloride[0], "chloride", 35.45, 1, chloride[1], "mEq/L"
    )
    bicarbonate_exp, bicarbonate = conversion_explanation(
        bicarbonate[0], "bicarbonate", 61.02, 1, bicarbonate[1], "mEq/L"
    )

    explanation += sodium_exp + "\n"
    explanation += chloride_exp + "\n"
    explanation += bicarbonate_exp + "\n"

    answer = round_number(sodium - (chloride + bicarbonate))

    explanation += (
        f"Plugging in these values into the anion gap formula gives us "
        f"{sodium} mEq/L - ({chloride} mEq/L + "
        f"{bicarbonate} mEq/L) = {answer} mEq/L. "
    )
    explanation += f"Hence, The patient's anion gap is {answer} mEq/L.\n"

    return {"Explanation": explanation, "Answer": answer}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            "sodium": (134.0, 'mmol/L'),
            "chloride": (109.0, 'mmol/L'),
            "bicarbonate": (21.0, 'mmol/L'),
        },
        {
            'chloride': (106.0, 'mEq/L'),
            'bicarbonate': (20.0, 'mEq/L'),
            'sodium': (140.0, 'mEq/L'),
        },
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = compute_anion_gap_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:albumin_delta_ratio.py
"""
 below is the content of albumin_delta_ratio.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function compute_albumin_delta_ratio_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench.albumin_corrected_delta_gap import (
    compute_albumin_corrected_delta_gap_explanation,
)
from camel.toolkits.medcalc_bench.utils.rounding import round_number
from camel.toolkits.medcalc_bench.utils.unit_converter_new import (
    conversion_explanation,
)


def compute_albumin_delta_ratio_explanation(input_parameters):
    r"""
    Calculates the patient's albumin delta ratio and generates a detailed
    explanatory text.

    Parameters:
        input_parameters (dict): A dictionary containing the following
        key-value pairs:
            - "sodium" (array): The patient's blood sodium level in the
            format (value, unit).
                - Value (float): The blood sodium level.
                - Unit (str): The unit of blood sodium level.
            - "chloride" (array): The patient's chloride level in
            the format (value, unit).
                - Value (float): The value of chloride level.
                - Unit (str): The unit of chloride level, eg. "mmol/L",
                "mEq/L", and so on.
            - "bicarbonate" (array): The patient's bicarbonate level in
            the format (value, unit).
                - Value (float): The value of bicarbonate level.
                - Unit (str): The unit of bicarbonate level, eg. "mmol/L",
                "mEq/L", and so on.
            - "albumin" (array): The patient's albumin concentration in
            the format (value, unit).
                - Value (float): The numerical albumin concentration value.
                - Unit (str): The unit of albumin concentration, eg. "g/L",
                "mg/dL", "g/mL" and so on.

    Returns:
        dict: Contains two key-value pairs:
            - "Explanation" (str): A detailed description of
            the calculation process.
            - "Answer" (float): The patient's albumin delta ratio.

    Notes:
        - None

    Example:
        compute_albumin_delta_ratio_explanation({'chloride': (105.0,
        'mEq/L'), 'bicarbonate': (28.0, 'mEq/L'), 'albumin': (3.9, 'g/dL'),
        'sodium': (140.0, 'mEq/L')})

        output: "{'Explanation': "The formula for computing the albumin
        corrected delta ratio is albumin corrected delta gap (mEq/L)/(24 -
        bicarbonate mEq/L).\nTo compute the formula of albumin corrected
        delta gap, the formula is albumin corrected anion gap (in mEq/L) -
        12.\nThe formula for computing a patient's albumin corrected anion
        gap is: anion_gap (in mEq/L) + 2.5 * (4 - albumin (in g/dL)).\nThe
        formula for computing a patient's anion gap is: sodium (mEq/L) - (
        chloride (mEq/L)+ bicarbonate (mEq/L)).\nThe concentration of
        sodium is 140.0 mEq/L. \nThe concentration of chloride is 105.0
        mEq/L. \nThe concentration of bicarbonate is 28.0 mEq/L. \nPlugging
        in these values into the anion gap formula gives us 140.0 mEq/L - (
        105.0 mEq/L + 28.0 mEq/L) = 7.0 mEq/L. Hence, The patient's anion
        gap is 7.0 mEq/L.\nThe concentration of albumin is 3.9 g/dL.
        Plugging in these values into the albumin corrected anion gap
        formula, we get 7.0 (mEq/L) + 2.5 * (4 - 3.9 ( in g/dL)) = 7.25
        mEq/L. Hence, the patient's albumin corrected anion gap is 7.25
        mEq/L.\nPlugging in 7.25 mEq/L for the anion gap into the albumin
        corrected delta gap formula, we get 7.25 - 12 = -4.75 mEq/L. Hence,
        the patient's albumin corrected delta gap is -4.75 mEq/L.\nPlugging
        in the albumin corrected delta gap and the bicarbonate
        concentration into the albumin corrected delta ratio formula,
        we get -4.75 mEq/L / -4.0 mEq/L = 1.188. The patient's albumin
        corrected delta ratio is 1.188.\n", 'Answer': 1.188}"
    """

    albumin_delta_gap_resp = compute_albumin_corrected_delta_gap_explanation(
        input_parameters
    )

    bicarbonate_exp, bicarbonate_val = conversion_explanation(
        input_parameters["bicarbonate"][0],
        "bicarbonate",
        61.02,
        1,
        input_parameters["bicarbonate"][1],
        "mEq/L",
    )

    explanation = (
        "The formula for computing the albumin corrected delta ratio is "
        "albumin corrected delta gap (mEq/L)/(24 - bicarbonate mEq/L).\n"
    )

    albmin_corrected_delta_gap_val = albumin_delta_gap_resp["Answer"]

    explanation += f"{albumin_delta_gap_resp['Explanation']}"

    final_answer = round_number(
        albumin_delta_gap_resp['Answer'] / (24 - bicarbonate_val)
    )

    explanation += (
        f"Plugging in the albumin corrected delta gap and the bicarbonate "
        f"concentration into the albumin "
        f"corrected delta ratio formula, we get "
        f"{albmin_corrected_delta_gap_val} mEq/L / "
        f"{24 - bicarbonate_val} mEq/L = {final_answer}. "
    )
    explanation += (
        f"The patient's albumin corrected delta ratio is {final_answer}.\n"
    )

    return {"Explanation": explanation, "Answer": final_answer}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            "chloride": (100.0, "mmol/L"),
            "bicarbonate": (19.0, "mmol/L"),
            "albumin": (4.4, "g/dL"),
            "sodium": (134.0, "mmol/L"),
        },
        {
            "chloride": (105.0, "mEq/L"),
            "bicarbonate": (28.0, "mEq/L"),
            "albumin": (3.9, "g/dL"),
            "sodium": (140.0, "mEq/L"),
        },
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = compute_albumin_delta_ratio_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:homa_ir.py
"""
 below is the content of homa_ir.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function compute_homa_ir_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench.utils.rounding import round_number
from camel.toolkits.medcalc_bench.utils.unit_converter_new import (
    conversion_explanation,
)


def compute_homa_ir_explanation(input_variables):
    r"""
    Calculates the patient's Homeostatic Model Assessment for Insulin
    Resistance and generates a detailed explanatory text.

    Parameters:
        input_variables (dict): A dictionary containing the following
        key-value pairs:
            - "insulin" (array): The patient's insulin level in the
            format (value, unit).
                - Value (float): The value of insulin level.
                - Unit (str): The unit of insulin level, eg. "µIU/mL",
                "pmol/L", and so on.
            - "glucose" (array): The patient's blood glucose level in the
            format (value, unit).
                - Value (float): The value of blood glucose level.
                - Unit (str): The unit of blood glucose level,
                eg. "mmol/L", "mEq/L", and so on.

    Returns:
        dict: Contains two key-value pairs:
            - "Explanation" (str): A detailed description of
            the calculation process.
            - "Answer" (float): The patient's Homeostatic Model Assessment
            for Insulin Resistance.

    Notes:
        - None

    Example:
        compute_homa_ir_explanation({'insulin': [756.0, 'pmol/L'],
        'glucose': [97.3, 'mg/dL']})

        output: "{'Explanation': "The formula for computing HOMA-IR score is
        (insulin (µIU/mL) * glucose mg/dL)/405. \nThe concentration of
        glucose is 97.3 mg/dL. \nPlugging into the formula will give us
        756.0 * 97.3/405 = 181.627.
        Hence, the patient's HOMA-IR score is 181.627. \n", 'Answer': 181.627}"
    """

    explanation = (
        "The formula for computing HOMA-IR score is (insulin ("
        "µIU/mL) * glucose mg/dL)/405.\n"
    )

    insulin = input_variables["insulin"][0]

    if input_variables["insulin"][1] == "µIU/mL":
        explanation += f"The concentration of insulin is {insulin} µIU/mL.\n"

    elif input_variables["insulin"][1] == "pmol/L":
        insulin = input_variables["insulin"][0] * 6
        explanation += (
            f"The concentration of insulin is {insulin} pmol/L. "
            f"We to need convert the concentration of insulin to pmol/L, "
            f"by multiplying by the conversion factor of 6.0 µIU/mL/pmol/L. "
            f"This makes the insulin concentration "
            f"{input_variables['insulin'][0]} * 6 µIU/mL/pmol/L = {insulin} "
            f"µIU/mL.\n"
        )

    elif input_variables["insulin"][1] == "ng/mL":
        insulin = input_variables["insulin"][0] * 24.8
        explanation += (
            f"The concentration of insulin is {insulin} ng/mL. "
            f"We to need convert the concentration of insulin to µIU/mL, "
            f"by multiplying by the conversion factor 24.8 µIU/mL/ng/mL. "
            f"This makes the insulin concentration "
            f"{input_variables['insulin'][0]} * 24.8 µIU/mL/ng/mL = "
            f"{insulin} ng/mL.\n"
        )

    glucose_exp, glucose = conversion_explanation(
        input_variables["glucose"][0],
        "glucose",
        180.16,
        None,
        input_variables["glucose"][1],
        "mg/dL",
    )

    explanation += glucose_exp + "\n"

    answer = round_number((insulin * glucose) / 405)

    explanation += (
        f"Plugging into the formula will give us "
        f"{insulin} * {glucose}/405 = {answer}. "
        f"Hence, the patient's HOMA-IR score is {answer}. \n"
    )

    return {"Explanation": explanation, "Answer": answer}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [{'insulin': [756.0, 'pmol/dL'], 'glucose': [97.3, 'mg/dL']}]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = compute_homa_ir_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:sirs_criteria.py
"""
 below is the content of sirs_criteria.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function sirs_criteria_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench.utils.convert_temperature import (
    fahrenheit_to_celsius_explanation,
)
from camel.toolkits.medcalc_bench.utils.unit_converter_new import (
    convert_to_units_per_liter_explanation,
)


def sirs_criteria_explanation(input_parameters):
    explanation = r"""
    The rules for SIRS Criteria are listed below:
    
       1. Temperature >38°C (100.4°F) or <36°C (96.8°F): No = 0 points, 
       Yes = +1 point
       2. Heart rate >90: No = 0 points, Yes = +1 point
       3. Respiratory rate >20 or PaCO₂ <32 mm Hg: No = 0 points, Yes = +1 
       point
       4. White blood cell count (WBC) >12,000/mm³, <4,000/mm³, or >10% 
       bands: No = 0 points, Yes = +1 point
    
    The total number of criteria met is taken by summing the score for each 
    criteria.\n\n
    """

    explanation += "The current count of SIRS criteria met is 0.\n"

    temperature = input_parameters["temperature"]

    temp_exp, temperature = fahrenheit_to_celsius_explanation(
        temperature[0], temperature[1]
    )
    heart_rate = input_parameters["heart_rate"][0]
    wbc_exp, wbc = convert_to_units_per_liter_explanation(
        input_parameters["wbc"][0],
        input_parameters["wbc"][1],
        "white blood cell",
        "m^3",
    )

    criteria_met = 0

    explanation += temp_exp

    if temperature > 38:
        explanation += (
            f"Because the temperature is greater than 38 degrees "
            f"celsius, we increment the criteria count by 1 "
            f"making the current total {criteria_met} + 1 = "
            f"{criteria_met + 1}.\n"
        )
        criteria_met += 1
    elif temperature < 36:
        explanation += (
            f"Because the temperature is less than 36 degrees "
            f"celsius, we increment the criteria count by 1 "
            f"making the current total {criteria_met} + 1 = "
            f"{criteria_met + 1}.\n"
        )
        criteria_met += 1
    else:
        explanation += (
            f"Because the temperature is between 36 and 38 "
            f"degrees celsius, this does not meet SIRS criteria "
            f"for temperature, and so the current total remains "
            f"at {criteria_met}.\n"
        )

    explanation += (
        f"The patient's heart rate is {heart_rate} beats per " f"minute. "
    )

    if heart_rate > 90:
        explanation += (
            f"Because the heart rate is greater than 90 beats "
            f"per minute, this meets SIRS criteria and so we "
            f"increment the criteria count by 1 making the "
            f"current total {criteria_met} + 1 = "
            f"{criteria_met + 1}.\n"
        )
        criteria_met += 1
    else:
        explanation += (
            f"Because the heart rate is less than 90 beats per "
            f"minute, this does not meet SIRS criteria for heart "
            f"rate, and so the current total remains at "
            f"{criteria_met}.\n"
        )
        criteria_met += 1

    explanation += wbc_exp

    if wbc > 12000:
        explanation += (
            f"Because the white blood cell count is greater than "
            f"12000 count per mm^3, we increment the criteria "
            f"count by 1 making the current total {criteria_met} "
            f"+ 1 = {criteria_met + 1}.\n"
        )
        criteria_met += 1
    elif wbc < 4000:
        explanation += (
            f"Because the white blood cell count is less than "
            f"4000 count per mm^3, we increment the criteria "
            f"count by 1 making the current total {criteria_met} "
            f"+ 1 = {criteria_met + 1}.\n"
        )
        criteria_met += 1
    else:
        explanation += (
            f"Because the white blood cell count is between 4000 "
            f"and 12000 count per mm^3, this does not meet SIRS "
            f"criteria for white blood cell count, and so the "
            f"current total remains at {criteria_met}.\n"
        )

    explanation += (
        "The final SIRS criteria is whether the patient has a "
        "respiratory rate of more than 20 breaths per minute or "
        "if the patient's PaCO₂ partial pressure is less than 32 "
        "mm Hg. "
    )

    if 'respiratory_rate' in input_parameters:
        respiratory_rate = input_parameters['respiratory_rate'][0]
        explanation += (
            f"The patient's respiratory rate is "
            f"{respiratory_rate} breaths per minute, "
        )
        res = ""

        if respiratory_rate > 20:
            res += "which is greater than 20 breaths per minute. "
            resp_met = True
        else:
            res += "which is less or equal to than 20 breaths per min. "
            resp_met = False

        explanation += res
    else:
        explanation += (
            "The patient's respiratory rate is not provided and "
            "so we assume that the patient's respiratory rate is "
            "less than or equal to 20 breaths per minute. "
        )
        resp_met = False

    if 'paco2' in input_parameters:
        paco2 = input_parameters['paco2'][0]
        explanation += (
            f"The patient's PaCO₂ partial pressure is {paco2} mm " f"Hg, "
        )
        res = ""

        if paco2 < 32:
            res += "which is less than than 32 mm Hg. "
            paco2_met = True
        elif paco2 > 32:
            res += "which is greater or equal to than 32 mm Hg. "
            paco2_met = False

        explanation += res
    else:
        explanation += (
            "The patient's PaCO₂ partial pressure is not "
            "provided and so we assume that the patient's "
            "partial pressure is greater than or equal to 32 mm Hg."
        )
        paco2_met = False

    if resp_met or paco2_met:
        explanation += (
            f"At least one of the criteria is met, and so we "
            f"increment the criteria count by 1 giving us "
            f"a total of {criteria_met} + 1 = "
            f"{criteria_met + 1} criteria met.\n"
        )
        criteria_met += 1
    else:
        explanation += (
            f"Neither criteria met and so keep the current total "
            f"at {criteria_met}.\n"
        )

    explanation += (
        f"Hence, the the number of SIRS criteria met by the "
        f"patient is {criteria_met}.\n"
    )

    return {"Explanation": explanation, "Answer": criteria_met}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            "temperature": (38.0, 'degrees celsius'),
            "heart_rate": (74.0, 'beats per minute'),
            "respiratory_rate": (50.0, 'breaths per minute'),
            "wbc": (15760.0, 'mL'),
        },
        {
            'temperature': (38.9, 'degrees celsius'),
            'heart_rate': (98.0, 'beats per minute'),
            'respiratory_rate': (17.0, 'breaths per minute'),
            'wbc': (10500.0, 'm^3'),
        },
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = sirs_criteria_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:qt_calculator_fredericia.py
"""
 below is the content of qt_calculator_fredericia.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function fredericia_calculator_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench.utils.rounding import round_number


def fredericia_calculator_explanation(input_variables):
    r"""
    Calculates the patient's corrected QT interval using the Fridericia
    Formula and generates a detailed explanatory
    text.

    Parameters:
        input_variables (dict): A dictionary containing the following
        key-value pairs:
            - "heart_rate" (tuple): The patient's heart rate in the format (
            value, unit).
                - Value (float): The value of the patient's heart rate.
                - Unit (str): The unit of heart rate should be "beats per
                minute".
            - "qt_interval" (tuple): The QT interval of 330 msec.
                - Value (float): The value of QT interval.
                - Unit (str): The unit of QT interval, "msec".

    Returns:
        dict: Contains two key-value pairs:
            - "Explanation" (str): A detailed description of
            the calculation process.
            - "Answer" (float): The patient's corrected QT interval using
            the Fridericia Formula.

    Notes:
        - None

    Example:
        fredericia_calculator_explanation({"heart_rate": (70, "beats per
        minute"),"qt_interval": (330, "msec"),})

        output: "{'Explanation': "The corrected QT interval using the
        Fredericia formula is computed as QTc = QT interval / (RR
        interval)**(1/3), where ** denotes an exponent, QT interval is in
        msec, and RR interval is given as 60/(heart rate).\nThe patient's
        heart rate is 70 beats per minute.\nThe QT interval is 330
        msec.\nThe RR interval is computed as 60/(heart rate),
        and so the RR interval is 60/70 = 0.857.\nHence, plugging in these
        values, we will get 330/√(0.857) = 347.419.The patient's corrected
        QT interval (QTc) is 347.419 msec. ", 'Answer': 347.419}"
    """

    heart_rate = input_variables["heart_rate"][0]
    qt_interval = input_variables["qt_interval"][0]

    explanation = (
        "The corrected QT interval using the Fredericia formula is computed "
        "as QTc = QT interval / (RR interval)**(1/3), where ** denotes an "
        "exponent, QT interval is in msec, and RR interval is "
        "given as 60/(heart rate).\n"
    )

    explanation += (
        f"The patient's heart rate is {heart_rate} beats per minute.\n"
    )
    explanation += f"The QT interval is {qt_interval} msec.\n"

    rr_interval_sec = round_number(60 / heart_rate)
    explanation += (
        f"The RR interval is computed as 60/(heart rate), "
        f"and so the RR interval is 60/{heart_rate} = {rr_interval_sec}.\n"
    )

    qt_c = round_number(qt_interval / rr_interval_sec ** (1 / 3))
    explanation += (
        f"Hence, plugging in these values, we will get "
        f"{qt_interval}/√({rr_interval_sec}) = {qt_c}."
    )

    explanation += (
        f"The patient's corrected QT interval (QTc) is {qt_c} msec. "
    )

    return {"Explanation": explanation, "Answer": qt_c}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            "heart_rate": (70, "beats per minute"),
            "qt_interval": (330, "msec"),
        },
        {
            "heart_rate": (179, "beats per minute"),
            "qt_interval": (330, "msec"),
        },
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = fredericia_calculator_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:creatinine_clearance.py
"""
 below is the content of creatinine_clearance.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function generate_cockcroft_gault_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench import (
    adjusted_body_weight,
    bmi_calculator,
    ideal_body_weight,
)
from camel.toolkits.medcalc_bench.utils.age_conversion import (
    age_conversion_explanation,
)
from camel.toolkits.medcalc_bench.utils.rounding import round_number
from camel.toolkits.medcalc_bench.utils.unit_converter_new import (
    conversion_explanation,
)
from camel.toolkits.medcalc_bench.utils.weight_conversion import (
    weight_conversion_explanation,
)


def generate_cockcroft_gault_explanation(params):
    r"""
    Calculates the patient's Creatinine Clearance and generates a detailed
    explanatory text.

    Parameters:
        params (dict): A dictionary containing the following key-value pairs:
            - "sex" (str): The patient's gender, which can be either "Male"
            or "Female".
            - "weight" (tuple): The patient's weight information in the
            format (value, unit).
                - Value (float): The numerical weight measurement.
                - Unit (str): The unit of weight, which can be "lbs" (
                pounds), "g" (grams), or "kg" (kilograms).
            - "height" (tuple): The patient's height information in the
            format (value, unit).
                - Value (float): The numerical height measurement.
                - Unit (str): The unit of height,
                which can be "cm" (centimeters) or "in" (inches).
            - "creatinine" (tuple): The patient's creatinine information in the
            format (value, unit).
                - Value (float): The value of creatinine.
                - Unit (str): The unit of creatinine,
                which can be "mg/dL", "μmol/L", and so on.
            - "age" (array): The patient's albumin concentration in the
            format (value, unit).
                - Value (float): Age.
                - Unit (str): The unit can be "months", "years".

    Returns:
        dict: Contains two key-value pairs:
            - "Explanation" (str): A detailed description of
            the calculation process.
            - "Answer" (float): The patient's Creatinine Clearance.

    Notes:
        - Use the `weight_conversion_explanation` function to
        convert weight to kilogram.
        - Use the `bmi_calculator` function to calculate BMI.
        - Use the `ideal_body_weight` function to calculate Ideal Body
        Weight (IBW)

    Example:
        generate_cockcroft_gault_explanation({"sex": "Female",
        "weight": (55.0, "kg"),"height": (162.8, "cm"),
        "creatinine": (0.57, "mg/dL"),"age": (16, "years")})

        output: "{'Explanation': "The formula for computing Cockcroft-Gault
        is given by CrCl = ((140 - age) * adjusted weight * (
        gender_coefficient)) / (serum creatinine * 72), where the
        gender_coefficient is 1 if male, and 0.85 if female. The serum
        creatinine concentration is in mg/dL.\nThe patient's gender is
        female, which means that the gender coefficient is 0.85.\nThe
        patient is 16 years old. \nThe concentration of creatinine is 0.57
        mg/dL. \nThe formula for computing the patient's BMI is
        (weight)/(height * height), where weight is the patient's weight in
        kg and height is the patient's height in m. \nThe patient's height
        is 162.8 cm, which is 162.8 cm * 1 m / 100 cm = 1.628 m. The
        patient's weight is 55.0 kg. The patient's bmi is therefore 55.0 kg
        / (1.628 m * 1.628 m) = 20.752 kg/m^2. The patient's BMI is 20.8,
        indicating they are normal weight.\nBecause the patient is normal,
        we take minimum of the ideal body weight and the patient's body as
        the patient's adjusted weight for the Cockroft-Gault Equation.
        Hence, the adjusted body weight is the minimum of the two giving us
        an adjusted body weight of 54.918 kg.\n\nUsing the Cockcroft-Gault
        equation:\nCrCl = ((140 - age) * adjusted weight *
        gender_coefficient) / (serum creatinine * 72). \nPlugging the
        patient's values gives us ((140 - 16) * 54.918 * 0.85) /
        (0.57 * 72) = 141.042 mL/min. Hence, the patient's creatinine
        clearance is 141.042 mL/min.\n", 'Answer': 141.042}"
    """

    weight_exp, weight = weight_conversion_explanation(params["weight"])

    output = (
        "The formula for computing Cockcroft-Gault is given by CrCl = ((140 "
        "- age) * adjusted weight * (gender_coefficient)) / (serum "
        "creatinine * 72), where the gender_coefficient is 1 if male, "
        "and 0.85 if female. The serum creatinine concentration is in mg/dL.\n"
    )
    output += f"The patient's gender is {params['sex'].lower()}, "
    gender_coefficient = 1 if params["sex"] == "Male" else 0.85
    output += (
        f"which means that the gender coefficient is {gender_coefficient}.\n"
    )
    age_explanation, age = age_conversion_explanation(params["age"])

    output += f"{age_explanation}\n"

    serum_creatinine_value = params['creatinine'][0]
    serum_creatinine_units = params['creatinine'][1]
    is_male = True if params["sex"] == "Male" else False

    bmi_response = bmi_calculator.bmi_calculator_explanation(params)
    bmi = float(bmi_response["Answer"])

    if bmi < 18.5:
        weight_status = "underweight"
    elif 18.5 <= bmi <= 24.9:
        weight_status = "normal weight"
    else:
        weight_status = "overweight/obese"

    ideal_weight_response = ideal_body_weight.ibw_explanation(params)
    adjusted_weight_response = adjusted_body_weight.abw_explanation(params)
    serum_creatinine_explanation, serum_creatinine = conversion_explanation(
        serum_creatinine_value,
        "creatinine",
        113.12,
        None,
        serum_creatinine_units,
        "mg/dL",
    )

    output += serum_creatinine_explanation + "\n"

    output += f"{bmi_response['Explanation']}"
    output += (
        f"The patient's BMI is {bmi:.1f}, indicating they are "
        f"{weight_status}.\n"
    )

    adjusted_weight = 0

    if bmi < 18.5:
        output += (
            f"Because the patient is underweight, we take the patient's "
            f"weight, {weight} kg as the patient's adjusted weight needed "
            f"for the Cockroft-Gault Equation. "
        )
        adjusted_weight = weight
    elif 18.5 <= bmi <= 24.9:
        adjusted_weight = min(ideal_weight_response["Answer"], weight)
        output += (
            "Because the patient is normal, we take minimum of the ideal "
            "body weight and the patient's body as the patient's adjusted "
            "weight for the Cockroft-Gault Equation. "
        )
        output += (
            f"Hence, the adjusted body weight is the minimum of the two "
            f"giving us an adjusted body weight of {adjusted_weight} kg.\n"
        )

    else:
        output += (
            "Because the patient is overweight/obese, we use the adjusted "
            "body weight formula to get the adjusted weight used for "
            "Cockroft-Gault Equation. "
        )
        output += (
            "Shown below is the computation for IBW (ideal body weight).\n"
        )
        output += f"{ideal_weight_response['Explanation']}"
        output += (
            "Shown below is the computation for ABW (adjusted body weight).\n"
        )
        output += f"{adjusted_weight_response['ABW']}"
        adjusted_weight = adjusted_weight_response["Answer"]

    # Calculate creatinine clearance
    if is_male:
        constant = 1
    else:
        constant = 0.85

    creatinine_clearance = round_number(
        ((140 - age) * adjusted_weight * constant) / (serum_creatinine * 72)
    )

    # Explanation of Cockcroft-Gault equation and result
    output += "\nUsing the Cockcroft-Gault equation:\n"
    output += (
        "CrCl = ((140 - age) * adjusted weight * gender_coefficient) "
        "/ (serum creatinine * 72).\n"
    )
    output += (
        f"Plugging the patient's values gives us ((140 - {age}) * "
        f"{adjusted_weight} * {gender_coefficient}) / "
        f"({serum_creatinine} * 72) = {creatinine_clearance} mL/min. "
    )
    output += (
        f"Hence, the patient's creatinine clearance is "
        f"{creatinine_clearance} mL/min.\n"
    )

    return {"Explanation": output, "Answer": creatinine_clearance}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            "sex": "Female",
            "weight": (55.0, "kg"),
            "height": (162.8, "cm"),
            "creatinine": (0.57, "mg/dL"),
            "age": (16, "years"),
        },
        {
            "sex": "Male",
            "weight": (68.0, "kg"),
            "height": (176.0, "cm"),
            "creatinine": (1.0, "mg/dL"),
            "age": (56, "years"),
        },
    ]
    # {'sex': 'Female', 'weight': [55.0, 'kg'], 'height': [162.8, 'cm'],
    # 'creatinine': [0.57, 'mg/dL'], 'age': [16, 'years']}

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = generate_cockcroft_gault_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:calcium_correction.py
"""
 below is the content of calcium_correction.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function calculate_corrected_calcium_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench.utils.rounding import round_number
from camel.toolkits.medcalc_bench.utils.unit_converter_new import (
    conversion_explanation,
)


def calculate_corrected_calcium_explanation(params):
    r"""
    Calculates the patient's corrected calcium concentration and
    generates a detailed explanatory text.

    Parameters:
        params (dict): A dictionary containing the following key-value pairs:
            - "albumin" (array): The patient's albumin concentration in the
            format (value, unit).
                - Value (float): The numerical albumin concentration value.
                - Unit (str): The unit of albumin concentration, eg. "g/L",
                "mg/dL", "g/mL" and so on.
            - "calcium" (array): The patient's calcium concentration in the
            format (value, unit).
                - Value (float): The numerical calcium concentration value.
                - Unit (str): The unit of calcium concentration, eg. "g/L",
                "mg/dL", "g/mL" and so on.

    Returns:
        dict: Contains two key-value pairs:
            - "Explanation" (str): A detailed description of
            the calculation process.
            - "Answer" (float): The patient's corrected calcium
            concentration (in mg/dL).

    Notes:
        - Uses the `conversion_explanation` function to convert Albumin
        level to standard unit g/dL.
        - Uses the `conversion_explanation` function to convert Calcium
        level to standard unit mg/dL.

    Example:
        calculate_corrected_calcium_explanation({"albumin": [4, "mg/dL"],
        "calcium": [40, "mg/L"]})

        output: "{'Explanation': "To compute the patient's correct calcium
        level in mg/dL, the formula is  (0.8 * (Normal Albumin (in g/dL) -
        Patient's Albumin (in g/dL))) + Serum Calcium (in mg/dL). \nThe
        patient's normal albumin level is 4.0 g/dL.\nThe concentration of
        Albmumin is 4 g/dL. \nThe concentration of Calcium is 40 mg/L. We
        need to convert the concentration to mg/dL. The mass units of the
        source and target are the same so no conversion is needed. The
        current volume unit is L and the target volume unit is dL. The
        conversion factor is 10.0 dL for every unit of L.
        Our next step will be to divide the mass by the volume conversion
        factor of 10.0 to get the final concentration in terms of mg/dL.
        This will result to 40 mg Calcium/10.0 dL = 4.0 mg Calcium/dL. The
        concentration value of 40 mg Calcium/L converts to 4.0 mg
        Calcium/dL. \nPlugging these values into the formula, we get (0.8 *
        (4.0 g/dL - 4 g/dL)) + 4.0 mg/dL = 4.0 mg/dL. \nThe patient's
        corrected calcium concentration 4.0 mg/dL.\n", 'Answer': 4.0}"
    """

    # Extract parameters from the input dictionary
    normal_albumin = 4.0  # Normal albumin level in g/dL

    albumin = params.get('albumin')
    albumin_val = albumin[0]
    albumin_units = albumin[1]

    calcium = params.get('calcium')
    calcium_val = calcium[0]
    calcium_units = calcium[1]

    output = (
        "To compute the patient's correct calcium level in mg/dL, "
        "the formula is "
        "(0.8 * (Normal Albumin (in g/dL) - Patient's Albumin (in g/dL))) + "
        "Serum Calcium (in mg/dL).\n"
    )

    # Generate explanation
    output += "The patient's normal albumin level is 4.0 g/dL.\n"
    albumin_explanation, albumin = conversion_explanation(
        albumin_val, "Albmumin", 66500, None, albumin_units, "g/dL"
    )
    calcium_explanation, calcium = conversion_explanation(
        calcium_val, "Calcium", 40.08, 2, calcium_units, "mg/dL"
    )

    output += f"{albumin_explanation}\n"
    output += f"{calcium_explanation}\n"

    corrected_calcium = round_number(
        0.8 * (normal_albumin - albumin) + calcium
    )

    output += "Plugging these values into the formula, we get "
    output += (
        f"(0.8 * ({normal_albumin} g/dL - {albumin} g/dL)) + "
        f"{calcium} mg/dL = {corrected_calcium} mg/dL.\n"
    )

    output += (
        f"The patient's corrected calcium concentration "
        f"{corrected_calcium} mg/dL.\n"
    )

    return {"Explanation": output, "Answer": corrected_calcium}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            "albumin": (4, "g/dL"),
            "calcium": (40, "mg/L"),
        }
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = calculate_corrected_calcium_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:centor_score.py
"""
 below is the content of centor_score.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function compute_centor_score_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench.utils.age_conversion import (
    age_conversion_explanation,
)
from camel.toolkits.medcalc_bench.utils.convert_temperature import (
    fahrenheit_to_celsius_explanation,
)


def compute_centor_score_explanation(input_variables):
    r"""
    Calculates the patient's Centor Score and generates a detailed
    explanatory text.

    Parameters:
        input_variables (dict): A dictionary containing the following
        key-value pairs:
            - "age" (tuple): The patient's albumin concentration in the
            format (value, unit).
                - Value (float): Age.
                - Unit (str): The unit can be "months", "years".
            - "temperature" (tuple): The patient's temperature in the
            format (value, unit).
                - Value (float): Temperature.
                - Unit (str): The unit can be "fahrenheit", "celsius".
            - "exudate_swelling_tonsils" (boolean): Exudate or swelling on
            tonsils
            - "tender_lymph_nodes" (boolean): Tender/swollen anterior
            cervical lymph nodes
            - "cough_absent" (boolean): Whether cough present

    Returns:
        dict: Contains two key-value pairs:
            - "Explanation" (str): A detailed description of
            the calculation process.
            - "Answer" (float): The patient's Centor Score.

    Notes:
        - None

    Example:
        compute_centor_score_explanation({
            "age": (48, "years"),
            "temperature": (99.0, "degrees fahreinheit"),
            "exudate_swelling_tonsils": False,
            "tender_lymph_nodes": False,
            "cough_absent": False,
        })

        output: "{'Explanation': "\n    The criteria listed in the Centor
        Score formula are listed below:\n    \n       1. Age: 3-14 years =
        +1 point, 15-44 years = 0 points, \n       ≥45 years = -1 point\n
        2. Exudate or swelling on tonsils: No = 0 points, Yes = +1
        point\n       3. Tender/swollen anterior cervical lymph nodes:
        \n       No = 0 points, Yes = +1 point\n       4. Temperature >38°C
        (100.4°F): No = 0 points, Yes = +1 point\n       5. Cough:
        Cough present = 0 points, Cough absent = +1 point\n    \n
        The Centor score is calculated by summing\n    the points for
        each criterion.\n\n\n    The current Centor score is 0.\nThe
        patient is 48 years old. Because the age is greater than 44 years,
        we decrease the score by one point, making the score 0 - 1 = -1.
        \nThe patient's temperature is 99.0 degrees fahrenheit. To convert
        to degrees celsius, apply the formula 5/9 * [temperature (degrees
        fahrenheit) - 32]. This means that the patient's temperature is
        5/9 * 67.0 = 37.222 degrees celsius. The patient's temperature is
        less than or equal to 38 degrees Celsius, and so we do not make any
        changes to the score, keeping the score at -1.\nThe patient note
        reports 'cough absent' as absent for the patient. Hence, we do not
        change the score, keeping the current score at -1.\nThe patient
        note reports 'tender/swollen anterior cervical lymph nodes' as
        absent for the patient. Hence, we do not change the score, keeping
        the current score at -1.\nThe patient note reports 'exudate or
        swelling on tonsils' as absent for the patient. Hence, we do not
        change the score, keeping the current score at -1.\nHence, the
        Centor score forthe patient is -1.\n", 'Answer': -1}"
    """

    explanation = """
    The criteria listed in the Centor Score formula are listed below:
    
       1. Age: 3-14 years = +1 point, 15-44 years = 0 points, 
       ≥45 years = -1 point
       2. Exudate or swelling on tonsils: No = 0 points, Yes = +1 point
       3. Tender/swollen anterior cervical lymph nodes: 
       No = 0 points, Yes = +1 point
       4. Temperature >38°C (100.4°F): No = 0 points, Yes = +1 point
       5. Cough: Cough present = 0 points, Cough absent = +1 point
    
    The Centor score is calculated by summing
    the points for each criterion.\n\n
    """

    centor_score = 0
    age_explanation, age = age_conversion_explanation(input_variables["age"])
    explanation += "The current Centor score is 0.\n"
    explanation += age_explanation

    if 3 <= age <= 14:
        explanation += (
            f"Because the age is between 3 and 14 years, we add "
            f"one point to the score making current score "
            f"{centor_score} + 1 = {centor_score + 1}.\n"
        )
        centor_score += 1
    elif 15 <= age <= 44:
        explanation += (
            f"Because the age is in between 15 and 44 years, "
            f"the score does not change, keeping the score at "
            f"{centor_score}.\n"
        )
    elif age >= 45:
        explanation += (
            f"Because the age is greater than 44 years, "
            f"we decrease the score by one point, making the "
            f"score {centor_score} - 1 = {centor_score - 1}.\n"
        )
        centor_score -= 1

    explanation_temp, temp_val = fahrenheit_to_celsius_explanation(
        input_variables["temperature"][0], input_variables["temperature"][1]
    )

    explanation += explanation_temp
    if temp_val > 38:
        explanation += (
            f"The patient's temperature is greater than 38 "
            f"degrees Celsius, and so we add one point to the "
            f"score, making the current score {centor_score} + 1 "
            f"= {centor_score + 1}.\n"
        )
        centor_score += 1
    elif temp_val <= 38:
        explanation += (
            f"The patient's temperature is less than or equal to "
            f"38 degrees Celsius, and so we do not make any "
            f"changes to the score, keeping the score at "
            f"{centor_score}.\n"
        )

    default_parameters_dict = {
        "cough_absent": "cough absent",
        "tender_lymph_nodes": "tender/swollen "
        "anterior cervical "
        "lymph nodes",
        "exudate_swelling_tonsils": "exudate or " "swelling on " "tonsils",
    }

    for parameter in default_parameters_dict:
        if parameter not in input_variables:
            explanation += (
                f"The patient note does not mention details "
                f"about '{default_parameters_dict[parameter]}' "
                f"and so we assume it to be absent. "
            )
            input_variables[parameter] = False
            explanation += (
                f"Hence, we do not change the score, keeping the "
                f"current score at {centor_score}.\n"
            )
        elif not input_variables[parameter]:
            explanation += (
                f"The patient note reports '"
                f"{default_parameters_dict[parameter]}' as "
                f"absent for the patient. Hence, "
                f"we do not change the score, "
                f"keeping the current score at {centor_score}.\n"
            )
        else:
            explanation += (
                f"The patient note reports '"
                f"{default_parameters_dict[parameter]}' as "
                f"present for the patient. "
                f"Hence, we increase the score by 1, "
                f"making the current score "
                f"{centor_score} + 1 = {centor_score + 1}.\n"
            )
            centor_score += 1

    explanation += (
        f"Hence, the Centor score for" f"the patient is {centor_score}.\n"
    )

    return {"Explanation": explanation, "Answer": centor_score}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            "age": (48, "years"),
            "temperature": (99.0, "degrees fahreinheit"),
            "exudate_swelling_tonsils": False,
            "tender_lymph_nodes": False,
            "cough_absent": False,
        }
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = compute_centor_score_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:curb_65.py
"""
 below is the content of curb_65.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function compute_cci_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench.utils.age_conversion import (
    age_conversion_explanation,
)
from camel.toolkits.medcalc_bench.utils.unit_converter_new import (
    conversion_explanation,
)


def curb_65_explanation(input_parameters):
    r"""
    Calculates the patient's CURB-65 score and generates a
    detailed explanatory text.

        {'age': (37, 'years'),
         'sys_bp': (90.0, 'mm hg'),
         'dia_bp': (50.0, 'mm hg'),
         'respiratory_rate': (30.0, 'breaths per minute'),
         'bun': (3.5, 'mmol/L')}

    Parameters:
        input_parameters (dict): A dictionary containing the following
        key-value pairs:
            - "age" (tuple): The patient's albumin concentration in the
            format (value, unit).
                - Value (float): Age.
                - Unit (str): The unit can be "months", "years".
            - "sys_bp" (tuple): The patient's systolic blood pressure (
            value, unit).
                - Value (float): Systolic blood pressure.
                - Unit (str): The unit of systolic blood pressure,
                which can be 'mm hg'.
            - "dia_bp" (tuple): The patient's diastolic blood pressure (
            value, unit).
                - Value (float): Diastolic blood pressure.
                - Unit (str): The unit of diastolic blood pressure,
                which can be 'mm hg'.
            - "respiratory_rate" (tuple): The patient's respiratory rate
            in the format (value, unit).
                - Value (float): The value of platelet respiratory rate.
                - Unit (str): The unit of respiratory rate,
                e.g. "breaths per minute" and so on.
            - "bun" (tuple): The patient's Blood Urea Nitrogen in the
            format (value, unit).
                - Value (float): The value of BUN.
                - Unit (str): The unit of BUN,
                e.g. "mmol/L" and so on.
            - "confusion" (boolean): Whether the patient has confusion is
            not reported.

    Returns:
        dict: Contains two key-value pairs:
            - "Explanation" (str): A detailed description of
            the calculation process.
            - "Answer" (float): The patient's CURB-65 score.

    Notes:
        - None

    Example:
        curb_65_explanation({'age': (37, 'years'),
        'sys_bp': (90.0, 'mm hg'),
        'dia_bp': (50.0, 'mm hg'),
        'respiratory_rate': (30.0, 'breaths per minute'),
        'bun': (3.5, 'mmol/L')})

        output: "{'Explanation': "\n    The CURB-65 Score criteria are
        listed below:\n\n       1. Confusion: No = 0 points, Yes = +1
        point\n       2. BUN >19 mg/dL (>7 mmol/L urea): No = 0 points,
        Yes = +1 point\n       3. Respiratory Rate ≥30: No = 0 points,
        Yes = +1 point\n       4. Systolic BP <90 mmHg or Diastolic BP ≤60
        mmHg: No = 0 points, \n       Yes = +1 point\n       5. Age ≥65: No
        = 0 points, Yes = +1 point\n    \n    The total CURB-65 score is
        calculated by summing the points for each \n    criterion.\n\n\n
        The CURB-65 score is current at 0 points.\nThe patient is 37 years
        old. The patient's age is less than 65 years, and so we add 0 points
        to the score, keeping the current total at 0.\nWhether the patient
        has confusion is not reported in the note. Hence, we assume this to
        be false, and so 0 points are added to the score, making the current
        total 0.\nThe concentration of BUN is 3.5 mmol/L. We need to convert
        the concentration to mg/dL. Let's first convert the mass of BUN from
        mmol to mg. The mass of BUN is 3.5 mmol. To convert 3.5 mmol
        of BUN to mol, multiply by the conversion factor 0.001, giving
        us 3.5 mmol BUN * 0.001 mol/mmol = 0.004 mol BUN. To convert from
        mol BUN to grams, multiply by the molar mass 28.02 g/mol, which
        will give 0.004 mol BUN * 28.02 g/mol = 0.112 g BUN. To convert
        0.112 g of BUN to mg, multiply by the conversion factor 1000.0,
        giving us 0.112 g BUN * 1000.0 mg/g = 112.0 mg BUN. The current
        volume unit is L and the target volume unit is dL. The conversion
        factor is 10.0 dL for every unit of L. Our next step will be to
        divide the mass by the volume conversion factor of 10.0 to get the
        final concentration in terms of mg/dL. This will result to 112.0 mg
        BUN/10.0 dL = 11.2 mg BUN/dL. The concentration value of 3.5 mmol
        BUN/L converts to 11.2 mg BUN/dL. The patient's BUN concentration
        is less than or equal to 19 mg/dL and so 0 points are added to
        score, keeping the current total at 0.\nThe patient's respiratory
        rate is 30 breaths per minute. Because the respiratory rate is
        greater than 30 breaths per minute, 1 point is added to the score,
        making the current total 0 + 1 = 1.\nThe patient's systiolic blood
        pressure is 90 mm Hg. The patient's diastolic blood pressure is 50
        mm Hg. For a point to be added, the systiolic blood
        pressure must be less than 90 mm Hg or the diastolic blood pressure
        must be less than or equal to 60 mm Hg. Because at least one of
        these statements is true, 1 point is added to score, making the
        current total 1 + 1 = 2.\nThe patient's CURB-65 score is 2.\n",
        'Answer': 2}"
    """
    curb_65_score = 0

    explanation = r"""
    The CURB-65 Score criteria are listed below:

       1. Confusion: No = 0 points, Yes = +1 point
       2. BUN >19 mg/dL (>7 mmol/L urea): No = 0 points, Yes = +1 point
       3. Respiratory Rate ≥30: No = 0 points, Yes = +1 point
       4. Systolic BP <90 mmHg or Diastolic BP ≤60 mmHg: No = 0 points, 
       Yes = +1 point
       5. Age ≥65: No = 0 points, Yes = +1 point
    
    The total CURB-65 score is calculated by summing the points for each 
    criterion.\n\n
    """

    explanation += "The CURB-65 score is current at 0 points.\n"

    bun_exp, bun = conversion_explanation(
        input_parameters["bun"][0],
        "BUN",
        28.02,
        None,
        input_parameters["bun"][1],
        "mg/dL",
    )

    respiratory_rate = int(input_parameters["respiratory_rate"][0])
    sys_bp = int(input_parameters["sys_bp"][0])
    dia_bp = int(input_parameters["dia_bp"][0])
    age_exp, age = age_conversion_explanation(input_parameters["age"])

    explanation += age_exp

    if age >= 65:
        explanation += (
            f"The patient's age is greater than or equal to 65 "
            f"years, and so we add 1 point to the score, making "
            f"the current total {curb_65_score} + 1 = "
            f"{curb_65_score + 1}.\n"
        )
        curb_65_score += 1
    else:
        explanation += (
            f"The patient's age is less than 65 years, and so we "
            f"add 0 points to the score, keeping the current "
            f"total at {curb_65_score}.\n"
        )

    if 'confusion' not in input_parameters:
        explanation += (
            f"Whether the patient has confusion is not reported "
            f"in the note. Hence, we assume this to be false, "
            f"and so 0 points are added to the score, making the "
            f"current total {curb_65_score}.\n"
        )
    elif input_parameters["confusion"]:
        explanation += (
            f"Because the patient has confusion, "
            f"1 point is added to score making the current "
            f"total {curb_65_score} + 1 = {curb_65_score + 1}.\n"
        )
        curb_65_score += 1
    else:
        explanation += (
            f"Because the patient does not have confusion, "
            f"0 points are added to the score, keeping the score "
            f"at {curb_65_score}.\n"
        )

    explanation += bun_exp

    if bun > 19:
        explanation += (
            f"The patient's BUN concentration is greater than 19 "
            f"mg/dL and so we add 1 point to score making the "
            f"current total {curb_65_score} + 1 = "
            f"{curb_65_score + 1}.\n"
        )
        curb_65_score += 1
    else:
        explanation += (
            f"The patient's BUN concentration is less than or "
            f"equal to 19 mg/dL and so 0 points are added to "
            f"score, keeping the current total at "
            f"{curb_65_score}.\n"
        )

    explanation += (
        f"The patient's respiratory rate is {respiratory_rate} "
        f"breaths per minute. "
    )

    if respiratory_rate >= 30:
        explanation += (
            f"Because the respiratory rate is greater than 30 "
            f"breaths per minute, 1 point is added to the score, "
            f"making the current total {curb_65_score} + 1 = "
            f"{curb_65_score + 1}.\n"
        )
        curb_65_score += 1
    else:
        explanation += (
            f"Because the respiratory rate is greater than 30 "
            f"breaths per minute, 0 points are added to the "
            f"score, keeping the current total at "
            f"{curb_65_score}.\n"
        )

    explanation += (
        f"The patient's systiolic blood pressure is {sys_bp} mm "
        f"Hg. The patient's diastolic blood pressure is {dia_bp} "
        f"mm Hg. "
    )

    if sys_bp < 90 or dia_bp <= 60:
        explanation += (
            f"For a point to be added, the systiolic "
            f"blood pressure must be less than 90 mm Hg or the "
            f"diastolic blood pressure must be less than or "
            f"equal to 60 mm Hg. Because at least one of these "
            f"statements is true, 1 point is added to score, "
            f"making the current total {curb_65_score} + 1 = "
            f"{curb_65_score + 1}.\n"
        )
        curb_65_score += 1
    else:
        explanation += (
            f"For a point to be added, the systiolic "
            f"blood pressure must be less than 90 mm Hg or the "
            f"diastolic blood pressure must be less than or "
            f"equal to 60 mm Hg. Because neither of these "
            f"statements are true, 0 points are added to score, "
            f"keeping the current total to {curb_65_score}.\n"
        )

    explanation += f"The patient's CURB-65 score is {curb_65_score}.\n"

    return {"Explanation": explanation, "Answer": curb_65_score}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            'age': (37, 'years'),
            'sys_bp': (90.0, 'mm hg'),
            'dia_bp': (50.0, 'mm hg'),
            'respiratory_rate': (30.0, 'breaths per minute'),
            'bun': (3.5, 'mmol/L'),
        }
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = curb_65_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:mean_arterial_pressure.py
"""
 below is the content of mean_arterial_pressure.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- None

Date: March 2025
"""

from camel.toolkits.medcalc_bench.utils.rounding import round_number


def mean_arterial_pressure_explanation(input_variables):
    r"""
    Calculates the patient's mean arterial pressure and
    generates a detailed explanatory text.

    Parameters:
        input_variables (dict): A dictionary containing the following
        key-value pairs:
            - "sys_bp" (array): The patient's systolic blood pressure (
            value, unit).
                - Value (float): Systolic blood pressure.
                - Unit (str): The unit of systolic blood pressure,
                which can be 'mm hg'.
            - "dia_bp" (array): The patient's diastolic blood pressure (
            value, unit).
                - Value (float): Diastolic blood pressure.
                - Unit (str): The unit of diastolic blood pressure,
                which can be 'mm hg'.

    Returns:
        dict: Contains two key-value pairs:
            - "Explanation" (str): A detailed description of
            the calculation process.
            - "Answer" (float): The patient's mean arterial pressure.

    Notes:
        - None

    Example:
        mean_arterial_pressure_explanation({"sys_bp": [120.0, 'mm hg'],
        "dia_bp": [80.0, 'mm hg']})

        output: "{'Explanation': "The mean average pressure is computed by
        the formula 2/3 * (diastolic blood pressure) + 1/3 *
        (systolic blood pressure). Plugging in the values,
        we get 2/3 * 80.0 mm Hg + 1/3 * 120.0 mm Hg = 93.333 mm Hg.
        \nHence, the patient's mean arterial pressure is 93.333 mm Hg.\n",
        'Answer': 93.333}"
    """

    sys_bp = input_variables['sys_bp']
    dia_bp = input_variables['dia_bp']

    output = ""

    value = round_number(2 * dia_bp[0] / 3 + sys_bp[0] / 3)

    output += (
        f"The mean average pressure is computed by the formula 2/3 * ("
        f"diastolic blood pressure) + 1/3 * (systolic blood pressure). "
        f"Plugging in the values, we get 2/3 * {dia_bp[0]} mm Hg + "
        f"1/3 * {sys_bp[0]} mm Hg = {value} mm Hg.\n"
    )
    output += (
        f"Hence, the patient's mean arterial pressure is {value} mm Hg.\n"
    )

    return {"Explanation": output, "Answer": value}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            "sys_bp": [120.0, 'mm hg'],  # Systolic Blood Pressure
            "dia_bp": [80.0, 'mm hg'],  # Diastolic Blood Pressure
        }
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = mean_arterial_pressure_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:perc_rule.py
"""
 below is the content of perc_rule.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function compute_perc_rule_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench.utils.age_conversion import (
    age_conversion_explanation,
)


def compute_perc_rule_explanation(input_parameters):
    perc_count = 0

    explanation = r"""
    The PERC Rule critiera are listed below:
    
       1. Age ≥50: No = 0 points, Yes = +1 point
       2. Heart Rate (HR) ≥100: No = 0 points, Yes = +1 point
       3. O₂ saturation on room air <95%: No = 0 points, Yes = +1 point
       4. Unilateral leg swelling: No = 0 points, Yes = +1 point
       5. Hemoptysis: No = 0 points, Yes = +1 point
       6. Recent surgery or trauma (within 4 weeks, requiring treatment 
       with general anesthesia): No = 0 points, Yes = +1 point
       7. Prior pulmonary embolism (PE) or deep vein thrombosis (DVT): No = 
       0 points, Yes = +1 point
       8. Hormone use (oral contraceptives, hormone replacement, 
       or estrogenic hormone use in males or females): No = 0 points, 
       Yes = +1 point
    
    The total number of criteria met is taken by summing 
    the points for each criterion.\n\n
    """

    explanation += "The current count of PERC criteria met is 0.\n"

    age_exp, age = age_conversion_explanation(input_parameters["age"])
    heart_rate = input_parameters["heart_rate"][0]
    oxygen_sat = input_parameters["oxygen_sat"][0]

    parameters = {
        "unilateral_leg_swelling": "unilateral leg swelling",
        "hemoptysis": "hemoptysis",
        "recent_surgery_or_trauma": "recent surgery or trauma",
        "previous_pe": "prior pulmonary embolism",
        "previous_dvt": "prior deep vein thrombosis",
        "hormonal_use": "hormonal use",
    }

    explanation += age_exp
    if age >= 50:
        explanation += (
            f"The patient's age is greater than or equal to 50 "
            f"years, and so we increment the perc critieria met "
            f"by 1, making the current total {perc_count} + 1 = "
            f"{perc_count + 1}.\n"
        )
        perc_count += 1
    else:
        explanation += (
            f"The patient's age is less than 50 years, and so we "
            f"do not increment the criteria count. The current "
            f"total remains at {perc_count}.\n"
        )

    explanation += (
        f"The patient's heart rate is {heart_rate} beats per " f"minute. "
    )

    if heart_rate >= 100:
        explanation += (
            f"The patient's heart rate is greater than or equal "
            f"to 100 beats per minute, and so we increment the "
            f"perc critieria met by 1, making the current total "
            f"{perc_count} + 1 = {perc_count + 1}.\n"
        )
        perc_count += 1
    else:
        explanation += (
            f"The patient's heart rate is less than 100 beats "
            f"per minute, and so we do not increment the "
            f"criteria count. The current total "
            f"remains at {perc_count}.\n"
        )

    explanation += (
        f"The saturated oxygen percentage in the room is "
        f"{oxygen_sat} percent. "
    )

    if oxygen_sat < 95:
        explanation += (
            f"The saturated oxygen is less than 95%, and so we "
            f"increment the perc critieria met by 1, making the "
            f"current total {perc_count} + 1 = {perc_count + 1}.\n"
        )
        perc_count += 1
    else:
        explanation += (
            f"The saturated oxygen is greater than or equal to "
            f"95% and so we do not increment the criteria count. "
            f"The current total remains at {perc_count}.\n"
        )

    for parameter in parameters:
        if parameter == "previous_pe":
            continue

        if parameter == "previous_dvt":
            explanation += (
                "The patient must be diagnosed with at least one "
                "of deep vein thrombosis or pulmonary embolism "
                "in the past for a PERC rule criteria to be met. "
            )

            if 'previous_dvt' not in input_parameters:
                explanation += (
                    "Whether the patient has been diagnosed for "
                    "pulmonary embolism in the past is not "
                    "reported. Hence, we assume it to be absent. "
                )
                input_parameters['previous_dvt'] = False
            elif not input_parameters['previous_dvt']:
                explanation += (
                    "The patient is not reported to have been "
                    "diagnosed with deep vein thrombosis in the "
                    "past. "
                )
            else:
                explanation += (
                    "The patient is reported to have been "
                    "diagnosed with deep vein thrombosis in the "
                    "past. "
                )

            if 'previous_pe' not in input_parameters:
                explanation += (
                    "Whether the patient has been diagnosed for "
                    "pulmonary embolism in the past is not "
                    "reported. Hence, we assume it to be absent. "
                )
                input_parameters['previous_pe'] = False
            elif not input_parameters['previous_pe']:
                explanation += (
                    "The patient is not reported to have been "
                    "diagnosed with pulmonary embolism in the "
                    "past. "
                )
            else:
                explanation += (
                    "The patient is reported to have been "
                    "diagnosed with pulmonary embolism in the "
                    "past. "
                )

            if (
                input_parameters['previous_dvt']
                or input_parameters['previous_pe']
            ):
                explanation += (
                    f"At least one of the criteria is met and so "
                    f"we increment the criteria met by 1, making "
                    f"the current total {perc_count} + 1 = "
                    f"{perc_count + 1}.\n"
                )
                perc_count += 1
            else:
                explanation += (
                    f"Neither criteria is met and so we do "
                    f"increment the criteria count, keep the "
                    f"current total at {perc_count}.\n"
                )
            continue

        if parameter not in input_parameters:
            explanation += (
                f"The patient note does not report a status on '"
                f"{parameters[parameter]}'. Hence, we assume it "
                f"to be absent, and so we do not increment the "
                f"criteria count. The current total remains at "
                f"{perc_count}.\n"
            )
        elif not input_parameters[parameter]:
            explanation += (
                f"The patient note reports '"
                f"{parameters[parameter]}' to be absent in the "
                f"patient and so we do not increment "
                f"the criteria count. The current total remains "
                f"at {perc_count}.\n"
            )
        else:
            explanation += (
                f"The patient note reports '"
                f"{parameters[parameter]}' to be present for the "
                f"patient and so we increment the criteria count "
                f"by 1, making the current total "
                f"{perc_count} + 1  =  {perc_count + 1}.\n"
            )
            perc_count += 1

    explanation += (
        f"Hence, the number of PERC rule criteria met by the "
        f"patient is {perc_count}.\n"
    )

    return {"Explanation": explanation, "Answer": perc_count}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            "age": (73, "years"),
            "heart_rate": (92.0, "breaths per minute"),
            "oxygen_sat": (98.0, '%'),
            "unilateral_leg_swelling": False,
            "hemoptysis": False,
            "recent_surgery_or_trauma": True,
            "previous_pe": False,
            "previous_dvt": False,
            "hormonal_use": True,
        }
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = compute_perc_rule_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:cha2ds2_vasc_score.py
"""
 below is the content of cha2ds2_vasc_score.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function compute_cci_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench.utils.age_conversion import (
    age_conversion_explanation,
)


def generate_cha2ds2_vasc_explanation(params):
    score = 0

    output = """
    The criteria for the CHA2DS2-VASc score are listed below:

    1. Age: < 65 years = 0 points, 65-74 years = +1 point, ≥ 75 years
        = +2 points
    2. Sex: Female = +1 point, Male = 0 points
    3. Congestive Heart Failure (CHF) history: No = 0 points, Yes = +1 point
    4. Hypertension history: No = 0 points, Yes = +1 point
    5. Stroke, Transient Ischemic Attack (TIA), or Thromboembolism history:
        No = 0 points, Yes = +2 points
    6. Vascular disease history (previous myocardial infarction, peripheral
        artery disease, or aortic plaque): No = 0 points, Yes = +1 point
    7. Diabetes history: No = 0 points, Yes = +1 point

    The CHA2DS2-VASc score is calculated by summing the points for each
        criterion.\n\n
    """

    output += "The current CHA2DS2-VASc score is 0.\n"

    text, age = age_conversion_explanation(params['age'])
    output += text

    # Age
    if age >= 75:
        output += (
            f"Because the age is greater than 74, two points added to "
            f"the score, making the current total {score} + 2 = "
            f"{score + 2}.\n"
        )
        score += 2
    elif age >= 65:
        output += (
            f"Because the age is between 65 and 74, one point added "
            f"to the score, making the current total {score} + 1 = "
            f"{score + 1}.\n"
        )
        score += 1
    else:
        output += (
            f"Because the age is less than 65 years, no points are "
            f"added to the current total, keeping the total at "
            f"{score}.\n"
        )

    sex = params['sex']  # Sex of the patient (Male/Female)

    output += f"The patient's gender is {sex.lower()} "

    if sex.lower() == 'female':
        output += (
            f"and so one point is added to the score, making the "
            f"current total {score} + 1 = {score + 1}.\n"
        )
        score += 1
    else:
        output += (
            f"and so no points are added to the current total, "
            f"keeping the total at {score}.\n"
        )

    # Congestive Heart Failure
    if 'chf' in params:
        chf = params['chf']
        output += (
            f"The patient history for congestive heart failure is "
            f"{'present' if chf else 'absent'}. "
        )
    else:
        chf = False
        output += (
            "Because the congestive heart failure history is not "
            "specified in the patient note, we assume it is absent "
            "from the patient. "
        )

    # Congestive Heart Failure (CHF)
    if chf:
        output += (
            f"Because the patient has congestive heart failure, "
            f"one point is added to the score, making the current "
            f"total {score} + 1 = {score + 1}.\n"
        )
        score += 1
    else:
        output += (
            f"Because the patient does not have congestive heart "
            f"failure, no points are added to the current total, "
            f"keeping the total at {score}.\n"
        )

    # Hypertension
    if 'hypertension' in params:
        hypertension = params['hypertension']
        output += (
            f"The patient history for hypertension is "
            f"{'present' if hypertension else 'absent'}. "
        )
    else:
        hypertension = False
        output += (
            "Because hypertension history is not specified in the "
            "patient note, we assume that it is absent from the "
            "patient. "
        )

    # Congestive Heart Failure (CHF)
    if hypertension:
        output += (
            f"Because the patient has hypertension, one point is "
            f"added to the score, making the current "
            f"total {score} + 1 = {score + 1}.\n"
        )
        score += 1
    else:
        output += (
            f"Because the patient does not have hypertension, "
            f"no points are added to the current total, "
            f"keeping the total at {score}.\n"
        )

    output += (
        "One criteria of the CHA2DS2-VASc score is to check "
        "if the patient has had any history of stroke, transient "
        "ischemic attacks (TIA), or thromboembolism. "
    )

    if 'stroke' in params:
        stroke = params['stroke']
        output += (
            f"Based on the patient note, the patient history for "
            f"stroke is {'present' if stroke else 'absent'}. "
        )
    else:
        stroke = False
        output += (
            "Because stroke history is not specified in the patient "
            "note, we assume that it is absent from the patient. "
        )

    if 'tia' in params:
        tia = params['tia']
        output += (
            f"Based on the patient note, the patient history for tia "
            f"is {'present' if tia else 'absent'}. "
        )
    else:
        tia = False
        output += (
            "Because tia history is not specified in the patient "
            "note, we assume that it is absent from the patient. "
        )

    if 'thromboembolism' in params:
        thromboembolism = params['thromboembolism']
        output += (
            f"Based on the patient note, the patient history for "
            f"thromboembolism is "
            f"{'present' if thromboembolism else 'absent'}. "
        )
    else:
        thromboembolism = False
        output += (
            "Because thromboembolism history is not specified in the "
            "patient note, we assume it to be absent. "
        )

    # Stroke / TIA / Thromboembolism
    if stroke or tia or thromboembolism:
        output += (
            f"Because at least one of stroke, tia, or thromboembolism "
            f"is present, two points are added to the score, making "
            f"the current total {score} + 2 = {score + 2}.\n"
        )
        score += 2
    else:
        output += (
            f"Because all of stroke, tia, or thromboembolism are "
            f"absent, no points are added to score, keeping the score "
            f"at {score}.\n"
        )

    if 'vascular_disease' in params:
        vascular_disease = params['vascular_disease']
        output += (
            f"Based on the patient note, the patient history for "
            f"vascular disease is "
            f"{'present' if vascular_disease else 'absent'}. "
        )
    else:
        vascular_disease = False
        output += (
            "Because vascular disease history is not specified "
            "in the patient note, we assume it to be absent.\n"
        )

    if vascular_disease:
        output += (
            f"Because the patient has vascular disease, one point is "
            f"added to the score, making the current "
            f"total {score} + 1 = {score + 1}. "
        )
        score += 1
    else:
        output += (
            f"Because the patient does not have vascular disease, "
            f"no points are added to score, keeping the score at "
            f"{score}. "
        )

    if 'diabetes' in params:
        diabetes = params['diabetes']
        output += (
            f"Based on the patient note, the patient history for "
            f"diabetes is {'present' if diabetes else 'absent'}. "
        )
    else:
        diabetes = False
        output += (
            "Because diabetes history is not specified in the "
            "patient note, we assume it's value as 'absent'. "
        )

    if diabetes:
        output += (
            f"Because the patient has diabetes, one point "
            f"is added to the score, making the current total {score} "
            f"+ 1 = {score + 1}.\n"
        )
        score += 1
    else:
        output += (
            f"Because the patient does not have diabetes, "
            f"no points are added to score, keeping the score at "
            f"{score}.\n"
        )

    output += f"The patient's CHA2DS2-VASc Score is {score}.\n"

    return {"Explanation": output, "Answer": score}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            'sex': 'Male',
            'thromboembolism': True,
            'tia': True,
            'hypertension': True,
            'age': (78, 'years'),
            'stroke': True,
        }
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = generate_cha2ds2_vasc_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:steroid_conversion.py
"""
 below is the content of steroid_conversion.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function compute_steroid_conversion_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench.utils.rounding import round_number
from camel.toolkits.medcalc_bench.utils.unit_converter_new import (
    conversion_explanation,
)


def compute_steroid_conversion_explanation(input_parameters):
    r"""
    Calculates the patient's equivalent dosage of MethylPrednisoLONE IV and
    generates a detailed explanatory text.

    Parameters:
        input_parameters (dict): A dictionary containing the following
        key-value pairs:
            - "input steroid" (tuple): The patient's blood sodium level in
            the format (value, unit).
                - Steroid name (str): The various corticosteroids are below:
                    - Betamethasone: Route = IV, Equivalent Dose = 0.75 mg
                    - Cortisone: Route = PO, Equivalent Dose = 25 mg
                    - Dexamethasone (Decadron): Route = IV or PO,
                    Equivalent Dose = 0.75 mg
                    - Hydrocortisone: Route = IV or PO, Equivalent Dose = 20 mg
                    - MethylPrednisoLONE: Route = IV or PO,
                    Equivalent Dose = 4 mg
                    - PrednisoLONE: Route = PO, Equivalent Dose = 5 mg
                    - PredniSONE: Route = PO, Equivalent Dose = 5 mg
                    - Triamcinolone: Route = IV, Equivalent Dose = 4 mg
                - Value (float): The blood sodium level.
                - Unit (str): The unit of blood sodium level.
            - "target steroid" (str): The target steroid (str).
                - "Betamethasone IV"
                - "Cortisone PO"
                - "Dexamethasone IV"
                - "Dexamethasone PO"
                - "Hydrocortisone IV"
                - "Hydrocortisone PO"
                - "MethylPrednisoLONE IV"
                - "MethylPrednisoLONE PO"
                - "PrednisoLONE PO"
                - "PredniSONE PO"
                - "Triamcinolone IV"

    Returns:
        dict: Contains two key-value pairs:
            - "Explanation" (str): A detailed description of
            the calculation process.
            - "Answer" (float): The patient's equivalent dosage of
            MethylPrednisoLONE IV.

    Notes:
        - None

    Example:
        compute_steroid_conversion_explanation({
            'input steroid': ['Hydrocortisone PO', 190.936, 'mg'],
            'target steroid': 'MethylPrednisoLONE IV'})

        output: "{'Explanation': '\n The Steroid Conversions providing
        equivalent doses for various corticosteroids are listed below:\n 1.
        Betamethasone: Route = IV, Equivalent Dose = 0.75 mg\n 2.
        Cortisone: Route = PO, Equivalent Dose = 25 mg\n 3. Dexamethasone
        (Decadron): Route = IV or PO, Equivalent Dose = 0.75 mg\n 4.
        Hydrocortisone: Route = IV or PO, Equivalent Dose = 20 mg\n 5.
        MethylPrednisoLONE: Route = IV or PO, Equivalent Dose = 4 mg\n 6.
        PrednisoLONE: Route = PO, Equivalent Dose = 5 mg\n 7. PredniSONE:
        Route = PO, Equivalent Dose = 5 mg\n 8. Triamcinolone: Route = IV,
        Equivalent Dose = 4 mg \n \n\nThe mass of Hydrocortisone PO is
        190.936 mg. To convert from the Hydrocortisone PO to
        MethylPrednisoLONE IV, multiply by the conversion factor, 0.2 mg
        MethylPrednisoLONE IV/Hydrocortisone PO, giving us 190.936 mg
        Hydrocortisone PO * 0.2 mg MethylPrednisoLONE IV/mg Hydrocortisone
        PO = 38.187 mg MethylPrednisoLONE IV. 190.936 mg of Hydrocortisone
        PO is equal to 38.187 mg of MethylPrednisoLONE IV.\n', 'Answer':
        38.187}"
    """

    explanation = """
        The Steroid Conversions providing equivalent doses for various
        corticosteroids are listed below:
            1. Betamethasone: Route = IV, Equivalent Dose = 0.75 mg
            2. Cortisone: Route = PO, Equivalent Dose = 25 mg
            3. Dexamethasone (Decadron): Route = IV or PO, Equivalent Dose
                = 0.75 mg
            4. Hydrocortisone: Route = IV or PO, Equivalent Dose = 20 mg
            5. MethylPrednisoLONE: Route = IV or PO, Equivalent Dose = 4 mg
            6. PrednisoLONE: Route = PO, Equivalent Dose = 5 mg
            7. PredniSONE: Route = PO, Equivalent Dose = 5 mg
            8. Triamcinolone: Route = IV, Equivalent Dose = 4 mg
        """
    conversion_dict = {
        "Betamethasone IV": 1,
        "Cortisone PO": 33.33,
        "Dexamethasone IV": 1,
        "Dexamethasone PO": 1,
        "Hydrocortisone IV": 26.67,
        "Hydrocortisone PO": 26.67,
        "MethylPrednisoLONE IV": 5.33,
        "MethylPrednisoLONE PO": 5.33,
        "PrednisoLONE PO": 6.67,
        "PredniSONE PO": 6.67,
        "Triamcinolone IV": 5.33,
    }

    explanation += "\n\n"
    input_drug_mass_exp, input_drug_mass = conversion_explanation(
        input_parameters["input steroid"][1],
        input_parameters["input steroid"][0],
        None,
        None,
        input_parameters["input steroid"][2],
        "mg",
    )
    explanation += input_drug_mass_exp

    target_drug_name = input_parameters["target steroid"]
    input_drug_name = input_parameters["input steroid"][0]
    input_unit = input_parameters["input steroid"][2]

    from_multiplier = conversion_dict[input_drug_name]
    to_multiplier = conversion_dict[target_drug_name]

    conversion_factor = round_number(to_multiplier / from_multiplier)
    converted_amount = round_number(input_drug_mass * conversion_factor)
    input_drug_mass = round_number(input_drug_mass)

    explanation += (
        f"To convert from the {input_drug_name} to {target_drug_name}, "
        f"multiply by the conversion factor, "
        f"{conversion_factor} mg {target_drug_name}/{input_drug_name}, "
        f"giving us {input_drug_mass} mg {input_drug_name} * "
        f"{conversion_factor} mg "
        f"{target_drug_name}/mg {input_drug_name} = {converted_amount} mg "
        f"{target_drug_name}. "
    )

    explanation += (
        f"{input_drug_mass} {input_unit} of {input_drug_name} is equal to "
        f"{converted_amount} mg of {target_drug_name}.\n"
    )

    return {"Explanation": explanation, "Answer": converted_amount}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            'input steroid': ['Hydrocortisone PO', 190.936, 'mg'],
            'target steroid': 'MethylPrednisoLONE IV',
        },
        {
            'input steroid': ['Dexamethasone PO', 8.58, 'mg'],
            'target steroid': 'Dexamethasone IV',
        },
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = compute_steroid_conversion_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:wells_criteria_pe.py
"""
 below is the content of wells_criteria_pe.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function calculate_pe_wells_explanation
- translation

Date: March 2025
"""


def calculate_pe_wells_explanation(variables):
    r"""
    Calculates the patient's score of Wells' criteria for Pulmonary Embolism
    and generates a detailed explanatory text.

    Parameters:
        variables (dict): A dictionary containing the following
            key-value pairs:
            - "clinical_dvt" (boolean): Clinical signs and symptoms of DVT:
            No = 0 points, Yes = +3 points.
            - "previous_pe" (boolean): Previous, objectively diagnosed PE:
            No = 0 points, Yes = +1.5 points.
            - "previous_dvt" (boolean): Previous, objectively diagnosed DVT:
            No = 0 points, Yes = +1.5 points.
            - "heart_rate" (tuple): The patient's heart rate in the format (
            value, unit).
                - Value (float): The value of the patient's heart rate.
                - Unit (str): The unit of heart rate should be
                    "beats per minute".
            - "immobilization_for_3days" (boolean): Immobilization at least
            3 days OR surgery in the previous 4 weeks:
                - No = 0 points, Yes = +1.5 points.
            - "hemoptysis" (boolean): No = 0 points, Yes = +1 point.
            - "surgery_in_past4weeks" (boolean): Whether the patient has
            had a surgery for the past 4 weeks.
            - "malignancy_with_treatment" (boolean): Malignancy with
            treatment within 6 months or palliative:
                No = 0 points, Yes = +1 point.
            - "pe_number_one" (boolean): Hemoptysis: PE is #1 diagnosis OR
            equally likely: No = 0 points, Yes = +3 points.

    Returns:
        dict: Contains two key-value pairs:
            - "Explanation" (str): A detailed description of
            the calculation process.
            - "Answer" (float): The patient's score of Wells' criteria for
            Pulmonary Embolism.

    Notes:
        - None.

    Example:
        calculate_pe_wells_explanation({
            "previous_pe": False,
            "heart_rate": (78.0, 'beats per minute'),
            "immobilization_for_3days": False,
            "hemoptysis": False,
            "surgery_in_past4weeks": False,
            "malignancy_with_treatment": False,
            "pe_number_one": False,
            "previous_dvt": False
        })
        output: "{'Explanation': "\n    The criteria for the Wells' Criteria
        for Pulmonary Embolism score are listed below:
        \n\n        1. Clinical signs and symptoms of DVT:
        No = 0 points, Yes = +3 points\n
        2. PE is #1 diagnosis OR equally likely: No = 0 points, Yes = +3
        points\n
        3. Heart rate > 100: No = 0 points, Yes = +1.5 points\n
        4. Immobilization at least 3 days OR surgery in the previous 4
        weeks: No = 0 points, Yes = +1.5 points\n
        5. Previous, objectively diagnosed PE or DVT: No = 0 points,
        Yes = +1.5 points\n
        6. Hemoptysis: No = 0 points, Yes = +1 point\n
        7. Malignancy with treatment within 6 months or palliative: No = 0
        points, Yes = +1 point\n\n
        The total score is calculated by summing the points for each
        criterion.\\n\\n\n
        The Well's score for pulmonary embolism is currently 0.\nClinical
        signs and symptoms of DVT are not reported
        and so we assume that this is missing from the patient, keeping the
        current total at 0.
        Pulmonary Embolism is not reported to be the #1 diagnosis
        and so the total score remains unchanged,
        keeping the total score at 0.\nThe patient's heart rate is 78.0
        beats per minute.
        The heart rate is less than 100 bpm, and so the score
        remains unchanged,
        keeping the total score at 0.\nBecause the patient has not had an
        immobilization for at least 3 days,
        and the patient did not have a surgery in the past 4 weeks,
        the score remains at 0.
        \nBecause the patient has no previous diagnosis of pulmonary
        embolism (PE) or deep vein thrombosis (DVT),
        the score remains at 0.\nHemoptysis is reported to be absent
        and so the total score remains unchanged, keeping the total score at 0.
        \nMalignany with treatment within 6 months or
        palliative is reported to be absent
        and so the total score remains unchanged, keeping the total score at 0.
        \nThe patient's Well's score for pulmonary embolism is 0.\n",
        'Answer': 0}"
    """

    explanation = r"""
    The criteria for the Wells' Criteria for Pulmonary Embolism score
        are listed below:

        1. Clinical signs and symptoms of DVT: No = 0 points, Yes = +3 points
        2. PE is #1 diagnosis OR equally likely: No = 0 points, Yes = +3 points
        3. Heart rate > 100: No = 0 points, Yes = +1.5 points
        4. Immobilization at least 3 days OR surgery in the previous 4 weeks:
            No = 0 points, Yes = +1.5 points
        5. Previous, objectively diagnosed PE or DVT: No = 0 points,
            Yes = +1.5 points
        6. Hemoptysis: No = 0 points, Yes = +1 point
        7. Malignancy with treatment within 6 months or palliative:
            No = 0 points, Yes = +1 point

    The total score is calculated by summing the points for each criterion.\n\n
    """

    explanation += "The Well's score for pulmonary embolism is currently 0.\n"

    score = 0

    if 'clinical_dvt' in variables:
        if variables['clinical_dvt']:
            explanation += (
                f'Clinical signs and symptoms of DVT are reported to be '
                f'present and so three points are added to the score, '
                f'making the current total {score} + 3 = {score + 3}. '
            )
            score += 3
        else:
            explanation += (
                f'Clinical signs and symptoms of DVT are reported to be '
                f'absent and so the total score remains unchanged, keeping '
                f'the total score at {score}. '
            )
    else:
        explanation += (
            f'Clinical signs and symptoms of DVT are not reported and so we '
            f'assume that this is missing from the patient, keeping the '
            f'current total at {score}. '
        )

    if 'pe_number_one' in variables:
        if variables['pe_number_one']:
            explanation += (
                f'Pulmonary Embolism is reported to be the #1 diagnosis or '
                f'equally likely to be the #1 diagonsis and so we add 3 '
                f'points to the score making the current '
                f'total = {score} + 3 = {score + 3}.\n'
            )
            score += 3
        else:
            explanation += (
                f'Pulmonary Embolism is not reported to be the #1 diagnosis '
                f'and so the total score remains unchanged, keeping the '
                f'total score at {score}.\n'
            )
    else:
        explanation += (
            f'Whether Pulmonary Embolism is the #1 diagnosis or is equally '
            f'likely to being the #1 diagnosis is not reported and so we '
            f'assume this statement is false, '
            f'keeping the total unchanged at {score}.\n'
        )

    explanation += (
        f"The patient's heart rate is "
        f"{variables['heart_rate'][0]} beats per minute. "
    )
    if variables['heart_rate'][0] > 100:
        explanation += (
            f'The heart rate is more than 100 bpm, and so the score is '
            f'increased by 1.5, making the total score, {score} + 1.5 = '
            f'{score + 1.5}.\n'
        )
        score += 1.5
    else:
        explanation += (
            f'The heart rate is less than 100 bpm, and so the score remains '
            f'unchanged, keeping the total score at {score}.\n'
        )

    if 'immobilization_for_3days' not in variables:
        explanation += (
            "The report does not give an indication on whether the patient "
            "has had an immobilization for at least 3 days and so we assume "
            "this to be false."
        )
        variables['immobilization_for_3days'] = False

    if 'surgery_in_past4weeks' not in variables:
        explanation += (
            "The report does not give an indication on whether the patient "
            "has had a surgery for the past 4 weeks and "
            "so we assume this to be false."
        )
        variables['surgery_in_past4weeks'] = False

    if (
        not variables['immobilization_for_3days']
        and not variables['surgery_in_past4weeks']
    ):
        explanation += (
            f"Because the patient has not had an immobilization "
            f"for at least 3 days, and the patient did not have a surgery "
            f"in the past 4 weeks, the score remains at {score}.\n"
        )
    elif (
        not variables['immobilization_for_3days']
        and variables['surgery_in_past4weeks']
    ):
        explanation += (
            f'Because the patient did not have an immobilization for at '
            f'least 3 days but the patient had a surgery in the past 4 weeks, '
            f'the score increases to {score} + 1.5 = {score + 1.5}.\n'
        )
        score += 1.5
    elif (
        variables['immobilization_for_3days']
        and not variables['surgery_in_past4weeks']
    ):
        explanation += (
            f'Because the patient has had an immobilization for at least 3 '
            f'days but the patient did not have a surgery in the past 4 '
            f'weeks, the score increases to {score} + 1.5 = {score + 1.5}.\n'
        )
        score += 1.5
    elif (
        variables['immobilization_for_3days']
        and variables['surgery_in_past4weeks']
    ):
        explanation += (
            f'Because the patient has had an immobilization for at least 3 '
            f'days and the patient had a surgery in the past 4 weeks, '
            f'the score increases to {score} + 1.5 =  {score + 1.5}.\n'
        )
        score += 1.5

    if 'previous_pe' not in variables:
        explanation += (
            "The report does not give an indication on "
            "if the patient has previously had pulmonary embolism diagnosed "
            "and so we assume this to be false."
        )
        variables['previous_pe'] = False

    if 'previous_dvt' not in variables:
        explanation += (
            "The report does not give an indication on "
            "if the patient has previously been diagnosed with deep vein "
            "thrombosis and so we assume this to be false."
        )
        variables['previous_dvt'] = False

    if not variables['previous_pe'] and not variables['previous_dvt']:
        explanation += (
            f'Because the patient has no previous diagnosis of pulmonary '
            f'embolism (PE) or deep vein thrombosis (DVT), '
            f'the score remains at {score}.\n'
        )
    elif not variables['previous_pe'] and variables['previous_dvt']:
        explanation += (
            f'The patient not been diagnosed with pulmonary embolis (PE), '
            f'but the patient has previously been diagnosed with deep vein '
            f'thrombosis (DVT), we increase the current total by '
            f'1.5 so that {score} + 1.5 = {score + 1.5}.\n'
        )
        score += 1.5
    elif variables['previous_pe'] and not variables['previous_dvt']:
        explanation += (
            f'Because the patient has been previously diagnosed for '
            f'pulmonary embolism (PE), but the patient has never been '
            f'diagnosed for deep vein thrombosis (DVT), we increase the '
            f'current total by 1.5 so that {score} + 1.5 = {score + 1.5}.\n'
        )
        score += 1.5
    elif variables['previous_pe'] and variables['previous_dvt']:
        explanation += (
            f'Because the patient has previously been diagnosed for '
            f'pulmonary embolism (PE) and deep vein thrombosis (DVT), '
            f'we increase the current total by 1.5 '
            f'so that {score} + 1.5 = {score + 1.5}.\n'
        )
        score += 1.5

    if 'hemoptysis' in variables:
        if variables['hemoptysis']:
            explanation += (
                f'Hemoptysis is reported to be present and so one point is '
                f'incremented to the score, '
                f'making the current total {score} + 1 = {score + 1}.\n'
            )
            score += 1
        else:
            explanation += (
                f'Hemoptysis is reported to be absent '
                f'and so the total score remains unchanged, '
                f'keeping the total score at {score}.\n'
            )
    else:
        explanation += (
            f'Hemoptysis is not reported in the patient note '
            f'and so we assume that it is missing from the patient, '
            f'keeping the total score at {score}.\n'
        )

    if 'malignancy_with_treatment' in variables:
        if variables['malignancy_with_treatment']:
            explanation += (
                f'Malignany with treatment within 6 months or '
                f'palliative is reported to be present '
                f'and so one point is added to the score, '
                f'making the total score {score} + 1 =  {score + 1}.\n'
            )
            score += 1
        else:
            explanation += (
                f'Malignany with treatment within 6 months or '
                f'palliative is reported to be absent '
                f'and so the total score remains unchanged, '
                f'keeping the total score at {score}.\n'
            )
    else:
        explanation += (
            f'Malignany with treatment within 6 months or '
            f'palliative is not reported in the patient note '
            f'and so we assume that this is absent for the patient, '
            f'keeping the score at {score}.\n'
        )

    explanation += (
        f"The patient's Well's score for pulmonary embolism is {score}.\n"
    )

    return {"Explanation": explanation, "Answer": score}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            "previous_pe": False,
            "heart_rate": (78.0, 'beats per minute'),
            "immobilization_for_3days": False,
            "hemoptysis": False,
            "surgery_in_past4weeks": False,
            "malignancy_with_treatment": False,
            "pe_number_one": False,
            "previous_dvt": False,
        },
        {
            "previous_pe": False,
            "heart_rate": (106.0, 'beats per minute'),
            "immobilization_for_3days": False,
            "hemoptysis": False,
            "surgery_in_past4weeks": True,
            "malignancy_with_treatment": False,
            "pe_number_one": False,
            "previous_dvt": False,
        },
        {
            "previous_pe": False,
            "heart_rate": (129.0, 'beats per minute'),
            "immobilization_for_3days": False,
            "surgery_in_past4weeks": False,
            "clinical_dvt": True,
            "malignancy_with_treatment": False,
            "pe_number_one": True,
            "previous_dvt": False,
        },
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = calculate_pe_wells_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:__init__.py
"""
 below is the content of __init__.py

"""

!!!!!!!!python file name:apache_ii.py
"""
 below is the content of apache_ii.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function apache_ii_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench.mean_arterial_pressure import (
    mean_arterial_pressure_explanation,
)
from camel.toolkits.medcalc_bench.utils.age_conversion import (
    age_conversion_explanation,
)
from camel.toolkits.medcalc_bench.utils.convert_temperature import (
    fahrenheit_to_celsius_explanation,
)
from camel.toolkits.medcalc_bench.utils.unit_converter_new import (
    conversion_explanation,
    convert_to_units_per_liter_explanation,
)


def apache_ii_explanation(input_parameters):
    explanation = """
    The criteria for the APACHE II Score are listed below:

       1. Age, years: ≤44 = 0 points, 45-54 = +2 points, 55-64 = +3 points, 
       65-74 = +5 points, ≥75 = +6 points
       2. History of severe organ insufficiency or immunocompromised: Yes, 
       nonoperative or emergency postoperative patient = +5 points, Yes, 
       elective postoperative patient = +2 points, No = 0 points
       3. Rectal temperature, °C: ≥41 = +4 points, 39 to <41 = +3 points, 
       38.5 to <39 = +1 point, 36 to <38.5 = 0 points, 34 to <36 = +1 point, 
       32 to <34 = +2 points, 30 to <32 = +3 points, <30 = +4 points
       4. Mean arterial pressure, mmHg: ≥160 = +4 points, 130-159 = +3 
       points, 110-129 = +2 points, 70-109 = 0 points, 50-69 = +2 points, 
       40-49 = +3 points, <40 = +4 points
       5. Heart rate, beats per minute: ≥180 = +4 points, 140 to <180 = +3 
       points, 110 to <140 = +2 points, 70 to <110 = 0 points, 55 to <70 = 
       +2 points, 40 to <55 = +3 points, <40 = +4 points
       6. Respiratory rate, breaths per minute: ≥50 = +4 points, 35 to <50 = 
       +3 points, 25 to <35 = +1 point, 12 to <25 = 0 points, 10 to <12 = +1 
       point, 6 to <10 = +2 points, <6 = +4 points
       7. Oxygenation (use PaO2 if FiO2 <50%, otherwise use Aa gradient): 
       Aa gradient >349 = +4 points, Aa gradient 350-349 = +3 points, 
       Aa gradient 200-349 = +2 points, Aa gradient <200 (if FiO2 over 45%) 
       or PaO2 <70 (if FiO2 less than 50%) = +1 point, PaO2 61-70 = +1 point, 
       PaO2 55-60 = +3 points, PaO2 <55 = +4 points
       8. Arterial pH: ≥7.7 = +4 points, 7.60 to <7.70 = +3 points, 7.50 to 
       <7.60 = +1 point, 7.33 to <7.50 = 0 points, 7.25 to <7.33 = +2 points, 
       7.15 to <7.25 = +3 points, <7.15 = +4 points
       9. Serum sodium, mmol/L: ≥180 = +4 points, 160 to <180 = +3 points, 
       155 to <160 = +2 points, 150 to <155 = +1 point, 130 to <150 = 0 
       points, 120 to <130 = +2 points, 111 to <120 = +3 points, 
       <111 = +4 points
       10. Serum potassium, mmol/L: ≥7.0 = +4 points, 6.0 to <7.0 = +3 points, 
       5.5 to <6.0 = +1 point, 3.5 to <5.5 = 0 points, 3.0 to <3.5 = +1 point, 
       2.5 to <3.0 = +2 points, <2.5 = +4 points
       11. Serum creatinine, mg/100 mL: ≥3.5 and ACUTE renal failure = +8 
       points, 2.0 to <3.5 and ACUTE renal failure = +6 points, ≥3.5 and 
       CHRONIC renal failure = +4 points, 1.5 to <2.0 and ACUTE renal 
       failure = +4 points, 2.0 to <3.5 and CHRONIC renal failure = +3 
       points, 1.5 to <2.0 and CHRONIC renal failure = +2 points, 0.6 to 
       <1.5 = 0 points, <0.6 = +2 points
       12. Hematocrit, %: ≥60 = +4 points, 50 to <60 = +2 points, 46 to 
       <50 = +1 point, 30 to <46 = 0 points, 20 to <30 = +2 points, 
       <20 = +4 points
       13. White blood count, total/cubic mm in 10^3: ≥40 = +4 points, 
       20 to <40 = +2 points, 15 to <20 = +1 point, 3 to <15 = 0 points, 
       1 to <3 = +2 points, <1 = +4 points
       14. Glasgow Coma Scale (GCS): 1-15 points (use 15 - [GCS Score])
    
    The total APACHE II score is calculated by summing the points 
    for each criterion.\n\n
    """

    explanation += "The patient's current APACHE II score is 0 points.\n"
    score = 0

    sodium_exp, sodium = conversion_explanation(
        input_parameters['sodium'][0],
        "sodium",
        22.99,
        1,
        input_parameters['sodium'][1],
        "mmol/L",
    )
    pH = input_parameters['pH']
    heart_rate = input_parameters['heart_rate'][0]
    respiratory_rate = input_parameters['respiratory_rate'][0]
    potassium_exp, potassium = conversion_explanation(
        input_parameters['potassium'][0],
        "potassium",
        22.99,
        1,
        input_parameters['potassium'][1],
        "mmol/L",
    )
    creatinine_exp, creatinine = conversion_explanation(
        input_parameters['creatinine'][0],
        "creatinine",
        113.12,
        None,
        input_parameters['creatinine'][1],
        "mg/dL",
    )

    acute_renal_failure = input_parameters.get('acute_renal_failure', False)
    chronic_renal_failure = input_parameters.get(
        'chronic_renal_failure', False
    )
    hemocratit = input_parameters['hemocratit'][0]
    wbc_exp, wbc = convert_to_units_per_liter_explanation(
        input_parameters['wbc'][0], input_parameters['wbc'][1], "wbc", "mm^3"
    )
    fio2 = input_parameters['fio2'][0]
    gcs = input_parameters['gcs']
    a_a_gradient = input_parameters.get('a_a_gradient', False)
    partial_pressure_oxygen = input_parameters.get(
        'partial_pressure_oxygen', False
    )

    age_explanation, age = age_conversion_explanation(input_parameters['age'])

    explanation += f"{age_explanation}"

    if 'organ_failure_immunocompromise' in input_parameters:
        if input_parameters['organ_failure_immunocompromise']:
            surgery_type = input_parameters.get('surgery_type', None)

            explanation += (
                f"The patient is reported to have an organ "
                f"failure of immunocompromise with a "
                f"surgery type being classified as {surgery_type}. "
            )

            if surgery_type == "Nonelective":
                explanation += (
                    "The patient's surgery type "
                    "is classified as 'Nonelective' "
                    "and so 0 points are added to the total, "
                    "keeping the total at 0 points.\n"
                )
            elif surgery_type == "Elective":
                explanation += (
                    "The patient's surgery type is classified as "
                    "'Elective' and so 2 points are added to "
                    "the total, making the current "
                    "total 0 + 2 = 2.\n"
                )
                score += 2
            elif surgery_type == "Emergency":
                explanation += (
                    "The patient's surgery type is classified "
                    "as 'Emergency' and so 5 points are added "
                    "to the total, making the current "
                    "total 0 + 2 = 5.\n"
                )
                score += 5
        elif not input_parameters['organ_failure_immunocompromise']:
            explanation += (
                "The patient is reported to not have "
                "any organ failure immunocompromise and so "
                "0 points are added to the total, "
                "keeping the total at 0 points.\n"
            )
    else:
        explanation += (
            "The patient note does not report any "
            "history on immunocompromise and so we "
            "assume this to be false. Hence, 0 points "
            "are added to the total, keeping the "
            "total at 0 points.\n"
        )

    if age < 45:
        explanation += (
            "Because the patient's age is less than 45, "
            "no points are added to the score, keeping it at 0."
        )
    elif 45 < age <= 54:
        explanation += (
            f"Because the patient's age is between 45 "
            f"and 54, 2 points are added to the total, "
            f"making the current total, "
            f"{score} + 2 = {score + 2}.\n"
        )
        score += 2
    elif 55 <= age <= 64:
        explanation += (
            f"Because the patient's age is between 55 and 64, "
            f"3 points are added to the total, "
            f"making the current total, "
            f"{score} + 3 = {score + 3}.\n"
        )
        score += 3
    elif 65 <= age <= 74:
        explanation += (
            f"Because the patient's age is between "
            f"65 and 74, 5 points are added to the total, "
            f"making the current total, "
            f"{score} + 5 = {score + 5}.\n"
        )
        score += 5
    elif age > 75:
        explanation += (
            f"Because the patient's age is greater than "
            f"75 years, 6 points are added to the total, "
            f"making the current total, "
            f"{score} + 6 = {score + 6}.\n"
        )
        score += 6

    explanation += f"The patient's FiO2 percentage is {fio2} %. "

    if fio2 >= 50:
        explanation += (
            "Because the patent's FiO2 percentrage is "
            "greater than 50%, we need to examine the "
            "A-a-gradient to compute the APACHE II score. "
        )
        a_a_gradient = input_parameters['a_a_gradient']
        explanation += f"The patient's A-a-gradient is {a_a_gradient}. "
        if a_a_gradient > 499:
            explanation += (
                f"Because the patient's A-a gradient "
                f"is greater than 499, we add 4 points "
                f"to the total, making the current "
                f"total {score + 4}.\n"
            )
            score += 4
        elif 350 <= a_a_gradient <= 499:
            explanation += (
                f"Because the patient's A-a "
                f"gradient is between 350 and 500, "
                f"we add 3 points to the total, "
                f"making the current total {score + 3}.\n"
            )
            score += 3
        elif 200 <= a_a_gradient <= 349:
            explanation += (
                f"Because the patient's A-a gradient "
                f"is between 200 and 349, "
                f"we add 2 points to the total, making the "
                f"current total {score + 2}.\n"
            )
            score += 2
        elif a_a_gradient < 200:
            explanation += (
                f"Because the patient's A-a gradient "
                f"is less than 200, we do not add any points to "
                f"the total, keeping the current total at"
                f" {score}.\n"
            )
    else:
        partial_pressure_oxygen = input_parameters['partial_pressure_oxygen'][
            0
        ]
        explanation += (
            "Because the patent's FiO2 percentrage is less than "
            "50%, we need to examine the patient's "
            "A-a-gradient to compute the APACHE II score. "
        )
        explanation += (
            f"The patient's partial pressure of oxygen is"
            f" {partial_pressure_oxygen} mm Hg. "
        )
        if partial_pressure_oxygen > 70:
            explanation += (
                f"Because the patient's partial pressure of "
                f"oxygen is more than 70 mm Hg, "
                f"we do not add any points to the total, "
                f"keeping the current total at {score}.\n"
            )
            score += 0
        elif 61 <= partial_pressure_oxygen <= 70:
            explanation += (
                f"Because the patient's partial pressure "
                f"of oxygen is between 61 and 70 mm Hg, "
                f"we do add one point to the total, "
                f"making the current total "
                f"{score} + 1 {score + 1}.\n"
            )
            score += 1
        elif 55 <= partial_pressure_oxygen <= 60:
            explanation += (
                f"Because the patient's partial "
                f"pressure of oxygen is between 61 and "
                f"70 mm Hg, we do add one point to the total, "
                f"making the current total "
                f"{score} + 1 {score + 1}.\n"
            )
            explanation += (
                f"Because the patient's partial pressure "
                f"of oxygen is between 55 and 60 mm Hg, "
                f"we add three points to the total, "
                f"making the current total "
                f"{score} + 3 = {score + 3}.\n"
            )
            score += 3
        elif partial_pressure_oxygen < 55:
            explanation += (
                f"Because the patient's partial pressure "
                f"of oxygen is less than 55 mm Hg, we do "
                f"add four points to the total, making "
                f"the current total {score} + 4 = {score + 4}.\n"
            )
            score += 4

    temperature_explanation, temperature = fahrenheit_to_celsius_explanation(
        input_parameters["temperature"][0],
        input_parameters["temperature"][1],
    )

    explanation += temperature_explanation + "\n"

    if temperature >= 41:
        explanation += (
            f"Because the patient's temperature is "
            f"{temperature} degrees Celsius or higher, "
            f"4 points are added to the score, "
            f"making the current total, "
            f"{score} + 4 = {score + 4}.\n"
        )
        score += 4
    elif 39 <= temperature < 41:
        explanation += (
            f"Because the patient's temperature is "
            f"between 39 and 41 degrees Celsius, "
            f"3 points are added to the score, "
            f"making the current total, "
            f"{score} + 3 = {score + 3}.\n"
        )
        score += 3
    elif 38.5 <= temperature < 39:
        explanation += (
            f"Because the patient's temperature is between 38.5 "
            f"and 39 degrees Celsius, 1 point is added to "
            f"the score, making the current total, "
            f"{score} + 1 = {score + 1}.\n"
        )
        score += 1
    elif 34 <= temperature < 36:
        explanation += (
            f"Because the patient's temperature is between 34 "
            f"and 36 degrees Celsius, 1 point is added to "
            f"the score, making the current total, "
            f"{score} + 1 = {score + 1}.\n"
        )
        score += 1
    elif 32 <= temperature < 34:
        explanation += (
            f"Because the patient's temperature is between 32 "
            f"and 34 degrees Celsius, 2 points are added to "
            f"the score, making the current total, "
            f"{score} + 2 = {score + 2}.\n"
        )
        score += 2
    elif 30 <= temperature < 32:
        explanation += (
            f"Because the patient's temperature is "
            f"between 30 and 32 degrees Celsius, 3 "
            f"points are added to the score, making "
            f"the current total, {score} + 3 = {score + 3}.\n"
        )
        score += 3
    elif temperature < 30:
        explanation += (
            f"Because the patient's temperature is "
            f"below 30 degrees Celsius, 4 points are "
            f"added to the score, making the current "
            f"total, {score} + 4 = {score + 4}.\n"
        )
        score += 4
    else:
        explanation += (
            f"The patient's temperature is within the "
            f"normal range, so no additional points are "
            f"added to the score, keeping the total at {score}.\n"
        )

    map_exp = mean_arterial_pressure_explanation(input_parameters)

    explanation += map_exp["Explanation"]

    map_value = map_exp["Answer"]

    # Mean Arterial Pressure (MAP)
    if map_value > 159:
        explanation += (
            f"Because the patient's Mean Arterial "
            f"Pressure is above 159 mmHg, 4 points are "
            f"added to the score, making the current total, "
            f"{score} + 4 = {score + 4}.\n"
        )
        score += 4
    elif 129 < map_value <= 159:
        explanation += (
            f"Because the patient's Mean Arterial Pressure "
            f"is between 130 and 159 mmHg, 3 points are "
            f"added to the score, making the current "
            f"total, {score} + 3 = {score + 3}.\n"
        )
        score += 3
    elif 109 < map_value <= 129:
        explanation += (
            f"Because the patient's Mean Arterial "
            f"Pressure is between 110 and 129 mmHg, "
            f"2 points are added to the score, making "
            f"the current total, {score} + 2 = {score + 2}.\n"
        )
        score += 2
    elif 70 <= map_value <= 109:
        explanation += (
            f"Because the patient's Mean Arterial "
            f"Pressure is between 70 and 109 mmHg, "
            f"0 points are added to the patient's score, "
            f"keeping the total at {score}.\n"
        )

    # Heart Rate
    if heart_rate >= 180:
        explanation += (
            f"Because the patient's heart rate is 180 beats "
            f"per minute or more, 4 points are added to the "
            f"score, making the current total, "
            f"{score} + 4 = {score + 4}.\n"
        )
        score += 4
    elif 140 <= heart_rate < 180:
        explanation += (
            f"Because the patient's heart rate is between "
            f"140 and 179 beats per minute, 3 points are "
            f"added to the score, making the current total, "
            f"{score} + 3 = {score + 3}.\n"
        )
        score += 3
    elif 110 <= heart_rate < 140:
        explanation += (
            f"Because the patient's heart rate is between "
            f"110 and 139 beats per minute, 2 points are "
            f"added to the score, making the current total, "
            f"{score} + 2 = {score + 2}.\n"
        )
        score += 2
    elif 70 <= heart_rate < 110:
        explanation += (
            f"Because the patient's heart rate is "
            f"between 70 and 109 beats per minute, "
            f"0 points are added to the patient's score, "
            f"keeping the total at {score}.\n"
        )

    # Respiratory Rate
    if respiratory_rate >= 50:
        explanation += (
            f"Because the patient's respiratory rate "
            f"is 50 breaths per minute or more, 4 points "
            f"are added to the score, making the current "
            f"total, {score} + 4 = {score + 4}.\n"
        )
        score += 4
    elif 35 <= respiratory_rate < 50:
        explanation += (
            f"Because the patient's respiratory rate is "
            f"between 35 and 49 breaths per minute, "
            f"3 points are added to the score, making "
            f"the current total, {score} + 3 = {score + 3}.\n"
        )
        score += 3
    elif 25 <= respiratory_rate < 35:
        explanation += (
            f"Because the patient's respiratory rate "
            f"is between 25 and 34 breaths per minute, "
            f"1 points is added to the score, making "
            f"the current total, {score} + 1 = {score + 1}.\n"
        )
        score += 1
    elif 12 <= respiratory_rate < 25:
        explanation += (
            f"Because the patient's respiratory rate "
            f"is between 12 and 24 breaths per minute, "
            f"0 points are added to the patient's score, "
            f"keeping the total at {score}.\n"
        )

    # pH Levels
    if pH >= 7.70:
        explanation += (
            f"Because the patient's pH is above 7.70, "
            f"4 points are added to the score, making "
            f"the current total {score} + 4 = {score + 4}.\n"
        )
        score += 4
    elif 7.60 <= pH < 7.70:
        explanation += (
            f"Because the patient's pH is between 7.60 "
            f"and 7.69, 3 points are added to the score, "
            f"making the current total {score} + 3 = {score + 4}.\n"
        )
        score += 3
    elif 7.50 <= pH < 7.60:
        explanation += (
            f"Because the patient's pH is between 7.50 "
            f"and 7.59, 1 point is added to the score, "
            f"making the current total {score} + 1 = {score + 1}.\n"
        )
        score += 1
    elif 7.33 <= pH < 7.50:
        explanation += (
            f"Because the patient's pH is between 7.33 "
            f"and 7.49, 0 points are added to the patient's "
            f"score, keeping the total at {score}. "
        )

    # Sodium Levels
    if sodium >= 180:
        explanation += (
            f"Because the patient's sodium level is "
            f"above 180 mmol/L, 4 points are added to the "
            f"score, making the current total "
            f"{score} + 4 = {score + 4}.\n"
        )
        score += 4
    elif 160 <= sodium < 180:
        explanation += (
            f"Because the patient's sodium level is "
            f"between 160 and 179 mmol/L, 3 points are "
            f"added to the score, making the current "
            f"total {score} + 3 = {score + 3}.\n"
        )
        score += 3
    elif 155 <= sodium < 160:
        explanation += (
            f"Because the patient's sodium level is "
            f"between 155 and 159 mmol/L, 2 points are "
            f"added to the score, making the current "
            f"total {score} + 2 = {score + 2}.\n"
        )
        score += 2
    elif 150 <= sodium < 155:
        explanation += (
            f"Because the patient's sodium level is "
            f"between 150 and 154 mmol/L, 1 point is "
            f"added to the total, making the current "
            f"total {score} + 1 = {score + 1}.\n"
        )
        score += 1
    elif 130 <= sodium < 150:
        explanation += (
            f"Because the patient's sodium level is "
            f"between 130 and 149 mmol/L, 0 points are "
            f"added to the patient's score, keeping "
            f"the total at {score}. "
        )

    # Potassium Levels
    if potassium >= 7.0:
        explanation += (
            f"Because the patient's potassium level "
            f"is above 7.0 mmol/L, 4 points are added "
            f"to the score, making the current total "
            f"{score} + 4 = {score + 4}.\n"
        )
        score += 4
    elif 6.0 <= potassium < 7.0:
        explanation += (
            f"Because the patient's potassium level is "
            f"between 6.0 and 6.9 mmol/L, 3 points are "
            f"added to the score, making the current "
            f"total {score} + 3 = {score + 3}.\n"
        )
        score += 3
    elif 5.5 <= potassium < 6.0:
        explanation += (
            f"Because the patient's potassium level "
            f"is between 5.5 and 5.9 mmol/L, 1 point "
            f"is added to the score, making the current "
            f"total {score} + 1 = {score + 1}.\n"
        )
        score += 1
    elif 3.5 <= potassium < 5.5:
        explanation += (
            f"Because the patient's potassium level is "
            f"between 3.5 and 5.4 mmol/L, 0 points are "
            f"added to the patient's score, keeping the "
            f"total at {score}. "
        )

    # Creatinine Levels
    if creatinine >= 3.5 and acute_renal_failure:
        additional_points = 8
        explanation += (
            f"Because the patient has acute renal "
            f"failure and a creatinine level above "
            f"3.5, {additional_points} points are added "
            f"to the score, making the current total "
            f"{score} + {additional_points} = "
            f"{score + additional_points}.\n"
        )
        score += additional_points
    elif 2.0 <= creatinine < 3.5 and acute_renal_failure:
        additional_points = 6
        explanation += (
            f"Because the patient has acute renal "
            f"failure and a creatinine level between "
            f"2.0 and 3.4, {additional_points} points "
            f"are added to the score, making the "
            f"current total {score} + "
            f"{additional_points} = {score + additional_points}.\n"
        )
        score += additional_points
    elif creatinine >= 3.5 and chronic_renal_failure:
        additional_points = 4
        explanation += (
            f"Because the patient has chronic renal failure and "
            f"a creatinine level above 3.5, {additional_points} "
            f"points are added to the score, "
            f"making the current total {score} + "
            f"{additional_points} = {score + additional_points}.\n"
        )
        score += additional_points
    elif 2.0 <= creatinine < 3.5 and chronic_renal_failure:
        additional_points = 3
        explanation += (
            f"Because the patient has chronic renal failure and "
            f"a creatinine level between 2.0 and 3.4, "
            f"{additional_points} points are added to "
            f"the score, making the current total "
            f"{score} + {additional_points} ="
            f" {score + additional_points}.\n"
        )
        score += additional_points
    elif 1.5 <= creatinine < 2.0 and acute_renal_failure:
        additional_points = 4
        explanation += (
            f"Because the patient has acute renal failure and a "
            f"creatinine level between 1.5 and 1.9, "
            f"{additional_points} points are added to the score, "
            f"making the current total {score} + "
            f"{additional_points} = {score + additional_points}.\n"
        )
        score += additional_points
    elif 1.5 <= creatinine < 2.0 and chronic_renal_failure:
        additional_points = 2
        explanation += (
            f"Because the patient has chronic "
            f"renal failure and a creatinine level "
            f"between 1.5 and 1.9, {additional_points} "
            f"points are added to the score, "
            f"making the current total {score} + "
            f"{additional_points} = "
            f"{score + additional_points}.\n"
        )
        score += additional_points
    elif 0.6 <= creatinine < 1.5:
        explanation += (
            f"Because the patient's creatinine "
            f"level is between 0.6 and 1.4, no points "
            f"are added to the score, keeping "
            f"the current total at "
            f"{score}.\n"
        )
    elif creatinine < 0.6:
        additional_points = 2
        explanation += (
            f"Because the patient's creatinine "
            f"level is below 0.6, {additional_points} points are "
            f"added to the score, making the current total"
            f" {score} + {additional_points} = "
            f"{score + additional_points}.\n"
        )
        score += additional_points

    # Hematocrit Levels
    if hemocratit >= 60:
        explanation += (
            f"Because the patient's hemocratit is 60% "
            f"or higher, 4 points are added to the score, making "
            f"the current total {score} + 4 = {score + 4}.\n"
        )
        score += 4
    elif 50 <= hemocratit < 60:
        explanation += (
            f"Because the patient's hemocratit is "
            f"between 50% and 59%, 2 points are added to the "
            f"score, making the current total "
            f"{score} + 2 = {score + 2}.\n"
        )
        score += 2
    elif 46 <= hemocratit < 50:
        explanation += (
            f"Because the patient's hemocratit is between "
            f"46% and 49%, 1 points is added to the score, "
            f"making the current total {score} + 1= {score + 1}.\n"
        )
        score += 1
    elif 30 <= hemocratit < 46:
        explanation += (
            f"Because the patient's hemocratit is between "
            f"30% and 45%, 0 points are added to the patient's "
            f"score, keeping the total at {score}. "
        )

    # WBC Count
    if wbc >= 40:
        explanation += (
            f"Because the patient's white blood cell "
            f"count is above 40 x10^9/L, 4 points are added to "
            f"the score, making the current total "
            f"{score} + 4 = {score + 4}.\n"
        )
        score += 4
    elif 20 <= wbc < 40:
        explanation += (
            f"Because the patient's white blood cell count "
            f"is between 20 and 39.9 x10^9/L, 2 points are "
            f"added to the score, making the current total "
            f"{score} + 2 = {score + 2}.\n"
        )
        score += 2
    elif 15 <= wbc < 20:
        explanation += (
            f"Because the patient's white blood cell count "
            f"is between 15 and 19.9 x10^9/L, 1 points is added "
            f"to the score, making the current total "
            f"{score} + 1 = {score + 1}.\n"
        )
        score += 1
    elif 3 <= wbc < 15:
        explanation += (
            f"Because the patient's white blood cell count is "
            f"between 3 and 14.9 x10^9/L, 0 points are added "
            f"to the patient's score, keeping the total at "
            f"{score}. "
        )

    explanation += (
        f"The patient's Glasgow Coma Score is {gcs}, and "
        f"so we add {gcs} points to the total making the "
        f"current total {gcs} + {score} = {gcs + score}. "
        f"Hence, the patient's APACHE II score is {gcs + score}.\n"
    )
    score += gcs

    return {"Explanation": explanation, "Answer": score}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            "sodium": (134.0, 'mmol/L'),
            "pH": 7.3,
            "heart_rate": (98.0, 'beats per minute'),
            "respiratory_rate": (17.0, "breaths per minute"),
            "potassium": (8.5, "mmol/L"),
            "creatinine": (1.0, "mg/dL"),
            "age": (17, "years"),
            "acute_renal_failure": False,
            "chronic_renal_failure": False,
            "hemocratit": (20, "%"),
            "wbc": (10500.0, "m^3"),
            "fio2": (0.2, "Hg"),
            "gcs": 15,
            "a_a_gradient": 160,
            "partial_pressure_oxygen": (80, "mm"),
            "temperature": (99.0, "degrees fahreinheit"),
            "sys_bp": (120.0, 'mm hg'),
            "dia_bp": (80.0, 'mm hg'),
            "organ_failure_immunocompromise": False,  # Optional
            "surgery_type": "Nonelective",  # Optional
        }
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = apache_ii_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:qt_calculator_framingham.py
"""
 below is the content of qt_calculator_framingham.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function framingham_calculator_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench.utils.rounding import round_number


def framingham_calculator_explanation(input_variables):
    r"""
    Calculates the patient's corrected QT interval using the Framingham
    Formula and generates a detailed explanatory text.

    Parameters:
        input_variables (dict): A dictionary containing the following
        key-value pairs:
            - "heart_rate" (tuple): The patient's heart rate in the format (
            value, unit).
                - Value (float): The value of the patient's heart rate.
                - Unit (str): The unit of heart rate should be "beats per
                minute".
            - "qt_interval" (tuple): The QT interval of 330 msec.
                - Value (float): The value of QT interval.
                - Unit (str): The unit of QT interval, "msec".

    Returns:
        dict: Contains two key-value pairs:
            - "Explanation" (str): A detailed description of
            the calculation process.
            - "Answer" (float): The patient's corrected QT interval using
            the Bazett Formula.

    Notes:
        - None

    Example:
        framingham_calculator_explanation({"heart_rate": (81, "beats per
        minute"),"qt_interval": (330, "msec"),})

        output: "{'Explanation': "The corrected QT interval using the
        Framingham formula is computed as QTc = QT Interval + (154 * (1 -
        rr_interval_sec)), where QT interval is in msec, and RR interval is
        given as 60/( heart rate).\nThe patient's heart rate is
        81 beats per minute.\nThe QT interval is 330 msec.
        \nThe RR interval is computed as 60/(heart rate), and so the RR
        interval is 60/81 = 0.741. \nHence, plugging in these values,
        we will get 330/(154 * ( 1- 0.741 )) = 369.886. \nThe patient's
        corrected QT interval (QTc) is 369.886 msec.\n", 'Answer': 369.886}"
    """

    heart_rate = input_variables["heart_rate"][0]
    qt_interval = input_variables["qt_interval"][0]

    explanation = (
        "The corrected QT interval using the Framingham formula is computed "
        "as QTc = QT Interval + (154 * (1 - rr_interval_sec)), where QT "
        "interval is in msec, and RR interval is given as 60/(heart rate).\n"
    )

    explanation += (
        f"The patient's heart rate is {heart_rate} beats per minute.\n"
    )
    explanation += f"The QT interval is {qt_interval} msec.\n"

    rr_interval_sec = round_number(60 / heart_rate)
    explanation += (
        f"The RR interval is computed as 60/(heart rate), "
        f"and so the RR interval is 60/{heart_rate} = {rr_interval_sec}.\n"
    )

    qt_c = round_number(qt_interval + (154 * (1 - rr_interval_sec)))
    explanation += (
        f"Hence, plugging in these values, "
        f"we will get {qt_interval}/(154 * ( 1- {rr_interval_sec} )) = "
        f"{qt_c}.\n"
    )

    explanation += (
        f"The patient's corrected QT interval (QTc) is {qt_c} msec.\n"
    )

    return {"Explanation": explanation, "Answer": qt_c}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            "heart_rate": (81, "beats per minute"),
            "qt_interval": (330, "msec"),
        },
        {
            "heart_rate": (96, "beats per minute"),
            "qt_interval": (330, "msec"),
        },
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = framingham_calculator_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:mdrd_gfr.py
"""
 below is the content of mdrd_gfr.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function targetweight_explanation
- translation

Date: March 2025
"""

import math

from camel.toolkits.medcalc_bench.utils.age_conversion import (
    age_conversion_explanation,
)
from camel.toolkits.medcalc_bench.utils.rounding import round_number
from camel.toolkits.medcalc_bench.utils.unit_converter_new import (
    conversion_explanation,
)


def mrdr_gfr_explanation(input_variables):
    r"""
    Calculates the patient's Glomerular Filtration Rate (GFR) and generates
    a detailed explanatory text.

    Parameters:
        input_variables (dict): A dictionary containing the following
        key-value pairs:
            - "age" (tuple): The patient's blood creatinine level in the
            format (value, unit).
                - Value (float): blood creatinine level.
                - Unit (str): The unit can be "mg/dL", "µmol/L", and so on.
            - "creatinine" (tuple): The patient's height information in the
            format (value, unit).
                - Value (float): The numerical height measurement.
                - Unit (str): The unit of height, which can be "cm" (
                centimeters) or "in" (inches).
            - "sex" (str): The patient's gender, which can be either "Male"
            or "Female".

    Returns:
        dict: Contains two key-value pairs:
            - "Explanation" (str): A detailed description of
            the calculation process.
            - "Answer" (float): The patient's Glomerular Filtration Rate (GFR).

    Notes:
        - Uses the `conversion_explanation` function to convert source unit
        to target unit.

    Example:
        mrdr_gfr_explanation({"age": (49, 'years'),
        "creatinine": (10.6, 'mg/dL'),"sex": "Male"})

        output: "{'Explanation': "The patient is 49 years old. The
        concentration of Creatinine is 10.6 mg/dL. \nThe race of
        the patient is not provided, so the default value of the race
        coefficient is 1.0. \nThe patient is male, so the
        gender coefficient is 1.\nThe patient's estimated GFR is calculated
        using the MDRD equation as: \nGFR = 175 * creatinine^(-1.154) *
        age^(-0.203) * race_coefficient * gender_coefficient.
        The creatinine concentration is mg/dL.\nPlugging in these values
        will give us: 175 * 10.6^(-1.154) * 49^(-0.203) * 1 * 1=5.209.
        \nHence, the patient's GFR is 5.209 mL/min/1.73m².\n", 'Answer':
        5.209}"
    """

    gender = input_variables["sex"]

    age_explanation, age = age_conversion_explanation(input_variables["age"])
    creatinine_exp, creatinine_conc = conversion_explanation(
        input_variables["creatinine"][0],
        "Creatinine",
        113.12,
        None,
        input_variables["creatinine"][1],
        "mg/dL",
    )

    explanation = ""
    explanation += f"{age_explanation}"
    explanation += f"{creatinine_exp}\n"

    race_coefficient = 1

    if "race" in input_variables:
        race = input_variables["race"]
        if race == "Black":
            race_coefficient = 1.212
            explanation += (
                "The patient is Black, so the race coefficient is 1.212.\n"
            )
        else:
            explanation += (
                "The patient is not Black, so the race "
                "coefficient is defaulted to 1.0.\n"
            )
    else:
        explanation += (
            "The race of the patient is not provided, so the "
            "default value of the race coefficient is 1.0.\n"
        )

    gender_coefficient = 1
    if gender == "Female":
        gender_coefficient = 0.742
        explanation += (
            "The patient is female, so the gender coefficient is 0.742.\n"
        )
    else:
        explanation += "The patient is male, so the gender coefficient is 1.\n"

    gfr = round_number(
        175
        * math.exp(math.log(creatinine_conc) * -1.154)
        * math.exp(math.log(age) * -0.203)
        * race_coefficient
        * gender_coefficient
    )

    explanation += (
        f"The patient's estimated GFR is calculated using the MDRD equation "
        f"as:\nGFR = 175 * creatinine^(-1.154) * age^(-0.203) * "
        f"race_coefficient * gender_coefficient. "
        f"The creatinine concentration is mg/dL.\n"
        f"Plugging in these values will give us: "
        f"175 * {creatinine_conc}^(-1.154) * {age}^(-0.203) * "
        f"{race_coefficient} * {gender_coefficient}={gfr}.\n"
        f"Hence, the patient's GFR is {gfr} mL/min/1.73m².\n"
    )

    return {"Explanation": explanation, "Answer": gfr}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {"age": (49, 'years'), "creatinine": (10.6, 'mg/dL'), "sex": "Male"},
        {"age": (71, 'years'), "creatinine": (1.0, 'mg/dL'), "sex": "Female"},
    ]
    # {'age': [49, 'years'], 'creatinine': [10.6, 'mg/dL'], 'sex': 'Male'}
    # {'age': [71, 'years'], 'creatinine': [1.0, 'mg/dL'], 'sex': 'Female'}

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = mrdr_gfr_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:sOsm.py
"""
 below is the content of sOsm.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function compute_serum_osmolality_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench.utils.rounding import round_number
from camel.toolkits.medcalc_bench.utils.unit_converter_new import (
    conversion_explanation,
)


def compute_serum_osmolality_explanation(input_parameters):
    r"""
    Calculates the patient's Serum Osmolality and generates a detailed
    explanatory text.

    Parameters:
        input_parameters (dict): A dictionary containing the following
        key-value pairs:
            - "bun" (array): The patient's blood urea nitrogen level in the
            format (value, unit).
                - Value (float): The value of blood urea nitrogen level.
                - Unit (str): The unit of blood urea nitrogen level,
                eg. "mg/dL", "mEq/L", and so on.
            - "glucose" (array): The patient's blood glucose level in the
            format (value, unit).
                - Value (float): The value of blood glucose level.
                - Unit (str): The unit of blood glucose level,
                eg. "mmol/L", "mEq/L", and so on.
            - "sodium" (array): The patient's bicarbonate level in the
            format (value, unit).
                - Value (float): The value of bicarbonate level.
                - Unit (str): The unit of bicarbonate level, eg. "mmol/L",
                "mEq/L", and so on.

    Returns:
        dict: Contains two key-value pairs:
            - "Explanation" (str): A detailed description of
            the calculation process.
            - "Answer" (float): The patient's Serum Osmolality.

    Notes:
        - None

    Example:
        compute_serum_osmolality_explanation({'bun': [20.0, 'mg/dL'],
        'glucose': [599.0, 'mg/dL'],'sodium': [139.0, 'mEq/L']})

        output: "{'Explanation': "The formula for computing serum osmolality
        is 2 * Na + (BUN / 2.8) + (glucose / 18), where Na is the
        concentration of sodium in mmol/L, the concentration of BUN is in
        mg/dL, and the concentration of glucose is in mg/dL.\nThe
        concentration of sodium is 139.0 mEq/L. We need to convert the
        concentration to mmol/L. Let's first convert the mass of sodium
        from mEq to mmol. The mass of sodium is 139.0 mEq. To convert from
        139.0 mEq to mmol, convert from mEq to mmol. The compound 139.0 has
        a valence of 1, and so divide the valence by the value of mEq to
        get, 139.0 mEq/(1 mEq/mmol) = 139.0 mmol sodium. The volume units
        is L so no volume conversion is needed. Hence, the concentration
        value of 139.0 mEq sodium/L converts to 139.0 mmol sodium/L. \nThe
        concentration of bun is 20.0 mg/dL. \nThe concentration of glucose
        is 599.0 mg/dL. \nPlugging these values into the equation, we get 2
        * 139.0 + (20.0 / 2.8) + (20.0 / 18) = 318.421 mmol/L.
        The patient's calculated serum osmolality concentration is 318.421
        mmol/L. This is equalivalent to 318.421 mOsm/kg.\n", 'Answer':
        318.421}"
    """

    explanation = (
        "The formula for computing serum osmolality is 2 * Na + (BUN / 2.8) "
        "+ (glucose / 18), where Na is the concentration of sodium in "
        "mmol/L, the concentration of BUN is in mg/dL, "
        "and the concentration of glucose is in mg/dL.\n"
    )

    sodium_exp, sodium = conversion_explanation(
        input_parameters["sodium"][0],
        "sodium",
        22.99,
        1,
        input_parameters["sodium"][1],
        "mmol/L",
    )
    bun_exp, bun = conversion_explanation(
        input_parameters["bun"][0],
        "bun",
        28.02,
        None,
        input_parameters["bun"][1],
        "mg/dL",
    )
    glucose_exp, glucose = conversion_explanation(
        input_parameters["glucose"][0],
        "glucose",
        180.16,
        None,
        input_parameters["glucose"][1],
        "mg/dL",
    )

    explanation += sodium_exp + "\n"
    explanation += bun_exp + "\n"
    explanation += glucose_exp + "\n"

    serum_os = round_number(2 * sodium + (bun / 2.8) + (glucose / 18))

    explanation += (
        f"Plugging these values into the equation, "
        f"we get 2 * {sodium} + ({bun} / 2.8) + ({bun} / 18) = {serum_os} "
        f"mmol/L."
    )
    explanation += (
        f"The patient's calculated serum osmolality concentration is "
        f"{serum_os} mmol/L. This is equalivalent to {serum_os} mOsm/kg.\n"
    )

    return {"Explanation": explanation, "Answer": serum_os}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            'bun': [20.0, 'mg/dL'],
            'glucose': [599.0, 'mg/dL'],
            'sodium': [139.0, 'mEq/L'],
        }
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = compute_serum_osmolality_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:cci.py
"""
 below is the content of cci.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function compute_cci_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench.utils.age_conversion import (
    age_conversion_explanation,
)


def compute_cci_explanation(input_parameters):
    r"""
        Calculates the patient's Charlson Comorbidity Index (CCI) and generates
        a detailed explanatory text.

        Parameters:
            input_parameters (dict): A dictionary containing the following
            key-value pairs:
                - "age" (tuple): The patient's albumin concentration in the
                format (value, unit).
                    - Value (float): Age.
                    - Unit (str): The unit can be "months", "years".
                - "mi" (boolean): Myocardial infarction (history of definite or
                probable MI with EKG changes and/or enzyme changes)
                - "chf" (boolean): Congestive heart failure (CHF) (exertional
                or paroxysmal nocturnal dyspnea, responsive to digitalis,
                diuretics, or afterload reducing agents)
                - "peripheral_vascular_disease" (boolean): Peripheral vascular
                disease
                - "cva" (boolean): Cerebrovascular accident (CVA)
                - "tia" (boolean): transient ischemic attack (TIA)
                - "connective_tissue_disease" (boolean): Connective tissue
                    disease
                - "dementia" (boolean): Dementia
                - "copd" (boolean): Chronic obstructive pulmonary disease
                - "connective_tissue_disease" (boolean): Connective tissue
                    disease
                - "peptic_ucler_disease" (boolean): Peptic ulcer disease (any
                history of treatment for ulcer disease or ulcer bleeding)
                - "liver_disease" (str): Liver disease: None, Mild,
                Moderate to severe
                - "moderate_to_severe_ckd" (boolean): Moderate to severe
                chronic kidney disease
                - "diabetes_mellitus" (str): None, diet-controlled,
                    Uncomplicated,
                End-organ damage
                - "hemiplegia" (boolean): Hemiplegia
                - "solid_tumor" (str): None, Localized, Metastatic
                - "leukemia" (boolean): Leukemia
                - "lymphoma" (boolean): Lymphoma
                - "aids" (boolean): AIDS


        Returns:
            dict: Contains two key-value pairs:
                - "Explanation" (str): A detailed description of the
                calculation process.
                - "Answer" (float): The patient's Glomerular
                    Filtration Rate (GFR).

        Notes:
            - Uses the `conversion_explanation` function to convert source unit
            to target unit.

        Example:
            compute_cci_explanation({
                "age": (45, 'years'),
                "mi": False,
                "chf": False,
                "peripheral_vascular_disease": False,
                "cva": False,
                "tia": False,
                "connective_tissue_disease": False,
                "dementia": True,
                "copd": True,
                "hemiplegia": False,
                "peptic_ucler_disease": False,
                "diabetes_mellitus": "Uncomplicated",
                "moderate_to_severe_ckd": False,
                "solid_tumor": "Localized",
                "leukemia": False,
                "lymphoma": False,
                "aids": False,
                "liver_disease": "Mild",
            })

            output: "{'Explanation': "\n    The Charlson Comorbidity Index
            (CCI)
            are listed below:\n    \n       1. Age: <50 years = 0 points,
            50-59 years = +1 point, 60-69 years = +2 points, 70-79 years = +3
            points, ≥80 years = +4 points\n       2. Myocardial infarction (
            history of definite or probable MI with EKG changes and/or enzyme
            changes): No = 0 points, Yes = +1 point\n       3. Congestive heart
            failure (CHF) (exertional or paroxysmal nocturnal dyspnea,
            responsive to digitalis, diuretics, or afterload reducing agents):
            No = 0 points, Yes = +1 point\n       4. Peripheral vascular
            disease (intermittent claudication, past bypass for chronic
            arterial insufficiency, history of gangrene or acute arterial
            insufficiency, untreated thoracic or abdominal aneurysm ≥6 cm):
            No = 0 points, Yes = +1 point\n       5. Cerebrovascular accident
            (CVA) or transient ischemic attack (TIA) (history with minor or
            no residuals): No = 0 points, Yes = +1 point\n       6. Dementia
            (chronic cognitive deficit): No = 0 points, Yes = +1 point\n
            7. Chronic obstructive pulmonary disease (COPD): No = 0 points,
            Yes = +1 point\n       8. Connective tissue disease: No = 0 points,
            Yes = +1 point\n       9. Peptic ulcer disease (any history of
            treatment for ulcer disease or ulcer bleeding): No = 0 points,
            Yes = +1 point\n       10. Liver disease: None = 0 points, Mild =
            +1 point, Moderate to severe = +3 points\n       11. Diabetes
            mellitus: None or diet-controlled = 0 points, Uncomplicated = +1
            point, End-organ damage = +2 points\n       12. Hemiplegia: No =
            0 points, Yes = +2 points\n       13. Moderate to severe chronic
            kidney disease (CKD): No = 0 points, Yes = +2 points\n       14.
            Solid tumor: None = 0 points, Localized = +2 points, Metastatic =
            +6 points\n       15. Leukemia: No = 0 points, Yes = +2 points\n
            16. Lymphoma: No = 0 points, Yes = +2 points\n       17. AIDS: No =
            0 points, Yes = +6 points\n    \n    The total score is calculated
            by summing the points for each criterion.\\n\\n\n    The current
            CCI is value is 0.\nThe patient is 45 years old. Because the
            patient's age is less than 50, we do not add any points to the
            score,
            keeping the current total at 0.\nThe issue,
            'Myocardial infarction,'
            is reported to be absent for the patient and so we do not add any
            points to the score, keeping the current total at 0.\nThe patient's
            CCI score is 0 points.\nThe issue, 'Congestive heart failure,' is
            reported to be absent for the patient and so we do not add any
            points
            to the score, keeping the current total at 0.\nThe patient's CCI
            score is 0 points.\nThe issue, 'Peripheral vascular disease,' is
            reported to be absent for the patient and so we do not add any
            points to the score, keeping the current total at 0.\nThe patient's
            CCI score is 0 points.\nAt least one of transient ischemic attack
            or
            cerebral vascular accident must be present in the patient for a
            point
            to be added to the current total.\nTransient ischemic attacks is
            reported to be absent for the patient.\nCerebral vascular accident
            is
            reported to be absent for the patient.\nNeither of the issues are
            reported to be present for the patient and so we add 0 point to the
            score, keeping the current total at 0.\nThe issue, 'Connective
            tissue
            diease,' is reported to be absent for the patient and so we do not
            add any points to the score, keeping the current total at 0.\nThe
            patient's CCI score is 0 points.\n The issue,'Dementia,' is present
            for the patient and so we add 1 point to the score, making the
            current
            total 0 + 1 = 1.\nThe patient's CCI score is 1 points.\n The issue,
            'Chronic obstructive pulmonary disease,' is present for the patient
            and so we add 1 point to the score, making the current total
            1 + 1 =
            2.\nThe patient's CCI score is 2 points.\nThe issue, 'Hemiplegia,'
            is reported to be absent for the patient and so we do not add any
            points to the score, keeping the current total at 2.\nThe patient's
            CCI score is 2 points.\nThe issue, 'Peptic ulcer disease,' is
            reported
            to be absent for the patient and so we do not add any points to the
            score, keeping the current total at 2.\nThe patient's CCI score is
            2 points.\n The issue,'Diabetes mellitus,' is present for the
            patient
            and so we add 1 point to the score, making the current total
            2 + 1 = 3.
            \nThe patient's CCI score is 3 points.\nThe issue, 'Moderate to
            severe
            chronic kidney disease,' is reported to be absent for the patient
            and
            so we do not add any points to the score, keeping the current total
            at 3.\nThe patient's CCI score is 3 points.\n The issue,'Solid
            tumor,'
            is present for the patient and so we add 1 point to the score,
            making
            the current total 3 + 1 = 4.\nThe patient's CCI score is 4 points.
            \nThe
            issue, 'Leukemia,' is reported to be absent for the patient and
            so we
            do not add any points to the score, keeping
            the current total at 4.
            \nThe patient's CCI score is 4 points.\nThe issue, 'Lymphoma,' is
            reported to be absent for the patient and so we do not add any
            points
            to the score, keeping the current total at 4.\nThe patient's
            CCI score
            is 4 points.\nThe issue, 'AIDS,' is reported to be absent for the
            patient and so we do not add any points to the score, keeping the
            current total at 4.\nThe patient's CCI score is 4 points.\n The
            issue,'Liver Disease,' is present for the patient and so we add 1
            point to the score, making the current total 4 + 1 = 5.\nThe
            patient's CCI score is 5 points.\n", 'Answer': 5}
    "
    """

    parameter_to_name = {
        "mi": "Myocardial infarction",
        'chf': "Congestive heart failure",
        "peripheral_vascular_disease": "Peripheral vascular disease",
        "cva": "Cerebrovascular accident",
        "tia": "Transient ischemic attacks",
        'connective_tissue_disease': "Connective tissue diease",
        "dementia": "Dementia",
        "copd": "Chronic obstructive pulmonary disease",
        'hemiplegia': "Hemiplegia",
        "peptic_ucler_disease": "Peptic ulcer disease",
        "diabetes_mellitus": "Diabetes mellitus",
        "moderate_to_severe_ckd": 'Moderate to severe chronic kidney disease',
        "solid_tumor": "Solid tumor",
        "leukemia": "Leukemia",
        "lymphoma": "Lymphoma",
        "aids": "AIDS",
        "liver_disease": "Liver Disease",
    }

    two_point_params = [
        'hemiplegia',
        "moderate_to_severe_ckd",
        "leukemia",
        "lymphoma",
    ]

    explanation = r"""
    The Charlson Comorbidity Index (CCI) are listed below:
       1. Age: <50 years = 0 points, 50-59 years = +1 point, 60-69 years = +2
        points, 70-79 years = +3 points, ≥80 years = +4 points
       2. Myocardial infarction (history of definite or probable MI with EKG
        changes and/or enzyme changes): No = 0 points, Yes = +1 point
       3. Congestive heart failure (CHF) (exertional or paroxysmal nocturnal
        dyspnea, responsive to digitalis, diuretics, or afterload reducing
        agents): No = 0 points, Yes = +1 point
       4. Peripheral vascular disease (intermittent claudication, past bypass
        for chronic arterial insufficiency, history of gangrene or acute
        arterial insufficiency, untreated thoracic or abdominal
        aneurysm ≥6 cm): No = 0 points, Yes = +1 point
       5. Cerebrovascular accident (CVA) or transient ischemic attack (TIA)
        (history with minor or no residuals): No = 0 points, Yes = +1 point
       6. Dementia (chronic cognitive deficit): No = 0 points, Yes = +1 point
       7. Chronic obstructive pulmonary disease (COPD): No = 0 points,
        Yes = +1 point
       8. Connective tissue disease: No = 0 points, Yes = +1 point
       9. Peptic ulcer disease (any history of treatment for ulcer
        disease or ulcer bleeding): No = 0 points, Yes = +1 point
       10. Liver disease: None = 0 points, Mild = +1 point,
        Moderate to severe = +3 points
       11. Diabetes mellitus: None or diet-controlled = 0 points,
        Uncomplicated = +1 point, End-organ damage = +2 points
       12. Hemiplegia: No = 0 points, Yes = +2 points
       13. Moderate to severe chronic kidney disease (CKD):
        No = 0 points, Yes = +2 points
       14. Solid tumor: None = 0 points, Localized = +2 points,
        Metastatic = +6 points
       15. Leukemia: No = 0 points, Yes = +2 points
       16. Lymphoma: No = 0 points, Yes = +2 points
       17. AIDS: No = 0 points, Yes = +6 points

    The total score is calculated by summing the points for each criterion.\n\n
    """

    age_exp, age = age_conversion_explanation(input_parameters["age"])
    explanation += "The current CCI is value is 0.\n"
    explanation += age_exp
    cci = 0

    if age < 50:
        explanation += (
            f"Because the patient's age is less than 50, "
            f"we do not add any points to the score, "
            f"keeping the current total at {cci}.\n"
        )
    elif 49 < age < 60:
        explanation += (
            f"Because the patient's age is between 50 and 59, "
            f"we add 1 point to the score, "
            f"making the current total = {cci} + 1 = {cci + 1}.\n"
        )
        cci += 1
    elif 59 < age < 70:
        explanation += (
            f"Because the patient's age is between 60 and 69, "
            f"we add 2 points to the score, "
            f"making the current total = {cci} + 2 = {cci + 2}.\n"
        )
        cci += 2
    elif 69 < age < 80:
        explanation += (
            f"Because the patient's age is between 70 and 79, "
            f"we add 3 points to the score, "
            f"making the current total = {cci} + 3 = {cci + 3}.\n"
        )
        cci += 3
    elif age >= 80:
        explanation += (
            f"Because the patient's age is greater than "
            f"or equal to 80 years, we add 4 points to "
            f"the score, making the current "
            f"total = {cci} + 4 = {cci + 4}.\n"
        )
        cci += 4

    for parameter in parameter_to_name:
        if parameter == "tia":
            continue

        if parameter == "cva":
            explanation += (
                "At least one of transient ischemic attack "
                "or cerebral vascular accident must be present "
                "in the patient for a point to be "
                "added to the current total.\n"
            )

            if 'tia' not in input_parameters:
                explanation += (
                    "Transient ischemic attacks is not reported "
                    "for the patient and so we assume it to be "
                    "absent.\n"
                )
                input_parameters["tia"] = False
            elif input_parameters['tia']:
                explanation += (
                    "Transient ischemic attacks is reported to "
                    "be present for the patient.\n"
                )
            else:
                explanation += (
                    "Transient ischemic attacks is reported to "
                    "be absent for the patient.\n"
                )

            if 'cva' not in input_parameters:
                explanation += (
                    "Cerebral vascular accident is not reported "
                    "for the patient and so we assume it to be "
                    "absent.\n"
                )
                input_parameters["cva"] = False
            elif input_parameters['cva']:
                explanation += (
                    "Cerebral vascular accident is reported to "
                    "be present for the patient.\n"
                )
            else:
                explanation += (
                    "Cerebral vascular accident is reported to "
                    "be absent for the patient.\n"
                )

            if input_parameters['cva'] or input_parameters['tia']:
                explanation += (
                    f"Because at least one of the issues is "
                    f"reported to be present for the patient, "
                    f"we add 1 point to the score, making the "
                    f"current total {cci} + 1 = {cci + 1}.\n"
                )
                cci += 1
                continue
            else:
                explanation += (
                    f"Neither of the issues are reported to be "
                    f"present for the patient and so we add 0 "
                    f"point to the score, keeping the current "
                    f"total at {cci}.\n"
                )
                continue

        if parameter == 'solid_tumor' and parameter not in input_parameters:
            explanation += (
                f"The patient's solid tumor status is not "
                f"reported and so we assume that it is 'none.' "
                f"Hence, do not add any points to the score, "
                f"keeping the current total at {cci}.\n"
            )
            continue
        elif (
            parameter == 'solid_tumor'
            and parameter in input_parameters
            and input_parameters[parameter] == 'none'
        ):
            explanation += (
                f"The patient's solid tumor is reported to be "
                f"'none' and so we do not add any points to the "
                f"score, keeping the current total at {cci}.\n"
            )
            continue
        elif (
            parameter == 'solid_tumor'
            and parameter in input_parameters
            and input_parameters[parameter] == 'localized'
        ):
            explanation += (
                f"The patient's solid tumor is reported to be "
                f"'localized' and so we add 2 points to the "
                f"score, making the current total {cci} + 2 = "
                f"{cci + 2}.\n"
            )
            cci += 2
            continue
        elif (
            parameter == 'solid_tumor'
            and parameter in input_parameters
            and input_parameters[parameter] == 'metastatic'
        ):
            explanation += (
                f"The patient's solid tumor is reported to be "
                f"'metastatic' and so we add 6 points to the "
                f"score, making the current total {cci} + 6 = "
                f"{cci + 6}.\n"
            )
            cci += 6
            continue

        if parameter == 'liver_diease' and parameter not in input_parameters:
            explanation += (
                f"The patient's liver disease status is not "
                f"reported and so we assume the value to be "
                f"'none or diet-controlled.' No points are added "
                f"to the score, keeping the current total at "
                f"{cci}.\n"
            )
            continue
        elif (
            parameter == 'liver_disease'
            and parameter in input_parameters
            and input_parameters[parameter] == 'none'
        ):
            explanation += (
                f"The patient's liver disease is reported to be "
                f"'none' and so we do not add any points to the "
                f"score, keeping the current total at {cci}.\n"
            )
            continue
        elif (
            parameter == 'liver_disease'
            and parameter in input_parameters
            and input_parameters[parameter] == 'mild'
        ):
            explanation += (
                f"The patient's liver disease is reported to be "
                f"'mild' and so we add 1 point to the score, "
                f"making the current total {cci} + 1 = {cci + 1}.\n"
            )
            cci += 1
            continue
        elif (
            parameter == 'liver_disease'
            and parameter in input_parameters
            and input_parameters[parameter] == 'moderate to severe'
        ):
            explanation += (
                f"The patient's liver disease is reported to be "
                f"'moderate to severe' and so we add 3 points to "
                f"the score, making the current "
                f"total {cci} + 3 = {cci + 3}.\n"
            )
            cci += 3
            continue

        if (
            parameter == 'diabetes_mellitus'
            and 'diabetes_mellitus' not in input_parameters
        ):
            explanation += (
                f"The patient's diabetes mellitus status is not "
                f"reported and so we assume the value to be "
                f"'none or diet-controlled.' No points are added "
                f"to the score, keeping the current total at "
                f"{cci}.\n"
            )
            continue
        elif (
            parameter == 'diabetes_mellitus'
            and parameter in input_parameters
            and input_parameters[parameter] == 'none or diet-controlled'
        ):
            explanation += (
                f"The patient's diabetes mellitus is reported to "
                f"be 'none or diet-controlled' and so we add 0 "
                f"point to the score, keeping the current total "
                f"at {cci}.\n"
            )
            continue
        elif (
            parameter == 'diabetes_mellitus'
            and parameter in input_parameters
            and input_parameters[parameter] == 'uncomplicated'
        ):
            explanation += (
                f"The patient's diabetes mellitus is reported to "
                f"be 'uncomplicated' and so we add 1 point "
                f"to the score, making the current "
                f"total {cci} + 1 = {cci + 1}.\n"
            )
            cci += 1
            continue
        elif (
            parameter == 'diabetes_mellitus'
            and parameter in input_parameters
            and input_parameters[parameter] == 'end-organ damage'
        ):
            explanation += (
                f"The patient's diabetes mellitus is reported to "
                f"be 'end-organ damage' and so we add 2 points "
                f"to the score, making the current total {cci} + "
                f"2 = {cci + 2}.\n"
            )
            cci += 2
            continue

        if (
            parameter in two_point_params
            and parameter in input_parameters
            and input_parameters[parameter]
        ):
            explanation += (
                f"The issue, '{parameter_to_name[parameter]},"
                f"' is reported to be present for the patient "
                f"and so we add 2 points to the score, "
                f"making the current total {cci} + 2 = {cci + 2}.\n"
            )
            cci += 2
        elif (
            parameter == 'aids'
            and parameter in input_parameters
            and input_parameters['aids']
        ):
            explanation += (
                f'AIDS is reported to be present for the patient '
                f'and so we add 6 points to the score, '
                f'making the current total at '
                f'{cci} + 6 = {cci + 6}.\n'
            )
            cci += 6

        elif (
            parameter not in two_point_params
            and parameter != 'aids'
            and parameter in input_parameters
            and input_parameters[parameter]
        ):
            explanation += (
                f" The issue,'{parameter_to_name[parameter]},"
                f"' is present for the patient and so we add 1 "
                f"point to the score, making the current total "
                f"{cci} + 1 = {cci + 1}.\n"
            )
            cci += 1
        elif parameter in input_parameters and not input_parameters[parameter]:
            explanation += (
                f"The issue, '{parameter_to_name[parameter]},"
                f"' is reported to be absent for the patient and "
                f"so we do not add any points to the score, "
                f"keeping the current total at {cci}.\n"
            )
        elif parameter not in input_parameters:
            explanation += (
                f"The issue, '{parameter_to_name[parameter]},"
                f"' is reported to be absent for the patient and "
                f"so we do not add any points to the score, "
                f"keeping the current total at {cci}.\n"
            )

        explanation += f"The patient's CCI score is {cci} points.\n"

    return {"Explanation": explanation, "Answer": cci}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            "age": (45, 'years'),
            "mi": False,
            "chf": False,
            "peripheral_vascular_disease": False,
            "cva": False,
            "tia": False,
            "connective_tissue_disease": False,
            "dementia": True,
            "copd": True,
            "hemiplegia": False,
            "peptic_ucler_disease": False,
            "diabetes_mellitus": "Uncomplicated",
            "moderate_to_severe_ckd": False,
            "solid_tumor": "Localized",
            "leukemia": False,
            "lymphoma": False,
            "aids": False,
            "liver_disease": "Mild",
        }
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = compute_cci_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:albumin_corrected_delta_gap.py
"""
 below is the content of albumin_corrected_delta_gap.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function compute_albumin_corrected_delta_gap_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench.albumin_corrected_anion import (
    compute_albumin_corrected_anion_explanation,
)
from camel.toolkits.medcalc_bench.utils.rounding import round_number


def compute_albumin_corrected_delta_gap_explanation(input_parameters):
    r"""
    Calculates the patient's albumin corrected delta gap and generates a
    detailed explanatory text.

    Parameters:
        input_parameters (dict): A dictionary containing the following
        key-value pairs:
            - "sodium" (array): The patient's blood sodium level in the
                format (value, unit).
                - Value (float): The blood sodium level.
                - Unit (str): The unit of blood sodium level.
            - "chloride" (array): The patient's chloride level in the
                format (value, unit).
                - Value (float): The value of chloride level.
                - Unit (str): The unit of chloride level, eg. "mmol/L",
                    "mEq/L", and so on.
            - "bicarbonate" (array): The patient's bicarbonate level in
                the format (value, unit).
                - Value (float): The value of bicarbonate level.
                - Unit (str): The unit of bicarbonate level, eg. "mmol/L",
                    "mEq/L", and so on.
            - "albumin" (array): The patient's albumin concentration in the
                format (value, unit).
                - Value (float): The numerical albumin concentration value.
                - Unit (str): The unit of albumin concentration, eg. "g/L",
                    "mg/dL", "g/mL" and so on.

    Returns:
        dict: Contains two key-value pairs:
            - "Explanation" (str): A detailed description of
                the calculation process.
            - "Answer" (float): The patient's albumin corrected delta gap.

    Notes:
        - None

    Example:
        compute_albumin_corrected_delta_gap_explanation()

        output: "{'Explanation': "To compute the formula of albumin
        corrected delta gap, the formula is albumin corrected anion gap (in
        mEq/L) - 12.\nThe formula for computing a patient's albumin
        corrected anion gap is:anion_gap (in mEq/L) + 2.5 * (4 -
        albumin (in g/dL)).\nThe formula for computing a patient's anion gap
        is:sodium (mEq/L) - (chloride (mEq/L)+ bicarbonate (mEq/L)).\nThe
        concentration of sodium is 141.0 mEq/L. \nThe concentration of
        chloride is 104.0 mEq/L. \nThe concentration of bicarbonate is 29.0
        mEq/L. \nPlugging in these values into the anion gap formula
        gives us 141.0 mEq/L - (104.0 mEq/L + 29.0 mEq/L) = 8.0 mEq/L.
        Hence, The patient's anion gap is 8.0 mEq/L.\nThe concentration of
        albumin is 43.0 g/L. We need to convert the concentration to g/dL.
        The mass units of the source and target are the same so no
        conversion is needed.The current volume unit is L and the target
        volume unit is dL. The conversion factor is 10.0 dL
        for every unit of L. Our next step will be to divide the mass by the
        volume conversion factor of 10.0 to get the final concentration in
        terms of g/dL. This will result to 43.0 g albumin/10.0 dL = 4.3 g
        albumin/dL. The concentration value of 43.0 g albumin/L converts to
        4.3 g albumin/dL. Plugging in these values into the albumin
        corrected anion gap formula, we get 8.0 (mEq/L) + 2.5 *
        (4 - 4.3 (in g/dL)) = 7.25 mEq/L. Hence,the patient's albumin
        corrected anion gap is 7.25 mEq/L.\nPlugging in 7.25 mEq/L for the
        anion gap into the albumin corrected delta gap formula, we get 7.25
        - 12 = -4.75 mEq/L. Hence, the patient's albumin corrected delta
        gap is -4.75 mEq/L.\n", 'Answer': -4.75}"
    """

    explanation = (
        "To compute the formula of albumin corrected delta gap, "
        "the formula is albumin corrected anion gap (in mEq/L) - 12.\n"
    )

    albumin_corrected_resp = compute_albumin_corrected_anion_explanation(
        input_parameters
    )

    explanation += albumin_corrected_resp["Explanation"]

    albumin_corrected_val = albumin_corrected_resp["Answer"]

    answer = round_number(albumin_corrected_val - 12.0)

    explanation += (
        f"Plugging in {albumin_corrected_val} mEq/L for the anion gap into "
        f"the albumin corrected delta gap formula, "
        f"we get {albumin_corrected_val} - 12 = {answer} mEq/L. "
    )
    explanation += (
        f"Hence, the patient's albumin corrected delta gap "
        f"is {answer} mEq/L.\n"
    )

    return {"Explanation": explanation, "Answer": answer}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            "chloride": (104.0, "mEq/L"),
            "bicarbonate": (29.0, "mEq/L"),
            "albumin": (43.0, "g/L"),
            "sodium": (141.0, "mEq/L"),
        },
        {
            "chloride": (89.0, "mmol/L"),
            "bicarbonate": (23.7, "mEq/L"),
            "albumin": (2.1, "g/dL"),
            "sodium": (133.0, "mmol/L"),
        },
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = compute_albumin_corrected_delta_gap_explanation(
            input_variables
        )
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:feverpain.py
"""
 below is the content of feverpain.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function compute_fever_pain_explanation
- translation

Date: March 2025
"""


def compute_fever_pain_explanation(input_parameters):
    r"""
    Calculates the patient's FeverPAIN score and generates a detailed
    explanatory text.

    Parameters:
        input_parameters (dict): A dictionary containing the following
        key-value pairs:
            - "symptom_onset" (Optional[bool]): Whether the patient has a
            fever in the past 24 hours.
            - "purulent_tonsils" (Optional[bool]): Presence of pus on the
            tonsils.
            - "fever_24_hours" (Optional[bool]): Whether the patient has
            had a fever in the past 24 hours.
            - "severe_tonsil_inflammation" (Optional[bool]): Presence of
            severe tonsil inflammation.
            - "cough_coryza_absent" (Optional[bool]): Absence of cough or
            coryza.

    Returns:
        dict: Contains two key-value pairs:
            - "Explanation" (str): A detailed description of
            the calculation process.
            - "Answer" (float): The patient's FeverPAIN score.

    Notes:
        - None

    Example:
        compute_fever_pain_explanation({'symptom_onset': True,
        'fever_24_hours': True, 'cough_coryza_absent': True})

        output: "{'Explanation': "\n    The criteria for the FeverPAIN score
        are listed below:\n\n 1. Fever in past 24 hours: No = 0 points,
        Yes = +1 point\n 2. Absence of cough or coryza: No = 0 points,
        Yes = +1 point\n 3. Symptom onset ≤3 days: No = 0 points, Yes = +1
        point\n 4. Purulent tonsils: No = 0 points, Yes = +1 point\n 5.
        Severe tonsil inflammation: No = 0 points, Yes = +1 point\n\n The
        FeverPAIN score is calculated by summing the points for each
        criterion.\n\n\n The patient's current FeverPain score is 0.\n'The
        patient is reported to have a fever in the past 24 hours and so we
        increment the score by 1, making the current total 0 + 1 = 1.
        \n'The patient is reported to have an absence of cough or coryza
        and so we increment the score by 1, making the current total
        1 + 1 = 2.\n'The patient is reported to have a symptom onset ≤3 days
        and so we increment the score by 1, making the current total
        2 + 1 = 3. \nWhether the patient has purulent tonsils is not
        reported and so we assume that it is absent for the patient.
        Because of this, we do not increment the score, keeping the current
        total at 3. \nWhether the patient has severe tonsil inflammation is
        not reported and so we assume that it is absent for the patient.
        Because of this, we do not increment the score, keeping the current
        total at 3.\nThe patient's FeverPain score is 3 points.\n",
        'Answer': 3}"
    """

    parameter_name = {
        "fever_24_hours": "a fever in the past 24 hours",
        "cough_coryza_absent": "an absence of cough or coryza",
        "symptom_onset": "a symptom onset ≤3 days",
        "purulent_tonsils": "purulent tonsils",
        "severe_tonsil_inflammation": "severe tonsil inflammation",
    }

    fever_pain_score = 0

    explanation = """
     The criteria for the FeverPAIN score are listed below:

        1. Fever in past 24 hours: No = 0 points, Yes = +1 point
        2. Absence of cough or coryza: No = 0 points, Yes = +1 point
        3. Symptom onset ≤3 days: No = 0 points, Yes = +1 point
        4. Purulent tonsils: No = 0 points, Yes = +1 point
        5. Severe tonsil inflammation: No = 0 points, Yes = +1 point

     The FeverPAIN score is calculated by summing the points for each 
     criterion.\n\n
     """

    explanation += "The patient's current FeverPain score is 0.\n"

    for parameter in parameter_name:
        if parameter not in input_parameters:
            explanation += (
                f"Whether the patient has {parameter_name[parameter]} is "
                f"not reported and so we assume that it is absent for the "
                f"patient. Because of this, we do not increment the score, "
                f"keeping the current total at {fever_pain_score}.\n"
            )

        elif input_parameters[parameter]:
            explanation += (
                f"'The patient is reported to have "
                f"{parameter_name[parameter]} and so we increment the score "
                f"by 1, making the current total {fever_pain_score} + 1 = "
                f"{fever_pain_score + 1}.\n"
            )
            fever_pain_score += 1

        else:
            explanation += (
                f"The patient is reported to not have "
                f"{parameter_name[parameter]} and so we do not "
                f"increment the score, keeping the current total at "
                f"{fever_pain_score}.\n"
            )

    explanation += (
        f"The patient's FeverPain score is {fever_pain_score} points.\n"
    )

    return {"Explanation": explanation, "Answer": fever_pain_score}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            "symptom_onset": True,
            "purulent_tonsils": False,
            "fever_24_hours": True,
            "severe_tonsil_inflammation": False,
            "cough_coryza_absent": False,
        },
        {
            'symptom_onset': True,
            'fever_24_hours': True,
            'cough_coryza_absent': True,
        },
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = compute_fever_pain_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:wells_criteria_dvt.py
"""
 below is the content of wells_criteria_dvt.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function compute_wells_criteria_dvt_explanation
- translation

Date: March 2025
"""


def compute_wells_criteria_dvt_explanation(input_parameters):
    r"""
    Calculates the patient's score of Wells' criteria for DVT and generates
    a detailed explanatory text.

    Parameters:
        input_parameters (dict): A dictionary containing the following
        key-value pairs:
            - "active_cancer" (boolean): Whether the patient has active
            cancer or not.
            - "bedridden_for_atleast_3_days" (boolean): bedridden recently
            >3 days.
            - "major_surgery_in_last_12_weeks" (boolean): major surgery
            within 12 weeks.
            - "calf_swelling_3cm" (boolean): calf swelling >3 cm compared
            to the other leg.
            - "collateral_superficial_veins" (boolean): collateral (
            nonvaricose) superficial veins present.
            - "leg_swollen" (boolean): entire leg swollen.
            - "localized_tenderness_on_deep_venuous_system" (boolean):
            localized tenderness along the deep venous
            system.
            - "pitting_edema_on_symptomatic_leg" (boolean): pitting edema,
            confined to symptomatic leg.
            - "paralysis_paresis_immobilization_in_lower_extreme" (boolean):
            paralysis, paresis, or recent plaster
            immobilization of the lower extremity
            - "previous_dvt" (boolean): Previous, objectively diagnosed DVT:
            No = 0 points, Yes = +1.5 points.
            - "alternative_to_dvt_diagnosis" (boolean): alternative
            diagnosis to DVT as likely or more likely.

    Returns:
        dict: Contains two key-value pairs:
            - "Explanation" (str): A detailed description of
            the calculation process.
            - "Answer" (float): The patient's score of Wells' criteria for
            Pulmonary Embolism.

    Notes:
        - None.

    Example:
        calculate_pe_wells_explanation({
            "active_cancer": False,
            "bedridden_for_atleast_3_days": False,
            "major_surgery_in_last_12_weeks": False,
            "calf_swelling_3cm": False,
            "collateral_superficial_veins": True,
            "leg_swollen": False,
            "localized_tenderness_on_deep_venuous_system": False,
            "pitting_edema_on_symptomatic_leg": False,
            "paralysis_paresis_immobilization_in_lower_extreme": False,
            "previous_dvt": True,
            "alternative_to_dvt_diagnosis": False,
        })

        output: "{'Explanation': "\n    The criteria for the Wells' Criteria
        for Deep Vein Thrombosis (DVT) score are listed below:\n\n
        1. Active cancer (treatment or palliation within 6 months):
        No = 0 points, Yes = +1 point\n       2. Bedridden recently >3 days
        or major surgery within 12 weeks: No = 0 points, Yes = +1 point
        \n       3. Calf swelling >3 cm compared to the other leg (measured
        10 cm below tibial tuberosity): No = 0 points, Yes = +1 point
        \n       4. Collateral (nonvaricose) superficial veins present:
        No = 0 points, Yes = +1 point\n       5. Entire leg swollen:
        No = 0 points, Yes = +1 point\n 6. Localized tenderness along the
        deep venous system: No = 0 points, Yes = +1 point\n 7. Pitting
        edema, confined to symptomatic leg: No = 0 points, Yes = +1 point
        \n 8. Paralysis, paresis, or recent plaster immobilization of the
        lower extremity: No = 0 points, Yes = +1 point\n
        9. Previously documented DVT: No = 0 points, Yes = +1 point\n 10.
        Alternative diagnosis to DVT as likely or more likely: No = 0
        points, Yes = -2 points\n \n    The total score is calculated by
        summing the points for each criterion.\\n\\n\n The current Well's
        DVT Score is 0.\nFrom the patient's note, the issue, 'active cancer,
        ' is absent. By the Well's DVT rule, a point should not be given,
        and so the score remains unchanged and so total remains at 0.\nFrom
        the patient's note, the issue, 'bedridden recently >3 days,
        ' is absent. From the patient's note, the issue, 'major surgery
        within 12 weeks,' is absent. Based on the Well's DVT rule, at least
        one of the issues, 'bedridden recently >3 days' or 'major surgery
        within 12 weeks' must be true for this criteria to be met for the
        score to increase by 1. This is not the case for this patient,
        and so the score remains unchanged at 0.\nFrom the patient's note,
        the issue, 'calf swelling >3 cm compared to the other leg,'
        is absent. By the Well's DVT rule, a point should not be given,
        and so the score remains unchanged and so total remains at 0.\nFrom
        the patient's note, the issue, 'collateral (nonvaricose)
        superficial veins present,' is present. By Well's DVT rule, a point
        should be given, and so we increment the score by one, making
        the total 0 + 1 =  1.\nFrom the patient's note, the issue, 'entire
        leg swollen,' is absent. By the Well's DVT rule, a point should not
        be given, and so the score remains unchanged and so total remains
        at 1.\nFrom the patient's note, the issue, 'localized tenderness
        along the deep venous system,' is absent. By the Well's DVT rule,
        a point should not be given, and so the score remains unchanged and
        so total remains at 1. \nFrom the patient's note, the issue,
        'pitting edema, confined to symptomatic leg,' is absent. By the
        Well's DVT rule, a point should not be given, and so the score
        remains unchanged and so total remains at 1.\nFrom the patient's
        note, the issue, 'paralysis, paresis, or recent plaster
        immobilization of the lower extremity,' is absent. By the Well's
        DVT rule, a point should not be given, and so the score remains
        unchanged and so total remains at 1.\nFrom the patient's note,
        the issue, 'previously documented DVT,' is present. By Well's DVT
        rule, a point should be given, and so we increment the score by
        one, making the total 1 + 1 =  2.\nFrom the patient's note,
        the issue, 'alternative diagnosis to DVT as likely or more likely,
        ' is absent. By the Well's DVT rule, a point should not be given,
        and so the score remains unchanged and so total remains at 2.\nThe
        Well's DVT score for the patient is 2.\n", 'Answer': 2}"
    """

    # List of parameters and their default values
    parameters = [
        ('active_cancer', "active cancer"),
        ('bedridden_for_atleast_3_days', "bedridden recently >3 days"),
        ('major_surgery_in_last_12_weeks', "major surgery within 12 weeks"),
        ('calf_swelling_3cm', "calf swelling >3 cm compared to the other leg"),
        (
            'collateral_superficial_veins',
            "collateral (nonvaricose) superficial veins present",
        ),
        ('leg_swollen', "entire leg swollen"),
        (
            'localized_tenderness_on_deep_venuous_system',
            "localized tenderness along the deep venous system",
        ),
        (
            'pitting_edema_on_symptomatic_leg',
            "pitting edema, confined to symptomatic leg",
        ),
        (
            'paralysis_paresis_immobilization_in_lower_extreme',
            "paralysis, paresis, or "
            "recent plaster immobilization of the lower extremity",
        ),
        ('previous_dvt', 'previously documented DVT'),
        (
            'alternative_to_dvt_diagnosis',
            "alternative diagnosis to DVT as likely or more likely",
        ),
    ]

    output = r"""
    The criteria for the Wells' Criteria for Deep Vein Thrombosis (DVT)
        score are listed below:

       1. Active cancer (treatment or palliation within 6 months): No = 0
        points, Yes = +1 point
       2. Bedridden recently >3 days or major surgery within 12 weeks: No = 0
        points, Yes = +1 point
       3. Calf swelling >3 cm compared to the other leg (measured 10 cm below
        tibial tuberosity): No = 0 points, Yes = +1 point
       4. Collateral (nonvaricose) superficial veins present: No = 0 points,
        Yes = +1 point
       5. Entire leg swollen: No = 0 points, Yes = +1 point
       6. Localized tenderness along the deep venous system: No = 0 points,
        Yes = +1 point
       7. Pitting edema, confined to symptomatic leg: No = 0 points,
        Yes = +1 point
       8. Paralysis, paresis, or recent plaster immobilization of
        the lower extremity: No = 0 points, Yes = +1 point
       9. Previously documented DVT: No = 0 points, Yes = +1 point
       10. Alternative diagnosis to DVT as likely or more likely:
        No = 0 points, Yes = -2 points

    The total score is calculated by summing the points for each criterion.\n\n
    """

    # Initializing points and output explanation
    score = 0
    output += "The current Well's DVT Score is 0.\n"

    count = 0

    while count < len(parameters):
        param_name = parameters[count][0]

        param_value = input_parameters.get(param_name)

        # If parameter is missing, assume it as False
        if param_value is None:
            output += (
                f"The issue,'{parameters[count][1]},' is missing from the "
                f"patient note and so the value is assumed "
                f"to be absent from the patient. "
            )
            input_parameters[param_name] = False
            param_value = False

        else:
            param_value_name = 'absent' if not param_value else 'present'
            output += (
                f"From the patient's note, the issue, '"
                f"{parameters[count][1]},' is {param_value_name}. "
            )

        if param_name == 'bedridden_for_atleast_3_days':
            count += 1
            continue
        if param_name == 'major_surgery_in_last_12_weeks':
            if (
                input_parameters['bedridden_for_atleast_3_days']
                or input_parameters['major_surgery_in_last_12_weeks']
            ):
                output += (
                    f"Based on the Well's DVT rule, at least one of the "
                    f"issues, 'bedridden recently >3 days' or "
                    f"'major surgery within 12 weeks' must be true for this "
                    f"criteria to be met for the score to increase by 1. "
                    f"Because this is the case, we incease the score by "
                    f"one making the total {score} + 1 = {score + 1}.\n"
                )
                score += 1
            else:
                output += (
                    f"Based on the Well's DVT rule, at least one of the "
                    f"issues, 'bedridden recently >3 days' or "
                    f"'major surgery within 12 weeks' must be true for this "
                    f"criteria to be met for the score "
                    f"to increase by 1. This is not the case for this "
                    f"patient, and so the score remains unchanged at "
                    f"{score}.\n"
                )
            count += 1
            continue

        # Score calculation
        if param_value:
            if param_name == 'alternative_to_dvt_diagnosis':
                output += (
                    f"By the Well's DVT rule, we decrease the score "
                    f"by 2 and so total is {score} - 2 = {score - 2}.\n"
                )
                score -= 2
                count += 1
                continue
            else:
                output += (
                    f"By Well's DVT rule, a point should be given, "
                    f"and so we increment the score by one, "
                    f"making the total {score} + 1 =  {score + 1}.\n"
                )
                score += 1
        elif param_value is False:
            output += (
                f"By the Well's DVT rule, a point should not be given, "
                f"and so the score remains unchanged "
                f"and so total remains at {score}.\n"
            )

        count += 1

    output += f"The Well's DVT score for the patient is {score}.\n"

    return {"Explanation": output, "Answer": score}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            "active_cancer": False,
            "bedridden_for_atleast_3_days": False,
            "major_surgery_in_last_12_weeks": False,
            "calf_swelling_3cm": False,
            "collateral_superficial_veins": True,
            "leg_swollen": False,
            "localized_tenderness_on_deep_venuous_system": False,
            "pitting_edema_on_symptomatic_leg": False,
            "paralysis_paresis_immobilization_in_lower_extreme": False,
            "previous_dvt": True,
            "alternative_to_dvt_diagnosis": False,
        },
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = compute_wells_criteria_dvt_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:estimated_due_date.py
"""
 below is the content of estimated_due_date.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function add_40_weeks_explanation
- translation

Date: March 2025
"""

from datetime import datetime, timedelta


def add_40_weeks_explanation(input_data):
    r"""
    Calculates the patient's estimated due date and generates a detailed
    explanatory text.

    Parameters:
        input_data (dict): A dictionary containing the following key-value
        pairs:
            - "cycle_length" (int): The cycle length of the patient's
            menstrual period.
            - "menstrual_date" (date): The patient's menstrual date in the
            format "%m/%d/%Y".

    Returns:
        dict: Contains two key-value pairs:
            - "Explanation" (str): A detailed description of
            the calculation process.
            - "Answer" (float): The patient's estimated due date.

    Notes:
        - None

    Example:
        add_2_weeks_explanation({"cycle_length": 21,
        "menstrual_date": "09/17/2011",})

        output: "{'Explanation': "The patient's estimated due date based on
        their last period is computed by using Naegele's Rule. Using
        Naegele's Rule, we add 40 weeks to the patient's last menstrual
        period date. We then add or subtract days from the patient's
        estimated due date depending on how many more or less days a
        patient's cycle length is from the standard 28 days. \nThe patient's
        last menstrual period was 09/17/2011. \nThe date after adding 40
        weeks to the patient's last menstrual period date is 06/23/2012.
        \nBecause the patient's cycle length is 21 days, this means that we
        must subtract 7 days from the patient's estimate due date. Hence,
        the patient's estimated due date is 06/30/2012. \n", 'Answer':
        '06/30/2012'}"
    """

    input_date_str = input_data["menstrual_date"]
    cycle_length = input_data["cycle_length"]

    explanation = (
        "The patient's estimated due date based on their last "
        "period is computed by using Naegele's Rule. "
    )
    explanation += (
        "Using Naegele's Rule, we add 40 weeks to the patient's last "
        "menstrual period date. We then add or subtract days from the "
        "patient's estimated due date depending on how many more or less "
        "days a patient's cycle length is from the standard 28 days. \n"
    )
    explanation += (
        f"The patient's last menstrual period was {input_date_str}. \n"
    )

    input_date = datetime.strptime(input_date_str, "%m/%d/%Y")
    future_date = input_date + timedelta(weeks=40)

    explanation += (
        f"The date after adding 40 weeks to the patient's last "
        f"menstrual period date is "
        f"{future_date.strftime('%m/%d/%Y')}. \n"
    )

    if cycle_length == 28:
        explanation += (
            f"Because the patient's cycle length is 28 days, we do not make "
            f"any changes to the date. Hence, the patient's estimated due "
            f"date is {future_date.strftime('%m/%d/%Y')}. \n"
        )
    elif cycle_length < 28:
        cycle_length_gap = abs(cycle_length - 28)
        future_date = future_date + timedelta(days=cycle_length_gap)
        explanation += (
            f"Because the patient's cycle length is {abs(cycle_length)} days, "
            f"this means that we must subtract {cycle_length_gap} days from "
            f"the patient's estimate due date. Hence, the patient's "
            f"estimated due date is {future_date.strftime('%m/%d/%Y')}. \n"
        )
    elif cycle_length > 28:
        cycle_length_gap = abs(cycle_length - 28)
        future_date = future_date + timedelta(days=cycle_length_gap)
        explanation += (
            f"Because the patient's cycle length is {cycle_length} days, "
            f"this means that we must add {cycle_length_gap} days to the "
            f"patient's estimate due date. Hence, the patient's estimated "
            f"due date is {future_date.strftime('%m/%d/%Y')}. \n"
        )

    return {
        "Explanation": explanation,
        "Answer": future_date.strftime('%m/%d/%Y'),
    }


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            "cycle_length": 21,
            "menstrual_date": "09/17/2011",
        },
        {
            "cycle_length": 28,
            "menstrual_date": "12/03/2023",
        },
    ]

    # {'cycle length': 21, 'Last menstrual date': '09/17/2011'}
    # {'cycle length': 28, 'Last menstrual date': '12/03/2023'}

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = add_40_weeks_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:child_pugh_score.py
"""
 below is the content of child_pugh_score.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function compute_child_pugh_score_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench.utils.unit_converter_new import (
    conversion_explanation,
)


def compute_child_pugh_score_explanation(input_variables):
    r"""
    Calculates the patient's child pugh score and generates a detailed
    explanatory text.

    Parameters:
        input_variables (dict): A dictionary containing the following
        key-value pairs:
            - "inr" (float): The patient's international normalised ratio (
            INR) in the float format.
            - "albumin" (tuple): The patient's albumin concentration in the
            format (value, unit).
                - Value (float): The numerical albumin concentration value.
                - Unit (str): The unit of albumin concentration, eg. "g/L",
                "mg/dL", "g/mL" and so on.
            - "bilirubin" (array): The patient's bilirubin level in the
            format (value, unit).
                - Value (float): The value of bilirubin level.
                - Unit (str): The unit of bilirubin level, eg. "mmol/L",
                "mEq/L", and so on.
            - "ascites" (str): The patient's ascites level.
                - Absent
                - Slight
                - Moderate
            - "encephalopathy" (str): Whether the patient has encephalopathy.
                - No Encephalopathy
                - Grade 1-2
                - Grade 3-4

    Returns:
        dict: Contains two key-value pairs:
            - "Explanation" (str): A detailed description of
            the calculation process.
            - "Answer" (float): The patient's child pugh score.

    Notes:
        - None

    Example:
        compute_child_pugh_score_explanation({'bilirubin': (2.8, 'mg/dL'),
        'albumin': (2.1, 'g/dL'),
        'inr': 1.5,
        'ascites': 'Absent',
        'encephalopathy': 'Grade 1-2'})

        output: "{'Explanation': "\n    The criteria for the Child-PughScore
        are listed below:\n\n    1. Bilirubin (Total): <2 mg/dL (<34.2
        μmol/L) = +1 point, 2-3 mg/dL (34.2-51.3μmol/L) = +2 points,
        \n    >3 mg/dL (>51.3μmol/L) = +3 points\n    2. Albumin: >3.5 g/dL
        (>35 g/L) = +1 point,2.8-3.5 g/dL (28-35 g/L) = +2 points,<2.8 g/dL
        (<28 g/L) = +3 points\n    3. INR: <1.7 = +1 point,1.7-2.3 = +2
        points, >2.3 = +3 points\n    4.Ascites: Absent = +1 point, Slight
        = +2 points, Moderate = +3points\n    5. Encephalopathy:
        NoEncephalopathy = +1 point, Grade 1-2 = +2 points, Grade 3-4 =
        +3points\n\n    The Child-Pugh Score iscalculated by summing the
        points for each criterion.\\n\\n\n    Thecurrent child pugh score is 0.
        \nThepatient's INR is 1.5. Because the INR is less than 1.7, we add
        1 tothe score, making the current total0 + 1 = 1.\nThe concentration
        of bilirubin is 2.8 mg/dL. Because the Bilirubin concentration is
        between 2mg/dL and 3 mg/dL, we add 2 to the score, making the
        current total 1 + 2 = 3.\nThe concentration of albuminis 2.1 g/dL.
        Because the Albumin concentration is less than 2.8 g/dL, we add 3 to
        the score, making thecurrent total 3 + 3 = 6.\nAscites is reported
        to be 'absent' and so we add 1 point to the score, making thecurrent
        total 6 + 1 = 7.\nEncephalopathy state is 'Grade 1-2 encephalopathy'
        and so we add two points to thescore, making the current total 7 + 2 =
        9.\nThe patient's child pugh score is 9.\n", 'Answer': 9}"
    """

    cp_score = 0

    explanation = r"""
    The criteria for the Child-Pugh Score are listed below:

    1. Bilirubin (Total): <2 mg/dL (<34.2 μmol/L) = +1 point, 2-3 mg/dL
        (34.2-51.3 μmol/L) = +2 points, >3 mg/dL (>51.3 μmol/L) = +3 points
    2. Albumin: >3.5 g/dL (>35 g/L) = +1 point, 2.8-3.5 g/dL (28-35 g/L)
        = +2 points, <2.8 g/dL (<28 g/L) = +3 points
    3. INR: <1.7 = +1 point, 1.7-2.3 = +2 points, >2.3 = +3 points
    4. Ascites: Absent = +1 point, Slight = +2 points, Moderate = +3 points
    5. Encephalopathy: No Encephalopathy = +1 point, Grade 1-2 = +2 points,
        Grade 3-4 = +3 points

    The Child-Pugh Score is calculated by summing
    the points for each criterion.\n\n
    """

    explanation += "The current child pugh score is 0.\n"

    inr = input_variables['inr']

    ascites_state = input_variables.get('ascites', 'Absent')
    encephalopathy_state = input_variables.get(
        'encephalopathy', 'No Encephalopathy'
    )

    explanation += f"The patient's INR is {inr}. "
    bilirubin_exp, bilirubin = conversion_explanation(
        input_variables['bilirubin'][0],
        'bilirubin',
        548.66,
        None,
        input_variables['bilirubin'][1],
        "mg/dL",
    )

    albumin_exp, albumin = conversion_explanation(
        input_variables['albumin'][0],
        'albumin',
        66500,
        None,
        input_variables['albumin'][1],
        "g/dL",
    )

    # INR score calculation
    if inr < 1.7:
        explanation += (
            f"Because the INR is less than 1.7, we add 1 to the score, "
            f"making the current total {cp_score} + 1 = {cp_score + 1}.\n"
        )
        cp_score += 1
    elif 1.7 <= inr <= 2.3:
        explanation += (
            f"Because the INR is between 1.7 and 2.3, "
            f"we add two to the score, making the current "
            f"total {cp_score} + 2 = {cp_score + 2}.\n"
        )
        cp_score += 2
    elif inr > 2.3:
        explanation += (
            f"Because the INR is greater than 2.3, we add three to the "
            f"score, making the current total"
            f" {cp_score} + 3 = {cp_score + 3}.\n"
        )
        cp_score += 3

    explanation += bilirubin_exp

    # Bilirubin score calculation
    if bilirubin < 2:
        explanation += (
            f"Because the Bilirubin concentration is less than 2 mg/dL, "
            f"we add 1 to the score, making the "
            f"current total {cp_score} + 1 = {cp_score + 1}.\n"
        )
        cp_score += 1
    elif 2 < bilirubin < 3:
        explanation += (
            f"Because the Bilirubin concentration is between 2 mg/dL and 3 "
            f"mg/dL, we add 2 to the score, "
            f"making the current total {cp_score} + 2 = {cp_score + 2}.\n"
        )
        cp_score += 2
    elif bilirubin >= 3:
        explanation += (
            f"Because the Bilirubin concentration is greater than 3 mg/dL, "
            f"we add 3 to the score, "
            f"making the current total {cp_score} + 3 = {cp_score + 3}.\n"
        )
        cp_score += 3

    explanation += albumin_exp

    # Albumin score calculation
    if albumin > 3.5:
        explanation += (
            f"Because the Albumin concentration is greater than 3.5 g/dL, "
            f"we add 1 to the score, "
            f"making the current total {cp_score} + 1 = {cp_score + 1}.\n"
        )
        cp_score += 1
    elif 2.8 < albumin <= 3.5:
        explanation += (
            f"Because the Albumin concentration is between 2.8 g/dL and 3.5 "
            f"g/dL, we add 2 to the score, "
            f"making the current total {cp_score} + 2 = {cp_score + 2}.\n"
        )
        cp_score += 2
    elif albumin <= 2.8:
        explanation += (
            f"Because the Albumin concentration is less than 2.8 g/dL, "
            f"we add 3 to the score, making the "
            f"current total {cp_score} + 3 = {cp_score + 3}.\n"
        )
        cp_score += 3

    # Ascites score calculation
    if 'ascites' in input_variables:
        if input_variables['ascites'] == 'Absent':
            explanation += (
                f"Ascites is reported to be 'absent' and so we add 1 point "
                f"to the score, making the "
                f"current total {cp_score} + 1 = {cp_score + 1}.\n"
            )
            cp_score += 1
        elif ascites_state == 'Slight':
            explanation += (
                f"Ascites is reported to be 'slight' and so we add 2 points "
                f"to the score, making the "
                f"current total {cp_score} + 2 = {cp_score + 2}.\n"
            )
            cp_score += 2
        elif ascites_state == 'Moderate':
            explanation += (
                f"Ascites is reported to be 'moderate' and so we add 3 "
                f"points to the score, making the "
                f"current total {cp_score} + 3 = {cp_score + 3}.\n"
            )
            cp_score += 3
    else:
        explanation += (
            f"The Ascites state not specified, assuming and so we will "
            f"assume it to be absent. This means "
            f"we add 1 point to the score, making the current total"
            f" {cp_score} + 1 = {cp_score + 1}.\n"
        )
        cp_score += 1

    if 'encephalopathy' in input_variables:
        # Encephalopathy score calculation
        if encephalopathy_state == 'No Encephalopathy':
            explanation += (
                f"Encephalopathy state is reported to be "
                f"'no encephalopathy' and so we add one point to "
                f"the score, making the current total {cp_score} + 1 = "
                f"{cp_score + 1}.\n"
            )
            cp_score += 1
        elif encephalopathy_state == 'Grade 1-2':
            explanation += (
                f"Encephalopathy state is 'Grade 1-2 encephalopathy' and so "
                f"we add two points to the score, making the current total"
                f" {cp_score} + 2 = {cp_score + 2}.\n"
            )
            cp_score += 2
        elif encephalopathy_state == 'Grade 3-4':
            explanation += (
                f"Encephalopathy state is 'Grade 3-4 encephalopathy' and so "
                f"we add three points to the score, making the current total"
                f" {cp_score} + 3 = {cp_score + 3}.\n"
            )
            cp_score += 3
    else:
        explanation += (
            f"Encephalopathy state is not specified, and so we assume it's "
            f"value to be 'no encephalopathy.' We add one point to the "
            f"score, making the current total {cp_score} + 1 = "
            f"{cp_score + 1}.\n"
        )
        cp_score += 1

    explanation += f"The patient's child pugh score is {cp_score}.\n"

    return {"Explanation": explanation, "Answer": cp_score}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            "bilirubin": (2.8, "mg/dL"),
            "albumin": (2.1, "g/dL"),
            "inr": 1.5,
            "ascites": "Absent",
            "encephalopathy": "Grade 1-2",
        }
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = compute_child_pugh_score_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:bmi_calculator.py
"""
 below is the content of bmi_calculator.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function bmi_calculator_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench.utils.height_conversion import (
    height_conversion_explanation,
)
from camel.toolkits.medcalc_bench.utils.rounding import round_number
from camel.toolkits.medcalc_bench.utils.weight_conversion import (
    weight_conversion_explanation,
)


def bmi_calculator_explanation(input_variables):
    r"""
    Calculates the patient's BMI and generates a detailed explanatory text.

    Parameters:
        input_variables (dict): A dictionary containing the following
        key-value pairs:
            - "weight" (tuple): The patient's weight information in the
            format (value, unit).
                - Value (float): The numerical weight measurement.
                - Unit (str): The unit of weight, which can be "lbs" (
                pounds), "g" (grams), or "kg" (kilograms).
            - "height" (tuple): The patient's height information in the
            format (value, unit).
                - Value (float): The numerical height measurement.
                - Unit (str): The unit of height, which can be "cm" (
                centimeters) or "in" (inches).

    Returns:
        dict: Contains two key-value pairs:
            - "Explanation" (str): A detailed description of
            the calculation process.
            - "Answer" (float): The patient's BMI.

    Notes:
        - Uses the `height_conversion_explanation` function to convert
        height to inches.
        - Uses the `weight_conversion_explanation` function to convert
        weight to kilogram.

    Example:
        bmi_calculator_explanation({"weight": (150, "lbs"), "height": (170,
        "cm")})

        output: "{'Explanation': "The formula for computing the patient's
        BMI is (weight)/(height * height), where weight is the patient's
        weight in kg and height is the patient's height in m. \nThe
        patient's height is 170 cm, which is 170 cm * 1 m / 100 cm = 1.7 m.
        The patient's weight is 150 lbs so this converts to 150 lbs *
        0.453592 kg/lbs = 68.039 kg. The patient's bmi is therefore 68.039
        kg / (1.7 m * 1.7 m) = 23.543 kg/m^2.", 'Answer': 23.543}"
    """

    height_explanation, height = height_conversion_explanation(
        input_variables["height"]
    )
    weight_explanation, weight = weight_conversion_explanation(
        input_variables["weight"]
    )

    output = (
        "The formula for computing the patient's BMI is (weight)/(height * "
        "height), where weight is the patient's weight in kg and height is "
        "the patient's height in m.\n"
    )

    output += height_explanation
    output += weight_explanation
    ans = round_number(weight / (height * height))
    output += (
        f"The patient's bmi is therefore {weight} kg / ({height} m * "
        f"{height} m) = {ans} kg/m^2."
    )

    return {"Explanation": output, "Answer": ans}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            "weight": (150, "lbs"),  # weight 150 lbs
            "height": (170, "cm"),  # height 170 cm
        }
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = bmi_calculator_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:fibrosis_4.py
"""
 below is the content of fibrosis_4.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function compute_fib4_explanation
- translation

Date: March 2025
"""

import math

from camel.toolkits.medcalc_bench.utils.age_conversion import (
    age_conversion_explanation,
)
from camel.toolkits.medcalc_bench.utils.rounding import round_number
from camel.toolkits.medcalc_bench.utils.unit_converter_new import (
    convert_to_units_per_liter_explanation,
)


def compute_fib4_explanation(input_parameters):
    r"""
    Calculates the patient's Fibrosis-4 (FIB-4) index and generates a
    detailed explanatory text.

    Parameters:
        input_parameters (dict): A dictionary containing the following
        key-value pairs:
            - "age" (tuple): The patient's albumin concentration in the
            format (value, unit).
                - Value (float): Age.
                - Unit (str): The unit can be "months", "years".
            - "alt" (tuple): The patient's Alanine aminotransferase in the
            format (value, unit).
                - Value (float): The value of Alanine aminotransferase.
                - Unit (str): The unit of Alanine aminotransferase,
                eg. "U/L" and so on.
            - "ast" (tuple): The patient's Aspartate aminotransferase in the
            format (value, unit).
                - Value (float): The value of Aspartate aminotransferase.
                - Unit (str): The unit of Aspartate aminotransferase,
                e.g. "U/L" and so on.
            - "platelet_count" (tuple): The patient's platelet count in the
            format (value, unit).
                - Value (float): The value of platelet count.
                - Unit (str): The unit of platelet count,
                e.g. "µL" and so on.

    Returns:
        dict: Contains two key-value pairs:
            - "Explanation" (str): A detailed description of
            the calculation process.
            - "Answer" (float): The patient's Fibrosis-4 (FIB-4) index.

    Notes:
        - None

    Example:
        compute_homa_ir_explanation({'age': (17, 'years'),
        'alt': (144.0, 'U/L'),
        'ast': (108.0, 'U/L'),
        'platelet_count': (277000.0, 'µL')})

        output: "{'Explanation': "The formula for computing Fibrosis-4 is
        Fib-4 = (Age * AST) / (Platelet count (in billions) * √ALT),
        where platelet count is the number of billions per L, and the units
        for AST and ALT are both U/L.\nThe patient's concentration of
        AST is 108.0 U/L.\nThe patient's concentration of ALT is 144.0
        U/L.\nThe patient's concentration of platelets is 277000.0 count/µL.
        To convert 277000.0 count/µL of platelets to L,
        multiply by the conversion factor 1000000.0 µL/L which
        will give 277000.0 platelets count/µL * 1000000.0 µL/L =
        277000000000.0 platelets count/L. This means that there
        are 277000000000.0/(10^9) = 277.0 billion platelet counts
        per liter.\nPlugging these values into the formula,
        we get (17 * 108.0)/(277.0 * sqrt(144.0)) = 0.552.
        \nHence, the Fibrosis-4 score is 0.552.", 'Answer': 0.552}"
    """

    explanation = ""

    age_explanation, age = age_conversion_explanation(input_parameters["age"])
    explanation += age_explanation

    ast_value = input_parameters["ast"][0]
    alt_value = input_parameters["alt"][0]
    src_value = input_parameters["platelet_count"][0]
    src_unit = input_parameters["platelet_count"][1]
    explanation = (
        "The formula for computing Fibrosis-4 is Fib-4 = (Age * "
        "AST) / (Platelet count (in billions) * √ALT), "
        "where platelet count is the number of billions per L, "
        "and the units for AST and ALT are both U/L.\n"
    )

    explanation_platelet, platelet_value = (
        convert_to_units_per_liter_explanation(
            src_value, src_unit, "platelets", "L"
        )
    )

    count_platelet_billions = platelet_value / 1e9
    result = round_number(
        (age * ast_value) / (count_platelet_billions * math.sqrt(alt_value))
    )

    explanation += f"The patient's concentration of AST is {ast_value} U/L.\n"
    explanation += f"The patient's concentration of ALT is {alt_value} U/L.\n"

    explanation += (
        f"{explanation_platelet}This means that there are "
        f"{platelet_value}/(10^9) = {count_platelet_billions} "
        f"billion platelet counts per liter.\n"
    )
    explanation += (
        f"Plugging these values into the formula, "
        f"we get ({age} * {ast_value})/"
        f"({count_platelet_billions} * "
        f"sqrt({alt_value})) = {result}.\n"
    )
    explanation += f"Hence, the Fibrosis-4 score is {result}."

    return {"Explanation": explanation, "Answer": result}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            "age": (17, 'years'),
            "alt": (144.0, 'U/L'),
            "ast": (108.0, 'U/L'),
            "platelet_count": (277000.0, 'µL'),
        }
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = compute_fib4_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:cardiac_risk_index.py
"""
 below is the content of cardiac_risk_index.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function compute_cardiac_index_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench.utils.unit_converter_new import (
    conversion_explanation,
)


def compute_cardiac_index_explanation(input_variables):
    r"""
    Calculates the patient's cardiac index and generates a detailed
    explanatory text.

    Parameters:
        input_variables (dict): A dictionary containing the following
        key-value pairs:
            - "elevated_risk_surgery" (boolean): Elevated-risk surgery (
            intraperitoneal, intrathoracic, or suprainguinal vascular).
            - "ischemetic_heart_disease" (boolean): History of ischemic
            heart disease (history of myocardial infarction, positive
            exercise test, current chest pain due to myocardial ischemia,
            use of nitrate therapy, or ECG with pathological Q waves).
            - "congestive_heart_failure" (boolean): History of congestive
            heart failure (pulmonary edema, bilateral rales or S3 gallop,
            paroxysmal nocturnal dyspnea, or chest x-ray showing pulmonary
            vascular redistribution).
            - "cerebrovascular_disease" (boolean): History of
            cerebrovascular disease (prior transient ischemic
            attack or stroke).
            - "pre_operative_insulin_treatment" (boolean): Pre-operative
            treatment with insulin.
            - "pre_operative_creatinine" (tuple): The patient's
            pre-operative creatinine information in the format (value, unit).
                - Value (float): The value of pre-operative creatinine.
                - Unit (str): The unit of creatinine,
                which can be "mg/dL", "μmol/L", and so on.

    Returns:
        dict: Contains two key-value pairs:
            - "Explanation" (str): A detailed description of
            the calculation process.
            - "Answer" (float): The patient's cardiac index.

    Notes:
        - None

    Example:
        compute_cardiac_index_explanation({
            "elevated_risk_surgery": False,
            "ischemetic_heart_disease": False,
            "congestive_heart_failure": False,
            "cerebrovascular_disease": False,
            "pre_operative_insulin_treatment": False,
            "pre_operative_creatinine": (1.0, "mg/dL"),
        })

        output: "{'Explanation': "\n    The criteria for the Revised Cardiac
        Risk Index (RCRI) are listed below:\n    \n       1. Elevated-risk
        surgery (intraperitoneal, intrathoracic, \n       or suprainguinal
        vascular): No = 0 points, Yes = +1 point\n       2. History of
        ischemic heart disease (history of myocardial \n       infarction,
        positive exercise test, current chest pain due to \n
        myocardial ischemia, use of nitrate therapy, or ECG with pathological
        \n       Q waves): No = 0 points, Yes = +1 point\n       3. History
        of congestive heart failure (pulmonary edema, bilateral \n
        rales or S3 gallop, paroxysmal nocturnal dyspnea, or chest x-ray
        \n       showing pulmonary vascular redistribution): \n       No = 0
        points, Yes = +1 point\n       4. History of cerebrovascular disease
        (prior transient ischemic \n       attack or stroke): No = 0 points,
        Yes = +1 point\n       5. Pre-operative treatment with insulin: No = 0
        points, Yes = +1 point\n       6. Pre-operative creatinine >2 mg/dL
        (176.8 μmol/L): No = 0 points, \n       Yes = +1 point\n    \n    The
        total score is calculated by summing the points for each criterion.\n
        \n\n    The current cardiac risk index is 0.\nThe patient note reports
        elevated risk surgery as 'absent' for the patient. This means that the
        total score remains unchanged at 0.\nThe patient note reports
        ischemetic heart disease as 'absent' for the patient. This means that
        the total score remains unchanged at 0.\nThe patient note reports
        congestive heart failure as 'absent' for the patient. This means that
        the total score remains unchanged at 0.\nThe patient note reports
        cerebrovascular disease as 'absent' for the patient. This means that
        the total score remains unchanged at 0.\nThe patient note reports
        pre-operative insulin treatment as 'absent' for the patient. This
        means that the total score remains unchanged at 0.\nThe concentration
        of Pre-Operative Creatinine is 1.0 mg/dL. The patient has pre-operative
         creatinine <= 2 mg/dL, so we keep the score the same at 0.\n\nThe
         cardiac risk index score is 0.\n", 'Answer': 0}"
    """

    # List of parameters and their default values
    parameters = {
        'elevated_risk_surgery': "elevated risk surgery",
        'ischemetic_heart_disease': "ischemetic heart disease",
        'congestive_heart_failure': "congestive heart failure",
        'cerebrovascular_disease': "cerebrovascular disease",
        'pre_operative_insulin_treatment': "pre-operative insulin treatment",
        'pre_operative_creatinine': "pre-operative creatinine",
    }

    output = """
    The criteria for the Revised Cardiac Risk Index (RCRI) are listed below:
    
       1. Elevated-risk surgery (intraperitoneal, intrathoracic, 
       or suprainguinal vascular): No = 0 points, Yes = +1 point
       2. History of ischemic heart disease (history of myocardial 
       infarction, positive exercise test, current chest pain due to 
       myocardial ischemia, use of nitrate therapy, or ECG with pathological 
       Q waves): No = 0 points, Yes = +1 point
       3. History of congestive heart failure (pulmonary edema, bilateral 
       rales or S3 gallop, paroxysmal nocturnal dyspnea, or chest x-ray 
       showing pulmonary vascular redistribution): 
       No = 0 points, Yes = +1 point
       4. History of cerebrovascular disease (prior transient ischemic 
       attack or stroke): No = 0 points, Yes = +1 point
       5. Pre-operative treatment with insulin: No = 0 points, Yes = +1 point
       6. Pre-operative creatinine >2 mg/dL (176.8 μmol/L): No = 0 points, 
       Yes = +1 point
    
    The total score is calculated by summing the points for each criterion.\n\n
    """

    # Initializing scores and output explanation
    cri = 0
    output += "The current cardiac risk index is 0.\n"

    for param_name, full_name in parameters.items():
        param_value = input_variables.get(param_name)

        # If parameter is missing, assume it as False
        if param_value is None:
            output += (
                f"The patient note does not mention about {full_name} "
                f"and is assumed to be absent. "
            )
            input_variables[param_name] = False
            param_value = False
        elif param_name != 'pre_operative_creatinine':
            value = 'absent' if not param_value else 'present'
            output += (
                f"The patient note reports {full_name} as '{value}' "
                f"for the patient. "
            )
        elif param_name == 'pre_operative_creatinine':
            explanation, param_value = conversion_explanation(
                param_value[0],
                "Pre-Operative Creatinine",
                113.12,
                None,
                param_value[1],
                "mg/dL",
            )
            input_variables['pre_operative_creatinine'] = [
                param_value,
                "mg/dL",
            ]
            output += explanation

        if param_name == 'pre_operative_creatinine':
            if param_value > 2:
                output += (
                    f"The patient has pre-operative creatinine > 2 "
                    f"mg/dL, so we increment the score by one and the "
                    f"current total will be {cri} + 1 = {cri + 1}.\n"
                )
                cri += 1
            else:
                output += (
                    f"The patient has pre-operative creatinine <= 2 "
                    f"mg/dL, so we keep the score the same at {cri}.\n"
                )
            continue

        if param_value:
            output += (
                f"This means that we increment the score by one and "
                f"the current total will be {cri} + 1 = {cri + 1}.\n"
            )
            cri += 1
        else:
            output += (
                f"This means that the total score "
                f"remains unchanged at {cri}.\n"
            )

    output += f"\nThe cardiac risk index score is {cri}.\n"

    return {"Explanation": output, "Answer": cri}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            "elevated_risk_surgery": False,
            "ischemetic_heart_disease": False,
            "congestive_heart_failure": False,
            "cerebrovascular_disease": False,
            "pre_operative_insulin_treatment": False,
            "pre_operative_creatinine": (1.0, "mg/dL"),
        }
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = compute_cardiac_index_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:qt_calculator_hodges.py
"""
 below is the content of qt_calculator_hodges.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function hodges_calculator_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench.utils.rounding import round_number


def hodges_calculator_explanation(input_variables):
    r"""
    Calculates the patient's corrected QT interval and generates a detailed
    explanatory text.

    Parameters:
        input_variables (dict): A dictionary containing the following
        key-value pairs:
            - "heart_rate" (tuple): The patient's heart rate in the format (
            value, unit).
                - Value (float): The value of the patient's heart rate.
                - Unit (str): The unit of heart rate should be "beats per
                minute".
            - "qt_interval" (tuple): The QT interval of 330 msec.
                - Value (float): The value of QT interval.
                - Unit (str): The unit of QT interval, "msec".

    Returns:
        dict: Contains two key-value pairs:
            - "Explanation" (str): A detailed description of
            the calculation process.
            - "Answer" (float): The patient's corrected QT interval.

    Notes:
        - None

    Example:
        hodges_calculator_explanation({"heart_rate": (52, "beats per
        minute"),"qt_interval": (330, "msec")})

        output: "{'Explanation': "The corrected QT interval using the Hodges
        formula is computed as QTc = QT interval + 1.75 * [(60
        /rr_interval_sec) - 60], where QT interval is in msec, and RR
        interval is given as 60/(heart rate).\nThe patient's heart rate is
        52 beats per minute. \nThe QT interval is 330 msec.\nThe RR
        interval is computed as 60/(heart rate), and so the RR interval is
        60/52 = 1.154.\nHence, plugging in these values, we will get 330 +
        1.75 * [(60/1.154) - 60] = 315.988. \nThe patient's corrected QT
        interval (QTc) is 315.988 msec.\n", 'Answer': 315.988}"
    """

    heart_rate = input_variables["heart_rate"][0]
    qt_interval = input_variables["qt_interval"][0]

    explanation = (
        "The corrected QT interval using the Hodges formula is computed as "
        "QTc = QT interval + 1.75 * [(60 /rr_interval_sec) - 60], "
        "where QT interval is in msec, and RR interval is "
        "given as 60/(heart rate).\n"
    )

    explanation += (
        f"The patient's heart rate is {heart_rate} beats per minute.\n"
    )
    explanation += f"The QT interval is {qt_interval} msec.\n"

    rr_interval_sec = round_number(60 / heart_rate)
    explanation += (
        f"The RR interval is computed as 60/(heart rate), "
        f"and so the RR interval is 60/{heart_rate} = {rr_interval_sec}.\n"
    )

    qt_c = round_number(qt_interval + 1.75 * ((60 / rr_interval_sec) - 60))
    explanation += (
        f"Hence, plugging in these values, we will get {qt_interval} + 1.75 "
        f"* [(60/{rr_interval_sec}) - 60] = {qt_c}.\n"
    )

    explanation += (
        f"The patient's corrected QT interval (QTc) is {qt_c} msec.\n"
    )

    return {"Explanation": explanation, "Answer": qt_c}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            "heart_rate": (52, "beats per minute"),
            "qt_interval": (330, "msec"),
        },
        {
            "heart_rate": (148, "beats per minute"),
            "qt_interval": (330, "msec"),
        },
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = hodges_calculator_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:qt_calculator_bazett.py
"""
 below is the content of qt_calculator_bazett.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function bazett_calculator_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench.utils.rounding import round_number


def bazett_calculator_explanation(input_variables):
    r"""
    Calculates the patient's corrected QT interval using the Bazett Formula
    and generates a detailed explanatory text.

    Parameters:
        input_variables (dict): A dictionary containing the following
        key-value pairs:
            - "heart_rate" (tuple): The patient's heart rate in the format (
            value, unit).
                - Value (float): The value of the patient's heart rate.
                - Unit (str): The unit of heart rate should be "beats per
                minute".
            - "qt_interval" (tuple): The QT interval of 330 msec.
                - Value (float): The value of QT interval.
                - Unit (str): The unit of QT interval, "msec".

    Returns:
        dict: Contains two key-value pairs:
            - "Explanation" (str): A detailed description of
            the calculation process.
            - "Answer" (float): The patient's corrected QT interval using
            the Bazett Formula.

    Notes:
        - None

    Example:
        bazett_calculator_explanation({"heart_rate": (176, "beats per
        minute"),"qt_interval": (330, "msec"),})

        output: "{'Explanation': "The corrected QT interval using the
        Bazett formula is computed as QTc = QT interval / √ (RR interval),
        where the QT interval is in msec, and RR interval is given as 60/(
        heart rate).\nThe patient's heart rate is 176 beats per minute.
        \nThe QT interval is 330 msec.\nThe RR interval is computed as 60/(
        heart rate), and so the RR interval is 60/176 = 0.341.\nHence,
        plugging in these values, we will get 330/√(0.341) = 565.115.
        \nThe patient's corrected QT interval (QTc) is 565.115 msec. ",
        'Answer': 565.115}"
    """

    heart_rate = input_variables["heart_rate"][0]
    qt_interval = input_variables["qt_interval"][0]

    explanation = (
        "The corrected QT interval using the Bazett formula is computed as "
        "QTc = QT interval / √ (RR interval), where the QT interval is in "
        "msec, and RR interval is given as 60/(heart rate).\n"
    )

    explanation += (
        f"The patient's heart rate is {heart_rate} beats per minute.\n"
    )
    explanation += f"The QT interval is {qt_interval} msec.\n"

    rr_interval_sec = round_number(60 / heart_rate)
    explanation += (
        f"The RR interval is computed as 60/(heart rate), "
        f"and so the RR interval is 60/{heart_rate} = {rr_interval_sec}.\n"
    )

    qt_c = round_number(qt_interval / (rr_interval_sec**0.5))
    explanation += (
        f"Hence, plugging in these values, we will get "
        f"{qt_interval}/√({rr_interval_sec}) = {qt_c}.\n"
    )

    explanation += (
        f"The patient's corrected QT interval (QTc) is {qt_c} msec. "
    )

    return {"Explanation": explanation, "Answer": qt_c}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            "heart_rate": (176, "beats per minute"),
            "qt_interval": (330, "msec"),
        },
        {
            "heart_rate": (150, "beats per minute"),
            "qt_interval": (330, "msec"),
        },
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = bazett_calculator_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:conception_date.py
"""
 below is the content of conception_date.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function add_2_weeks_explanation
- translation

Date: March 2025
"""

from datetime import datetime, timedelta


def add_2_weeks_explanation(input_data):
    r"""
    Calculates the patient's estimated conception date and generates a
    detailed explanatory text.

    Parameters:
        input_data (dict): A dictionary containing the following key-value
        pairs:
            - "cycle_length" (int): The cycle length of the patient's
            menstrual period.
            - "menstrual_date" (date): The patient's menstrual date in the
            format "%m/%d/%Y".

    Returns:
        dict: Contains two key-value pairs:
            - "Explanation" (str): A detailed description of
            the calculation process.
            - "Answer" (float): The patient's estimated conception date.

    Notes:
        - None

    Example:
        add_2_weeks_explanation({"cycle_length": 20, "menstrual_date":
        "01/21/2004"})

        output: "{'Explanation': "The patient's estimated date of
        conception based on their last period is computed by adding to 2
        weeks to the patient's last menstrual period date. The patient's
        last menstrual period was 01/21/2004.
        \nHence, the estimated date of conception after adding 2 weeks to
        the patient's last menstrual period date is 02/04/2004. \n",
        'Answer': '02/04/2004'}"
    """

    input_date_str = input_data["menstrual_date"]
    # cycle_length = input_data["cycle_length"]

    explanation = (
        "The patient's estimated date of conception based on their last "
        "period is computed by adding to 2 weeks to the patient's last "
        "menstrual period date. "
    )
    explanation += (
        f"The patient's last menstrual period was {input_date_str}. \n"
    )

    input_date = datetime.strptime(input_date_str, "%m/%d/%Y")
    future_date = input_date + timedelta(weeks=2)

    explanation += (
        f"Hence, the estimated date of conception after adding 2 weeks "
        f"to the patient's last menstrual period date is "
        f"{future_date.strftime('%m/%d/%Y')}. \n"
    )

    return {
        "Explanation": explanation,
        "Answer": future_date.strftime('%m/%d/%Y'),
    }


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            "cycle_length": 20,
            "menstrual_date": "01/21/2004",
        },
        {
            "cycle_length": 25,
            "menstrual_date": "11/06/2005",
        },
    ]

    # {'cycle length': 20, 'Last menstrual date': '01/21/2004'}
    # {'cycle length': 25, 'Last menstrual date': '11/06/2005'}

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = add_2_weeks_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:free_water_deficit.py
"""
 below is the content of free_water_deficit.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function free_water_deficit_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench.utils.age_conversion import (
    age_conversion_explanation,
)
from camel.toolkits.medcalc_bench.utils.rounding import round_number
from camel.toolkits.medcalc_bench.utils.unit_converter_new import (
    conversion_explanation,
)
from camel.toolkits.medcalc_bench.utils.weight_conversion import (
    weight_conversion_explanation,
)


def free_water_deficit_explanation(input_variables):
    r"""
    Calculates the patient's LDL cholestrol concentration and generates a
    detailed explanatory text.

    Parameters:
        input_variables (dict): A dictionary containing the following
        key-value pairs:
            - "sex" (str): The patient's gender, which can be either "Male"
            or "Female".
            - "age" (array): The patient's albumin concentration in the
            format (value, unit).
                - Value (float): Age.
                - Unit (str): The unit can be "months", "years".
            - "weight" (tuple): The patient's weight information in the
            format (value, unit).
                - Value (float): The numerical weight measurement.
                - Unit (str): The unit of weight, which can be "lbs" (
                pounds), "g" (grams), or "kg" (kilograms).
            - "sodium" (array): The patient's bicarbonate level in the
            format (value, unit).
                - Value (float): The value of bicarbonate level.
                - Unit (str): The unit of bicarbonate level, eg. "mmol/L",
                "mEq/L", and so on.

    Returns:
        dict: Contains two key-value pairs:
            - "Explanation" (str): A detailed description of
            the calculation process.
            - "Answer" (float): The patient's LDL cholestrol concentration.

    Notes:
        - None

    Example:
        free_water_deficit_explanation({'sex': 'Female',
        'age': [17, 'years'],
        'weight': [63.0, 'kg'],
        'sodium': [141.0, 'mEq/L']})

        output: "{'Explanation': "The formula for computing the free water
        deficit is (total body water percentage) * (weight) * (sodium/140 -
        1), where the total body water percentage is a percentage expressed
        as a decimal, weight is in kg, and the sodium concentration is in
        mmol/L.\nThe patient's total body weight percentage is based on the
        patient's age and gender.\nThe patient is 17 years old. The
        patient's is a Female.\nThe patient is less than 18 years old and
        so the patient is a child. This means total body water percentage
        value is 0.6.\nThe patient's weight is 63.0 kg. The concentration
        of sodium is 141.0 mEq/L. We need to convert the concentration to
        mmol/L. Let's first convert the mass of sodium from mEq to mmol.
        The mass of sodium is 141.0 mEq. To convert from 141.0 mEq to mmol,
        convert from mEq to mmol. The compound 141.0 has a valence of 1,
        and so divide the valence by the value of mEq to get, 141.0 mEq/(1
        mEq/mmol) = 141.0 mmol sodium. The volume units is L so no volume
        conversion is needed. Hence, the concentration value of 141.0 mEq
        sodium/L converts to 141.0 mmol sodium/L. Plugging in these values
        into the equation, we get 0.6 * 63.0 * (141.0/140 - 1) = 0.27 L.
        The patient's free body water deficit is 0.27 L.\n",
        'Answer': 0.27}"
    """

    explanation = ""

    explanation += (
        "The formula for computing the free water deficit is "
        "(total body water percentage) * (weight) * (sodium/140 - 1), "
        "where the total body water percentage is a percentage expressed as "
        "a decimal, weight is in kg, and the sodium concentration is in "
        "mmol/L.\n"
    )

    age_exp, age = age_conversion_explanation(input_variables["age"])
    gender = input_variables["sex"]

    explanation += (
        "The patient's total body weight percentage is based on "
        "the patient's age and gender.\n"
    )
    explanation += age_exp
    explanation += f"The patient's is a {gender}.\n"

    if 0 <= age < 18:
        tbw = 0.6
        explanation += (
            "The patient is less than 18 years old and so the patient is a "
            "child. This means total body water percentage value is 0.6.\n"
        )
    elif 18 <= age < 65 and gender == "Male":
        tbw = 0.6
        explanation += (
            "The patient's age is between 18 and 64 and "
            "so the patient is an adult. For adult male's the total body "
            "water percentage value is 0.60.\n"
        )
    elif 18 <= age < 65 and gender == "Female":
        tbw = 0.5
        explanation += (
            "The patient's age is between 18 and 64 and "
            "so the patient is an adult. For adult female's the total body "
            "water percentage value is 0.50.\n"
        )
    elif age >= 65 and gender == "Male":
        tbw = 0.5
        explanation += (
            "The patient's age is greater than 64 years and so the patient "
            "is considered elderly. For elderly male's, "
            "the total body water percentage value is 0.50.\n"
        )
    elif age >= 65 and gender == "Female":
        tbw = 0.45
        explanation += (
            "The patient's age is greater than 64 years and so the patient "
            "is considered elderly. For elderly female's, the total body "
            "water percentage value is 0.45.\n"
        )

    weight_exp, weight = weight_conversion_explanation(
        input_variables["weight"]
    )
    explanation += weight_exp

    sodium_exp, sodium = conversion_explanation(
        input_variables["sodium"][0],
        "sodium",
        22.99,
        1,
        input_variables["sodium"][1],
        "mmol/L",
    )
    explanation += sodium_exp

    answer = round_number(tbw * weight * (sodium / 140 - 1))

    explanation += (
        f"Plugging in these values into the equation, "
        f"we get {tbw} * {weight} * ({sodium}/140 - 1) = {answer} L. "
    )
    explanation += f"The patient's free body water deficit is {answer} L.\n"

    return {"Explanation": explanation, "Answer": answer}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            'sex': 'Female',
            'age': [32, 'years'],
            'weight': [33.0, 'lbs'],
            'sodium': [134.0, 'mmol/L'],
        },
        {
            'sex': 'Female',
            'age': [17, 'years'],
            'weight': [63.0, 'kg'],
            'sodium': [141.0, 'mEq/L'],
        },
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = free_water_deficit_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:bsa_calculator.py
"""
 below is the content of bsa_calculator.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function bsa_calculator_explaination
- translation

Date: March 2025
"""

import math

from camel.toolkits.medcalc_bench.utils.height_conversion import (
    height_conversion_explanation_cm,
)
from camel.toolkits.medcalc_bench.utils.rounding import round_number
from camel.toolkits.medcalc_bench.utils.weight_conversion import (
    weight_conversion_explanation,
)


def bsa_calculator_explaination(input_variables):
    r"""
    Calculates the patient's Body Surface Area and generates a detailed
    explanatory text.

    Parameters:
        input_variables (dict): A dictionary containing the following
        key-value pairs:
            - "weight" (tuple): The patient's weight information in the
            format (value, unit).
                - Value (float): The numerical weight measurement.
                - Unit (str): The unit of weight, which can be "lbs" (
                pounds), "g" (grams), or "kg" (kilograms).
            - "height" (tuple): The patient's height information in the
            format (value, unit).
                - Value (float): The numerical height measurement.
                - Unit (str): The unit of height, which can be "cm" (
                centimeters) or "in" (inches).

    Returns:
        dict: Contains two key-value pairs:
            - "Explanation" (str): A detailed description of
            the calculation process.
            - "Answer" (float): The patient's Body Surface Area.

    Notes:
        - Uses the `height_conversion_explanation_cm` function to convert
        height to cm.
        - Uses the `weight_conversion_explanation` function to convert
        weight to kilogram.

    Example:
        bsa_calculator_explaination({'weight': [58.0, 'kg'], 'height': [
        179.0, 'cm']})

        output: "{'Explanation': "For the body surface area computation,
        the formula is sqrt((weight (in kgs) * height (in cm))/3600,
        where the units of weight is in kg and the units of height is in
        cm.\nThe patient's height is 179.0 cm. \nThe patient's weight is
        58.0 kg. \nTherefore, the patient's bsa is sqrt((58.0 (in kgs) *
        179.0 (in cm))/3600) = 1.698 m^2.", 'Answer': 1.698}"
    """

    height_explaination, height = height_conversion_explanation_cm(
        input_variables["height"]
    )
    weight_explanation, weight = weight_conversion_explanation(
        input_variables["weight"]
    )

    output = (
        "For the body surface area computation, the formula is sqrt((weight "
        "(in kgs) * height (in cm))/3600, where the units of weight is "
        "in kg and the units of height is in cm.\n"
    )

    output += height_explaination + "\n"
    output += weight_explanation + "\n"

    answer = round_number(math.sqrt(weight * height / 3600))
    output += (
        f"Therefore, the patient's bsa is sqrt(({weight} (in kgs) * "
        f"{height} (in cm))/3600) = {answer} m^2."
    )

    return {"Explanation": output, "Answer": answer}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            "weight": (58.0, "kg"),
            "height": (179.0, "cm"),
        }
    ]

    # {'weight': [58.0, 'kg'], 'height': [179.0, 'cm']}

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = bsa_calculator_explaination(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:ldl_calculated.py
"""
 below is the content of ldl_calculated.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function compute_ldl_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench.utils.rounding import round_number
from camel.toolkits.medcalc_bench.utils.unit_converter_new import (
    conversion_explanation,
)


def compute_ldl_explanation(input_parameters):
    r"""
    Calculates the patient's LDL cholestrol concentration and generates a
    detailed explanatory text.

    Parameters:
        input_parameters (dict): A dictionary containing the following
        key-value pairs:
            - "hdl_cholestrol" (tuple): The concentration of HDL cholestrol
            in the format (value, unit).
                - Value (float): The value of HDL cholestrol.
                - Unit (str): The unit of HDL cholestrol, eg. "µIU/mL",
                "pmol/L", and so on.
            - "triglycerides" (tuple): The concentration of triglycerides
            in the format (value, unit).
                - Value (float): The concentration of triglycerides.
                - Unit (str): The unit of triglycerides, eg. "mmol/L",
                "mEq/L", and so on.
            - "total_cholestrol" (tuple): The concentration of total
            cholestrol in the format (value, unit).
                - Value (float): The value of total cholestrol.
                - Unit (str): The unit of total cholestrol, eg. "mmol/L",
                "mEq/L", and so on.

    Returns:
        dict: Contains two key-value pairs:
            - "Explanation" (str): A detailed description of
            the calculation process.
            - "Answer" (float): The patient's LDL cholestrol concentration.

    Notes:
        - None

    Example:
        compute_homa_ir_explanation({"hdl_cholestrol": (37.0, 'mg/dL'),
        "triglycerides": (205.0, 'mg/dL'),
        "total_cholestrol": (210.0, 'mg/dL')})

        output: "{'Explanation': "To compute the patient's LDL cholestrol,
        apply the following formula: LDL cholesterol = total cholesterol -
        HDL - (triglycerides / 5), where the units for total cholestrol,
        HDL cholestrol, and triglycerides are all mg/dL.\nThe concentration
        of total cholestrol is 210.0 mg/dL. \nThe concentration of hdl
        cholestrol is 37.0 mg/dL. \nThe concentration of triglycerides is
        205.0 mg/dL. \nPlugging in these values will give us 210.0 mg/dL -
        37.0 mg/dL - (205.0/5) mg/dL = 132.0 mg/dL. \nThe patients
        concentration of LDL cholestrol is 132.0 mg/dL.\n", 'Answer': 132.0}"
    """

    explanation = (
        "To compute the patient's LDL cholestrol, apply the following "
        "formula: LDL cholesterol = total cholesterol - "
        "HDL - (triglycerides / 5), where the units for total cholestrol, "
        "HDL cholestrol, and triglycerides are all mg/dL.\n"
    )

    total_cholestrol_exp, total_cholestrol = conversion_explanation(
        input_parameters["total_cholestrol"][0],
        "total cholestrol",
        386.654,
        None,
        input_parameters["total_cholestrol"][1],
        "mg/dL",
    )
    hdl_cholestrol_exp, hdl_cholestrol = conversion_explanation(
        input_parameters["hdl_cholestrol"][0],
        "hdl cholestrol",
        386.654,
        None,
        input_parameters["hdl_cholestrol"][1],
        "mg/dL",
    )
    triglycerides_exp, triglycerides = conversion_explanation(
        input_parameters["triglycerides"][0],
        "triglycerides",
        861.338,
        None,
        input_parameters["triglycerides"][1],
        "mg/dL",
    )

    explanation += total_cholestrol_exp + '\n'
    explanation += hdl_cholestrol_exp + '\n'
    explanation += triglycerides_exp + '\n'

    answer = round_number(
        total_cholestrol - hdl_cholestrol - (triglycerides / 5)
    )

    explanation += (
        f"Plugging in these values will give us {total_cholestrol} mg/dL - "
        f"{hdl_cholestrol} mg/dL - ({triglycerides}/5) mg/dL = {answer} "
        f"mg/dL.\n"
    )

    explanation += (
        f"The patients concentration of LDL cholestrol is {answer} mg/dL.\n"
    )

    return {"Explanation": explanation, "Answer": answer}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            "hdl_cholestrol": (37.0, 'mg/dL'),
            "triglycerides": (205.0, 'mg/dL'),
            "total_cholestrol": (210.0, 'mg/dL'),
        },
        {
            "total_cholestrol": (165.0, 'mg/dL'),
            "triglycerides": (104.0, 'mg/dL'),
            "hdl_cholestrol": (50.0, 'mg/dL'),
        },
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = compute_ldl_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:qt_calculator_rautaharju.py
"""
 below is the content of qt_calculator_rautaharju.py
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function rautaharju_calculator_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench.utils.rounding import round_number


def rautaharju_calculator_explanation(input_variables):
    r"""
    Calculates the patient's corrected QT interval using the Fridericia
    Formula and generates a detailed explanatory
    text.

    Parameters:
        input_variables (dict): A dictionary containing the following
        key-value pairs:
            - "heart_rate" (tuple): The patient's heart rate in
            the format (value, unit).
                - Value (float): The value of the patient's heart rate.
                - Unit (str): The unit of heart rate should be "beats per
                minute".
            - "qt_interval" (tuple): The QT interval of 330 msec.
                - Value (float): The value of QT interval.
                - Unit (str): The unit of QT interval, "msec".

    Returns:
        dict: Contains two key-value pairs:
            - "Explanation" (str): A detailed description of
            the calculation process.
            - "Answer" (float): The patient's corrected QT interval using
            the Fridericia Formula.

    Notes:
        - None

    Example:
        rautaharju_calculator_explanation({"heart_rate": (110, "beats per
        minute"),"qt_interval": (330, "msec"),})

        output: "{'Explanation': "The corrected QT interval using the
        Rautajarju formula is computed as QTc = QT interval x (120 + HR) /
        180, where QT interval is in msec, and HR is the heart rate in
        beats per minute. \nThe QT interval is 330 msec.\nThe patient's
        heart rate is 110 beats per minute.\nHence, plugging in these
        values, we will get 330 x (120 + 110) / 180 = 421.667.\nThe
        patient's corrected QT interval (QTc) is 421.667 msec.\n",
        'Answer': 421.667}"
    """

    heart_rate = input_variables["heart_rate"][0]
    qt_interval = input_variables["qt_interval"][0]

    explanation = (
        "The corrected QT interval using the Rautajarju formula is computed "
        "as QTc = QT interval x (120 + HR) / 180, where QT interval is in "
        "msec, and HR is the heart rate in beats per minute.\n"
    )

    explanation += f"The QT interval is {qt_interval} msec.\n"
    explanation += (
        f"The patient's heart rate is {heart_rate} beats per minute.\n"
    )

    qt_c = round_number(qt_interval * (120 + heart_rate) / 180)

    explanation += (
        f"Hence, plugging in these values, we will get "
        f"{qt_interval} x (120 + {heart_rate}) / 180 = {qt_c}.\n"
    )
    explanation += (
        f"The patient's corrected QT interval (QTc) is {qt_c} msec.\n"
    )

    return {"Explanation": explanation, "Answer": qt_c}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            "heart_rate": (110, "beats per minute"),
            "qt_interval": (330, "msec"),
        },
        {
            "heart_rate": (57, "beats per minute"),
            "qt_interval": (330, "msec"),
        },
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = rautaharju_calculator_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:maintenance_fluid_calc.py
"""
 below is the content of maintenance_fluid_calc.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function maintenance_fluid_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench.utils.rounding import round_number
from camel.toolkits.medcalc_bench.utils.weight_conversion import (
    weight_conversion_explanation,
)


def maintenance_fluid_explanation(input_parameters):
    r"""
    Calculates the patient's maintenance fluid in mL/hr and
    generates a detailed explanatory text.

    Parameters:
        input_parameters (dict): A dictionary containing the following
        key-value pairs:
            - "weight" (tuple): The patient's weight information in the
            format (value, unit).
                - Value (float): The numerical weight measurement.
                - Unit (str): The unit of weight, which can be "lbs"
                (pounds), "g" (grams), or "kg" (kilograms).

    Returns:
        dict: Contains two key-value pairs:
            - "Explanation" (str): A detailed description of
            the calculation process.
            - "Answer" (float): The patient's maintenance fluid in mL/hr.

    Notes:
        - Uses the `weight_conversion_explanation` function to convert
        weight to kilogram.

    Example:
        maintenance_fluid_explanation(
        {
            "weight": (12.0, "kg"),  # weight 150 lbs
        })

        output: "{'Explanation': "The patient's weight is 12.0 kg. For
        patient's whose weight is in between 10 kg and 20 kg, the formula
        for computing maintenance fluid is 40 mL/hr + 2 mL/kg/hr * (weight (
        in kilograms) - 10 kilograms). Hence, plugging into this formula,
        we get 40 mL/hr + 2 mL/kg/hr * (12.0 kg - 10 kg) = 44.0
        mL/hr.\nHence, the patient's fluid maintenance is 44.0 mL/hr.\n",
        'Answer': 44.0}"
    """

    weight_exp, weight = weight_conversion_explanation(
        input_parameters["weight"]
    )

    explanation = ""

    explanation += weight_exp

    if weight < 10:
        answer = round_number(weight * 4)
        explanation += (
            f"For patient's with weight less than 10 kg, "
            f"the rule for computing maintenance fluid is "
            f"to multiply their weight by 4 mL/kg/hr to "
            f"get the maintenance fluids per hour. Hence, "
            f"the patient's maintenance fluid is {weight} "
            f"kg * 4 mL/kg/hr = {answer} mL/hr.\n"
        )
    elif 10 <= weight <= 20:
        answer = round_number(40 + 2 * (weight - 10))
        explanation += (
            f"For patient's whose weight is in between 10 kg and "
            f"20 kg, the formula for computing maintenance fluid "
            f"is 40 mL/hr + 2 mL/kg/hr * (weight (in kilograms) "
            f"- 10 kilograms). Hence, plugging into this "
            f"formula, we get 40 mL/hr + 2 mL/kg/hr * "
            f"({weight} kg - 10 kg) = {answer} mL/hr.\n"
        )
    elif weight > 20:
        answer = round_number(60 + (weight - 20))
        explanation += (
            f"For patient's whose weight is greater than 20 kg, "
            f"the formula for computing the maintenance fluid is "
            f"60 mL/hr + 1 mL/kg/hr * (weight (in kilograms) "
            f"- 20 kilograms). Hence, plugging into "
            f"this formula, we get 60 mL/hr + 2 mL/kg/hr "
            f"* ({weight} kg - 20 kg) = {answer} mL/hr.\n"
        )

    explanation += (
        f"Hence, the patient's fluid maintenance is {answer} " f"mL/hr.\n"
    )

    return {"Explanation": explanation, "Answer": answer}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            "weight": (12.0, "kg"),  # weight 150 lbs
        }
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = maintenance_fluid_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:albumin_corrected_anion.py
"""
 below is the content of albumin_corrected_anion.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function compute_albumin_corrected_anion_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench import anion_gap
from camel.toolkits.medcalc_bench.utils.rounding import round_number
from camel.toolkits.medcalc_bench.utils.unit_converter_new import (
    conversion_explanation,
)


def compute_albumin_corrected_anion_explanation(input_parameters):
    r"""
    Calculates the patient's anion gap and generates a detailed explanatory
    text.

    Parameters:
        input_parameters (dict): A dictionary containing the following
        key-value pairs:
            - "sodium" (array): The patient's blood sodium level in the
            format (value, unit).
                - Value (float): The blood sodium level.
                - Unit (str): The unit of blood sodium level.
            - "chloride" (array): The patient's chloride level in the
            format (value, unit).
                - Value (float): The value of chloride level.
                - Unit (str): The unit of chloride level, eg. "mmol/L",
                "mEq/L", and so on.
            - "bicarbonate" (array): The patient's bicarbonate level in
            the format (value, unit).
                - Value (float): The value of bicarbonate level.
                - Unit (str): The unit of bicarbonate level, eg. "mmol/L",
                "mEq/L", and so on.
            - "albumin" (array): The patient's albumin concentration in
            the format (value, unit).
                - Value (float): The numerical albumin concentration value.
                - Unit (str): The unit of albumin concentration, eg. "g/L",
                "mg/dL", "g/mL" and so on.

    Returns:
        dict: Contains two key-value pairs:
            - "Explanation" (str): A detailed description of
            the calculation process.
            - "Answer" (float): The patient's anion gap.

    Notes:
        - None

    Example:
        compute_albumin_corrected_anion_explanation({'chloride': [100.0,
        'mmol/L'], 'bicarbonate': (19.0, 'mmol/L'),
        'albumin': [4.4, 'g/dL'], 'sodium': [134.0, 'mmol/L']})

        output: "{'Explanation': "The formula for computing a
        patient'salbumin corrected anion gap is:anion_gap (in mEq/L) + 2.5 *
        (4 - albumin (in g/dL)).\nThe formula for computing a patient's
        anion gap is:sodium (mEq/L) - (chloride (mEq/L)+ bicarbonate (mEq/L)).
        \nThe concentration of sodium is 134.0 mmol/L. Weneed to convert the
        concentration to mEq/L. Let's first convert the mass of sodium from
        mmol to mEq.The mass of sodium is 134.0 mmol. The compound, sodium,
        has a valence of 1, and so multiply the valence bythe value of mmol
        to get, 134.0 mmol * 1 mEq/mmol = 134.0 mEq sodium. The volume units
        is L so no volumeconversion is needed. Hence, the concentration
        value of 134.0 mmol sodium/L converts to 134.0 mEq sodium/L.\nThe
        concentration of chloride is 100.0 mmol/L. We need to convert the
        concentration to mEq/L. Let's firstconvert the mass of chloride from
        mmol to mEq. The mass of chloride is 100.0 mmol. The compound,
        chloride,has a valence of 1, and so multiply the valence by the
        value of mmol to get, 100.0 mmol * 1 mEq/mmol = 100.0mEq chloride.
        The volume units is L so no volume conversion is needed. Hence,
        the concentration value of100.0 mmol chloride/L converts to 100.0
        mEq chloride/L. \nThe concentration of bicarbonate is 19.0 mmol/L.
        We need to convert the concentration to mEq/L. Let's first convert
        the mass of bicarbonate from mmol to mEq.The mass of bicarbonate is
        19.0 mmol. The compound, bicarbonate, has a valence of 1, and so
        multiply thevalence by the value of mmol to get, 19.0 mmol * 1
        mEq/mmol = 19.0 mEq bicarbonate. The volume units is L sono volume
        conversion is needed. Hence, the concentration value of 19.0 mmol
        bicarbonate/L converts to 19.0mEq bicarbonate/L. \nPlugging in these
        values into the anion gap formula gives us 134.0 mEq/L - (100.0
        mEq/L+ 19.0 mEq/L) = 15.0 mEq/L. Hence, The patient's anion gap is
        15.0 mEq/L.\nThe concentration of albumin is4.4 g/dL. Plugging in
        these values into the albumin corrected anion gap formula, we get
        15.0 (mEq/L) + 2.5 *(4 - 4.4 (in g/dL)) = 14.0 mEq/L. Hence,
        the patient's albumin corrected anion gap is 14.0 mEq/L.\n",
        'Answer': 14.0}"
    """

    explanation = (
        "The formula for computing a patient's albumin corrected anion gap "
        "is: anion_gap (in mEq/L) + 2.5 * (4 - albumin (in g/dL)).\n"
    )

    anion_gap_data = anion_gap.compute_anion_gap_explanation(input_parameters)

    explanation += anion_gap_data["Explanation"]

    albumin_exp, albumin = conversion_explanation(
        input_parameters["albumin"][0],
        "albumin",
        None,
        None,
        input_parameters["albumin"][1],
        "g/dL",
    )

    explanation += albumin_exp

    anion_gap_val = anion_gap_data["Answer"]
    answer = anion_gap_val + 2.5 * (4 - albumin)
    final_answer = round_number(answer)

    explanation += (
        f"Plugging in these values into the albumin corrected anion gap "
        f"formula, we get {anion_gap_val} (mEq/L) + 2.5 * "
        f"(4 - {albumin} (in g/dL)) = {final_answer} mEq/L. "
    )

    explanation += (
        f"Hence, the patient's albumin corrected anion gap is "
        f"{final_answer} mEq/L.\n"
    )

    return {"Explanation": explanation, "Answer": final_answer}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            "chloride": (100.0, "mmol/L"),
            "bicarbonate": (19.0, "mmol/L"),
            "albumin": (4.4, "g/dL"),
            "sodium": (134.0, "mmol/L"),
        },
        {
            "chloride": (89.0, "mmol/L"),
            "bicarbonate": (23.7, "mEq/L"),
            "albumin": (2.1, "g/dL"),
            "sodium": (133.0, "mmol/L"),
        },
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = compute_albumin_corrected_anion_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:mme.py
"""
 below is the content of mme.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function compute_perc_rule_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench.utils.rounding import round_number
from camel.toolkits.medcalc_bench.utils.unit_converter_new import (
    conversion_explanation,
)


def mme_explanation(input_parameters):
    explanation = r"""
    The Opioid Conversion Table with MME (Morphine Milligram Equivalent) 
    conversion factors are listed below:
       1. Codeine: MME conversion factor = 0.15
       2. FentaNYL buccal: MME conversion factor = 0.13
       3. HYDROcodone: MME conversion factor = 1
       4. HYDROmorphone: MME conversion factor = 5
       5. Methadone: MME conversion factor = 4.7
       6. Morphine: MME conversion factor = 1
       7. OxyCODONE: MME conversion factor = 1.5
       8. OxyMORphone: MME conversion factor = 3
       9. Tapentadol: MME conversion factor = 0.4
       10. TraMADol: MME conversion factor = 0.2
       11. Buprenorphine: MME conversion factor = 10
    """

    explanation += (
        "\n\nThe curent Morphine Milligram Equivalents "
        "(MME) is 0 MME per day.\n"
    )

    mme_drug = {
        "Codeine": 0.15,
        "FentaNYL buccal": 0.13,
        "FentANYL patch": 2.4,
        "HYDROcodone": 1,
        "HYDROmorphone": 5,
        "Methadone": 4.7,
        "Morphine": 1,
        "OxyCODONE": 1.5,
        "OxyMORphone": 3,
        "Tapentadol": 0.4,
        "TraMADol": 0.2,
        "Buprenorphine": 10,
    }

    mme_equivalent = 0

    for drug_name in input_parameters:
        if "Day" in drug_name:
            continue

        name = drug_name.split(" Dose")[0]

        units = input_parameters[name + " Dose"][1]

        if name != "FentaNYL buccal" and name != "FentaNYL patch":
            drug_mg_exp, drug_mg = conversion_explanation(
                input_parameters[name + " Dose"][0],
                name,
                None,
                None,
                units,
                "mg",
            )
            if units == "mg":
                explanation += (
                    f"The patient's dose of {name} is {drug_mg} " f"mg. "
                )
            else:
                explanation += (
                    f"The patient's dose of {name} is measured "
                    f"in {units}. We need to convert this to mg. "
                )
                explanation += drug_mg_exp + "\n"
        else:
            drug_mg_exp, drug_mg = conversion_explanation(
                input_parameters[name + " Dose"][0],
                name,
                None,
                None,
                units,
                "µg",
            )
            if units == "µg":
                explanation += (
                    f"The patient's dose of {name} is {drug_mg} " f"µg.\n"
                )
            else:
                explanation += (
                    f"The patient's dose of {name} is measured "
                    f"in {units}. We need to convert this to µg. "
                )
                explanation += drug_mg_exp + "\n"

        target_unit = (
            "mg"
            if name != "FentaNYL buccal" and name != "FentaNYL patch"
            else "µg"
        )

        dose_per_day_key = name + " Dose Per Day"

        dose_per_day = input_parameters[dose_per_day_key][0]

        total_per_day = round_number(drug_mg * dose_per_day)

        explanation += (
            f"The patient takes {dose_per_day} doses/day of "
            f"{name}. This means that the patient takes "
            f"{round_number(drug_mg)} {target_unit}/dose "
            f"{name} * {dose_per_day} dose/day = "
            f"{total_per_day} {target_unit}/day. "
        )

        explanation += (
            f"To convert to mme/day of {name}, multiply the "
            f"{total_per_day} {target_unit}/day by the mme "
            f"conversion factor, {mme_drug[name]} mme/"
            f"{target_unit}, giving us "
            f"{round_number(mme_drug[name] * total_per_day)} "
            f"mme/day. "
        )

        explanation += (
            f"Adding the mme/day of {name} to the total mme/day "
            f"gives us {round_number(mme_equivalent)} + "
            f"{round_number(mme_drug[name] * total_per_day)} = "
            f"{round_number(mme_equivalent + mme_drug[name] * total_per_day)} "
            f"mme/day.\n"
        )

        mme_equivalent += dose_per_day * mme_drug[name] * drug_mg

        mme_equivalent = round_number(mme_equivalent)

    explanation += f"The patient's mme/day is {mme_equivalent} mme/day."

    return {"Explanation": explanation, "Answer": mme_equivalent}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            'Tapentadol Dose': (10, 'mg'),
            'Tapentadol Dose Per Day': (2, 'per day'),
            'HYDROcodone Dose': (30, 'mg'),
            'HYDROcodone Dose Per Day': (2, 'per day'),
            'FentANYL patch Dose': (70, 'mg'),
            'FentANYL patch Dose Per Day': (2, 'per day'),
        }
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = mme_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:framingham_risk_score.py
"""
 below is the content of framingham_risk_score.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function framingham_risk_score_explanation
- translation

Date: March 2025
"""

import math

from camel.toolkits.medcalc_bench.utils.age_conversion import (
    age_conversion_explanation,
)
from camel.toolkits.medcalc_bench.utils.unit_converter_new import (
    conversion_explanation,
)


def framingham_risk_score_explanation(input_parameters):
    age_exp, age = age_conversion_explanation(input_parameters["age"])
    gender = input_parameters["sex"]

    explanation = f"The patient's gender is {gender}.\n"

    if gender == "Male":
        explanation += (
            "For males, the formula for computing the framingham "
            "risk score is 52.00961 * ln(age) + 20.014077 * ln("
            "total_cholestrol) + -0.905964 * ln(hdl_cholestrol) "
            "+ 1.305784 * ln(sys_bp) + 0.241549 * bp_medicine + "
            "12.096316 * smoker + -4.605038 * ln(age) * "
            "ln(total_cholestrol) + -2.84367 * ln(age_smoke) "
            "* smoker + -2.93323 * ln(age) * "
            "ln(age) -  172.300168, where 'bp_medicine' is a "
            "binary variable for whether a patient's blood "
            "pressure is being treated with medicine, total "
            "cholestrol and hdl cholestrol are in mg/dL, "
            "and 'smoker' is whether the patient is a "
            "smoker or not.\n"
        )
        explanation += (
            "From this, we use the risk score to get "
            "likelihood for a patient getting myocardial "
            "infraction (MI) or dying in the next 10 years: "
            "1 - 0.9402^exp(risk_score), where risk_score "
            "is the value from the formula above.\n"
        )
        explanation += age_exp

        if age > 70:
            age_smoke = 70
            explanation += (
                "For male patient's whose age is greater "
                "than 70, the age variable is set to 70 within "
                "the 'age' term for the β x ln(Age) x "
                "Smoker term.\n"
            )
        else:
            age_smoke = age

    if gender == "Female":
        explanation += (
            "For females, the formula for computing the "
            "framingham risk score is 31.764001 * ln(age) + "
            "22.465206 * ln(total_cholestrol) - 1.187731 * ln("
            "hdl_cholestrol) + 2.552905 * ln(sys_bp) + 0.420251 "
            "* bp_medicine + 13.07543 * smoker + -5.060998 "
            "* ln(age) * ln(total_cholestrol) + -2.996945 * "
            "ln(age_smoke) * smoker - 146.5933061, where "
            "'bp_medicine' is a binary variable for whether "
            "a patient's blood pressure is being treated "
            "with medicine, total cholestrol and hdl cholestrol "
            "are in mg/dL, and 'smoker' is whether the "
            "patient is a smoker or not.\n"
        )
        explanation += (
            "From this, we use the risk score to get likelihood "
            "for a patient getting myocardial infraction (MI) "
            "or dying in the next 10 years: 1 - "
            "0.9402^exp(risk_score), where risk_score "
            "is the value from the formula above.\n"
        )
        explanation += age_exp

        if age > 78:
            age_smoke = 78
            explanation += (
                "For female patient's whose age is greater than "
                "78, the age variable is set to 78 "
                "within the 'age' variable for the "
                "β x ln(Age) x Smoker term.\n"
            )
        else:
            age_smoke = age

    if "smoker" in input_parameters:
        if input_parameters["smoker"]:
            explanation += (
                "The patient is a smoker, making the "
                "smoking variable equal to 1.\n"
            )
            smoker = 1
        else:
            explanation += (
                "The patient is not a smoker, making "
                "the smoking variable equal to 0.\n"
            )
            smoker = 0
    else:
        explanation += (
            "The note does not specify whether the patient is a "
            "smoker and so we assume this to be false, "
            "making the smoking variable equal to 0.\n"
        )
        smoker = 0

    sys_bp = input_parameters["sys_bp"][0]

    explanation += (
        f"The patient's systolic blood pressure is {sys_bp} mm Hg.\n"
    )

    if "bp_medicine" in input_parameters:
        if input_parameters["bp_medicine"]:
            explanation += (
                "The patient has been specified to "
                "take medication for treating their "
                "blood pressure, making the bp_medicine "
                "variable equal to 1.\n"
            )
            bp_medicine = 1
        else:
            explanation += (
                "The patient has been specified to not "
                "take medication for treating their blood "
                "pressure, making the bp_medicine variable "
                "equal to 0.\n"
            )
            bp_medicine = 0
    else:
        explanation += (
            "The note does not specify whether the patient "
            "takes medicine for treating blood pressure and "
            "so we assume this to be false, making the "
            "bp_medicine variable equal to 0.\n"
        )
        bp_medicine = 0

    total_cholestrol_exp, total_cholestrol = conversion_explanation(
        input_parameters["total_cholestrol"][0],
        "total cholestrol",
        386.65,
        None,
        input_parameters["total_cholestrol"][1],
        "mmol/L",
    )
    hdl_cholestrol_exp, hdl_cholestrol = conversion_explanation(
        input_parameters["hdl_cholestrol"][0],
        "hdl cholestrol",
        386.65,
        None,
        input_parameters["hdl_cholestrol"][1],
        "mmol/L",
    )

    explanation += total_cholestrol_exp + '\n'
    explanation += hdl_cholestrol_exp + '\n'

    if gender == "Male":
        risk_score = round(
            52.00961 * math.log(age)
            + 20.014077 * math.log(total_cholestrol)
            - 0.905964 * math.log(hdl_cholestrol)
            + 1.305784 * math.log(sys_bp)
            + 0.241549 * bp_medicine
            + 12.096316 * smoker
            - 4.605038 * (math.log(age) * math.log(total_cholestrol))
            - 2.84367 * (math.log(age_smoke) * smoker)
            - 2.93323 * (math.log(age) * math.log(age))
            - 172.300168,
            1,
        )
        percentage = round(1 - 0.9402 ** math.exp(risk_score), 1)
        explanation += (
            f"Plugging in these values will give us "
            f"the risk score:  52.00961 * ln({age}) "
            f"+ 20.014077 * ln({total_cholestrol}) + -0.905964 * "
            f"ln({hdl_cholestrol}) + 1.305784 * "
            f"ln({sys_bp}) + 0.241549 * {bp_medicine}  "
            f"+ 12.096316 * {smoker} + -4.605038 * "
            f"ln({age}) * ln({total_cholestrol}) + "
            f"-2.84367 * ln({age_smoke}) * {smoker} "
            f"+ -2.93323 * ln({age}) * ln({age}) -  "
            f"172.300168 = {risk_score}.\n"
        )
        explanation += (
            f"Plugging this into the MI risk equation "
            f"gives us 1 - 0.9402^exp({risk_score}) = "
            f"{percentage}. We then multiply this by a "
            f"100 to obtain the percentage which "
            f"gives us {percentage} * 100 = "
            f"{round(percentage * 100, 3)}%.\n"
        )
    else:
        risk_score = round(
            31.764001 * math.log(age)
            + 22.465206 * math.log(total_cholestrol)
            - 1.187731 * math.log(hdl_cholestrol)
            + 2.552905 * math.log(sys_bp)
            + 0.420251 * bp_medicine
            + 13.07543 * smoker
            - 5.060998 * (math.log(age) * math.log(total_cholestrol))
            - 2.996945 * (math.log(age_smoke) * smoker)
            - 146.5933061,
            1,
        )
        percentage = round(1 - 0.98767 ** math.exp(risk_score), 1)
        explanation += (
            f"Plugging in these values will "
            f"give us the risk score: 31.764001 * "
            f"ln({age}) + 22.465206 * ln({total_cholestrol}) - "
            f"1.187731 * "
            f"ln({hdl_cholestrol}) + 2.552905 * "
            f"ln({sys_bp}) + 0.420251 * {bp_medicine} "
            f"+ 13.07543 * {smoker} + -5.060998 * "
            f"ln({age}) * ln({total_cholestrol}) + "
            f"-2.996945 * ln({age_smoke}) * {smoker} - "
            f"146.5933061 = {risk_score}.\n"
        )
        explanation += (
            f"Plugging this into the MI risk formula "
            f"gives us 1 - 0.98767^exp({risk_score}) = "
            f"{percentage}. We then multiply this by a "
            f"100 to obtain the percentage which "
            f"gives us {percentage} * 100 = "
            f"{round(percentage * 100, 3)}%.\n"
        )

    explanation += (
        f"The patient's percentage of getting MI or dying is"
        f" {round(percentage * 100, 3)} %.\n"
    )

    return {"Explanation": explanation, "Answer": round(percentage * 100, 3)}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            'sex': 'Male',
            'age': (17, 'years'),
            'sys_bp': (70, "mm"),
            'dia_bp': (12, "Hg"),
            "smoker": True,
            "bp_medicine": True,
            "total_cholestrol": (210.0, 'mg/dL'),
            "hdl_cholestrol": (37.0, 'mg/dL'),
        }
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = framingham_risk_score_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:ckd_epi_2021_creatinine.py
"""
 below is the content of ckd_epi_2021_creatinine.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function ckd_epi_2021
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench.utils.age_conversion import (
    age_conversion,
    age_conversion_explanation,
)
from camel.toolkits.medcalc_bench.utils.rounding import round_number
from camel.toolkits.medcalc_bench.utils.unit_converter_new import (
    conversion_explanation,
)


def ckd_epi_2021(input_parameters):
    r"""
    Calculates the patient's Glomerular Filtration Rate (GFR) and
    generates a detailed explanatory text.

    Parameters:
        input_parameters (dict): A dictionary containing the following
        key-value pairs:
            - "sex" (str): The patient's gender, which can be either "Male"
            or "Female".
            - "creatinine" (tuple): The patient's height information in the
            format (value, unit).
                - Value (float): The numerical height measurement.
                - Unit (str): The unit of height,
                which can be "cm" (centimeters) or "in" (inches).
            - "age" (tuple): The patient's albumin concentration in the
            format (value, unit).
                - Value (float): Age.
                - Unit (str): The unit can be "months", "years".

    Returns:
        dict: Contains two key-value pairs:
            - "Explanation" (str): A detailed description of
            the calculation process.
            - "Answer" (float): The patient's Glomerular Filtration Rate (GFR).

    Notes:
        - None

    Example:
        ckd_epi_2021({
            'sex': 'Male',
            'age': (17, 'years'),
            'creatinine': (3.7, 'mg/dL')
        })

        output: "{'Explanation': "The formula for computing GFR is 142 x (
        Scr/A)**B x 0.9938**age x (gender_coeffcient), where the **
        indicates an exponent operation, Scr is the concentration of serum
        creatinine in mg/dL and gender_coefficient is 1.012 if the patient
        is female, else the coeffient is 1. The coefficients A and B are
        dependent on the patient's gender and the patient's creatinine
        concentration.\nThe patient is 17 years old. The patient's gender is
        Male, and so the patient's gender coefficient is 1.0.\nThe
        concentration of Serum Creatinine is 3.7 mg/dL. Because the
        patient's gender is male and the creatinine concentration is
        greater than or equal to 0.9 mg/dL, A = 0.9 and B = -1.2.\nPlugging
        in these values, we get 142 * (3.7/0.9)**-1.2 * 0.9938**17 *
        1.0 = 23.422.\nHence, the GFR value is 23.422 ml/min/1.73 m².\n",
        'Answer': 23.422}"
    """

    age = age_conversion(input_parameters["age"])
    gender = input_parameters["sex"]
    creatinine_val, creatinine_label = (
        input_parameters["creatinine"][0],
        input_parameters["creatinine"][1],
    )

    creatinine_val_exp, creatinine_val = conversion_explanation(
        creatinine_val,
        "creatinine",
        113.12,
        None,
        creatinine_label,
        "mg/dL",
    )

    if creatinine_val <= 0.7 and gender == "Female":
        a = 0.7
        b = -0.241

    elif creatinine_val <= 0.9 and gender == "Male":
        a = 0.9
        b = -0.302

    elif creatinine_val > 0.7 and gender == "Female":
        a = 0.7
        b = -1.2

    elif creatinine_val > 0.9 and gender == "Male":
        a = 0.9
        b = -1.2

    if gender == "Female":
        gender_coefficient = 1.012
    else:
        gender_coefficient = 1

    return 142 * (creatinine_val / a) ** b * 0.9938**age * gender_coefficient


def ckd_epi_2021_explanation(input_parameters):
    explanation = (
        "The formula for computing GFR is 142 x (Scr/A)**B x "
        "0.9938**age x (gender_coeffcient), where the ** indicates "
        "an exponent operation, Scr is the concentration of serum "
        "creatinine in mg/dL and gender_coefficient is 1.012 if "
        "the patient is female, else the coeffient is 1. The "
        "coefficients A and B are dependent on the patient's "
        "gender and the patient's creatinine concentration.\n"
    )

    age_explanation, age = age_conversion_explanation(input_parameters["age"])
    gender = input_parameters["sex"]

    explanation += age_explanation
    explanation += f"The patient's gender is {gender}, "

    if gender == "Female":
        gender_coefficient = 1.012
        explanation += (
            f"and so the patient's gender coefficient is "
            f"{gender_coefficient}.\n"
        )
    else:
        gender_coefficient = 1.000
        explanation += (
            f"and so the patient's gender coefficient is "
            f"{gender_coefficient}.\n"
        )

    creatinine_val, creatinine_label = (
        input_parameters["creatinine"][0],
        input_parameters["creatinine"][1],
    )
    creatinine_val_exp, creatinine_val = conversion_explanation(
        creatinine_val,
        "Serum Creatinine",
        113.12,
        None,
        creatinine_label,
        "mg/dL",
    )

    explanation += creatinine_val_exp

    if creatinine_val <= 0.7 and gender == "Female":
        explanation += (
            "Because the patient's gender is female and the "
            "creatinine concentration is less than or equal to "
            "0.7 mg/dL, A = 0.7 and B = -0.241.\n"
        )
        a = 0.7
        b = -0.241

    elif creatinine_val <= 0.9 and gender == "Male":
        explanation += (
            "Because the patient's gender is male and the "
            "creatinine concentration is less than or equal to "
            "0.9 mg/dL, A = 0.7 and B = -0.302.\n"
        )
        a = 0.7
        b = -0.302

    elif creatinine_val > 0.7 and gender == "Female":
        explanation += (
            "Because the patient's gender is female and the "
            "creatinine concentration is greater than or equal "
            "to 0.7 mg/dL, A = 0.7 and B = -1.2.\n"
        )
        a = 0.7
        b = -1.2

    elif creatinine_val > 0.9 and gender == "Male":
        explanation += (
            "Because the patient's gender is male and the "
            "creatinine concentration is greater than or equal "
            "to 0.9 mg/dL, A = 0.9 and B = -1.2.\n"
        )
        a = 0.9
        b = -1.2

    result = round_number(
        142 * (creatinine_val / a) ** b * 0.9938**age * gender_coefficient
    )

    explanation += (
        f"Plugging in these values, we get 142 * ("
        f"{creatinine_val}/{a})**{b} * {0.9938}**{age} * "
        f"{gender_coefficient} = {result}.\n"
    )
    explanation += f"Hence, the GFR value is {result} ml/min/1.73 m².\n"

    return {"Explanation": explanation, "Answer": result}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {'sex': 'Male', 'age': (17, 'years'), 'creatinine': (3.7, 'mg/dL')}
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = ckd_epi_2021_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:adjusted_body_weight.py
"""
 below is the content of adjusted_body_weight.py

r"""
This code is borrowed and modified based on the source code from the
    'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function weight_conversion_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench import ideal_body_weight
from camel.toolkits.medcalc_bench.utils.rounding import round_number
from camel.toolkits.medcalc_bench.utils.weight_conversion import (
    weight_conversion_explanation,
)


def abw_explanation(input_variables):
    r"""
    Calculates the patient's Adjusted Body Weight (ABW) and generates a
        detailed explanatory text.

    Parameters:
        input_variables (dict): A dictionary containing the following
            key-value pairs:
            - "weight" (tuple): The patient's weight information in the format
                (value, unit).
                - Value (float): The numerical weight measurement.
                - Unit (str): The unit of weight, which can be "lbs" (pounds),
                    "g" (grams), or "kg" (kilograms).
            - "height" (tuple): The patient's height information in the format
                (value, unit).
                - Value (float): The numerical height measurement.
                - Unit (str): The unit of height, which can be "cm"
                    (centimeters) or "in" (inches).
            - "sex" (str): The patient's gender, which can be either "Male"
                or "Female".

    Returns:
        dict: Contains three key-value pairs:
            - "Explanation" (str): A detailed description of the calculation
                process, including IBW and ABW calculations.
            - "ABW" (str): The specific formula and result for ABW calculation.
            - "Answer" (float): The patient's adjusted body weight
                (in kilograms).

    Notes:
        - Uses the `weight_conversion.weight_conversion_explanation` function
            to convert weight to kilograms.
        - Uses the `ideal_body_weight.ibw_explanation` function to calculate
            Ideal Body Weight (IBW).
        - Uses the `round_number` function to round the result.

    Example:
        abw_explanation({'weight': (150, 'lbs'),
            'height': (170, 'cm'), 'sex': 'Male'})
        output: "{'Explanation': "The patient's gender
            is Male.\nThe patient's height is 170 cm,
            which is 170 cm * 0.393701 in/cm = 66.929
        in. \nFor males, the ideal body weight (IBW) is calculated as follows:
            \nIBW = 50 kg + 2.3 kg * (height (in inches) - 60)\nPlugging
        in the values gives us 50 kg + 2.3 kg * (66.929 (in inches) - 60)
            = 65.937 kg.\nHence, the patient's IBW is 65.937 kg.The
        patient's weight is 150 lbs so this converts to 150 lbs * 0.453592
            kg/lbs = 68.039 kg. To compute the ABW value, apply the
        following formula: ABW = IBW + 0.4 * (weight (in kg) - IBW (in kg)).
            ABW = 65.937 kg + 0.4 * (68.039 kg  -
        65.937 kg) = 66.778 kg. The patient's adjusted body weight is
            66.778 kg.\n", 'ABW': "To compute the ABW value,
            apply the following
        formula: ABW = IBW + 0.4 * (weight (in kg) - IBW (in kg)).
            ABW = 65.937 kg + 0.4 * (68.039 kg  - 65.937 kg) = 66.778 kg. The
        patient's adjusted body weight is 66.778 kg.\n", 'Answer': 66.778}"
    """

    weight_explanation, weight = weight_conversion_explanation(
        input_variables["weight"]
    )
    ibw_explanation = ideal_body_weight.ibw_explanation(input_variables)

    explanation = f"{ibw_explanation['Explanation']}"
    explanation += f"{weight_explanation}"

    ibw = ibw_explanation["Answer"]

    abw = round_number(ibw + 0.4 * (weight - ibw))
    abw_explanation_string = ""
    abw_explanation_string += (
        "To compute the ABW value, apply the following formula: "
    )
    abw_explanation_string += (
        "ABW = IBW + 0.4 * (weight (in kg) - IBW (in kg)). "
    )
    abw_explanation_string += (
        f"ABW = {ibw} kg + 0.4 * ({weight} kg  - {ibw} kg) = {abw} kg. "
    )
    abw_explanation_string += (
        f"The patient's adjusted body weight is {abw} kg.\n"
    )

    explanation += abw_explanation_string

    return {
        "Explanation": explanation,
        "ABW": abw_explanation_string,
        "Answer": abw,
    }


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            "weight": (150, "lbs"),  # weight 150 lbs
            "height": (170, "cm"),  # height 170 cm
            "sex": "Male",  # Male
        }
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = abw_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:glasgow_coma_score.py
"""
 below is the content of glasgow_coma_score.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function compute_glasgow_coma_score_explanation
- translation

Date: March 2025
"""


def compute_glasgow_coma_score_explanation(input_variables):
    r"""
    Calculates the patient's Glasgow Coma Score and generates a detailed
    explanatory text.

    Parameters:
        input_variables (dict): A dictionary containing the following
        key-value pairs:
            - "insulin" (array): The patient's insulin level in the format (
            value, unit).
                - Value (float): The value of insulin level.
                - Unit (str): The unit of insulin level, eg. "µIU/mL",
                "pmol/L", and so on.
            - "glucose" (array): The patient's blood glucose level in the
            format (value, unit).
                - Value (float): The value of blood glucose level.
                - Unit (str): The unit of blood glucose level,
                eg. "mmol/L", "mEq/L", and so on.

    Returns:
        dict: Contains two key-value pairs:
            - "Explanation" (str): A detailed description of
            the calculation process.
            - "Answer" (float): The patient's Homeostatic Model Assessment
            for Insulin Resistance.

    Notes:
        - None

    Example:
        compute_glasgow_coma_score_explanation({'insulin': [756.0, 'pmol/L'],
        'glucose': [97.3, 'mg/dL']})

        output: "{'Explanation': "\n    The Glasgow Coma Scale (GCS) for
        assessing a patient's level of consciousness is shown below:\n
        \n       1. Best Eye Response: Spontaneously = +4 points, To verbal
        command = +3 points, To pain = +2 points, \n       No eye opening =
        +1 point\n       2. Best Verbal Response: Oriented = +5 points,
        Confused = +4 points, Inappropriate words = +3 points, \n
        Incomprehensible sounds = +2 points, No verbal response =
        +1 point\n       3. Best Motor Response: Obeys commands = +6 points,
        Localizes pain = +5 points, Withdrawal from pain = +4 points,
        \n Flexion to pain = +3 points, Extension to pain = +2 points,
        No motor response = +1 point\n\n For each criteria, if a patient's
        value is not mentioned/not testable in the note, \n we assume that
        it gets the full score for that attribute.  \n The total GCS score
        is calculated by summing the points for each of the three
        components.\n\n\n The current glasgow coma score is 0.\nBased
        on the patient note, the best eye response for the patient is 'eye
        opening to pain', and so we add 2 points making the current total 0
        + 2 = 2.\nBased on the patient note, the best verbal response for
        the patient is 'oriented', and so we add 5 points making
        the current total 2 + 5 = 7.\nBased on the patient note, the best
        motor response for the patient is 'localizes pain', and so we add 5
        points making the current total 7 + 5 = 12.\nHence, the patient's
        glasgow coma score is 12.\n", 'Answer': 12}"
    """

    glasgow_dictionary = {
        "best_eye_response": {
            "eyes open spontaneously": 4,
            "eye opening to verbal command": 3,
            "eye opening to pain": 2,
            "no eye opening": 1,
            "not testable": 4,
        },
        "best_verbal_response": {
            "oriented": 5,
            "confused": 4,
            "inappropriate words": 3,
            "incomprehensible sounds": 2,
            "no verbal response": 1,
            "not testable": 4,
        },
        "best_motor_response": {
            "obeys commands": 6,
            "localizes pain": 5,
            "withdrawal from pain": 4,
            "flexion to pain": 3,
            "extension to pain": 2,
            "no motor response": 1,
        },
    }

    best_eye_response_value = input_variables["best_eye_response"]
    best_verbal_response_value = input_variables["best_verbal_response"]
    best_motor_response_value = input_variables["best_motor_response"]

    eye_score = glasgow_dictionary["best_eye_response"][
        best_eye_response_value
    ]
    verbal_score = glasgow_dictionary["best_verbal_response"][
        best_verbal_response_value
    ]
    motor_score = glasgow_dictionary["best_motor_response"][
        best_motor_response_value
    ]

    glasgow_score = 0

    eye_point = "points" if eye_score == 0 or eye_score > 1 else "point"
    verbal_point = (
        "points" if verbal_score == 0 or verbal_score > 1 else "point"
    )
    motor_point = "points" if motor_score == 0 or motor_score > 1 else "point"

    explanation = """
    The Glasgow Coma Scale (GCS) for assessing a patient's level
    of consciousness is shown below:

       1. Best Eye Response: Spontaneously = +4 points, To verbal command =
        +3 points, To pain = +2 points, No eye opening = +1 point
       2. Best Verbal Response: Oriented = +5 points, Confused = +4 points,
        Inappropriate words = +3 points, Incomprehensible sounds = +2 points,
        No verbal response = +1 point
       3. Best Motor Response: Obeys commands = +6 points, Localizes pain = +5
        points, Withdrawal from pain = +4 points, Flexion to pain = +3 points,
        Extension to pain = +2 points, No motor response = +1 point

    For each criteria, if a patient's value is not mentioned/not testable in
    the note, we assume that it gets the full score for that attribute.
    The total GCS score is calculated by summing the points for each of
    the three components.\n\n
    """

    explanation += "The current glasgow coma score is 0.\n"

    if best_eye_response_value == 'not testable':
        explanation += (
            f"Based on the patient note, the best eye response for the "
            f"patient is '{best_eye_response_value}', and so we assume the "
            f"the patient can open his or her eyes spontaneously. "
            f"Hence, we add {eye_score} {eye_point}, making the current total "
            f"{glasgow_score} + {eye_score} = {glasgow_score + eye_score}.\n"
        )
        glasgow_score += eye_score
    else:
        explanation += (
            f"Based on the patient note, the best eye response for the "
            f"patient is '{best_eye_response_value}'"
            f", and so we add {eye_score} {eye_point} making the current "
            f"total {glasgow_score} + {eye_score} = "
            f"{glasgow_score + eye_score}.\n"
        )
        glasgow_score += eye_score

    if best_verbal_response_value == 'not testable':
        explanation += (
            f"Based on the patient note, the best verbal response for the "
            f"patient is '{best_verbal_response_value}', and so we assume "
            f"the the patient's verbal response is oriented."
            f" Hence, we add {verbal_score} {verbal_point}, making the "
            f"current total {glasgow_score} + {verbal_score} = "
            f"{glasgow_score + verbal_score}.\n"
        )
        glasgow_score += verbal_score
    else:
        explanation += (
            f"Based on the patient note, the best verbal response for the "
            f"patient is '{best_verbal_response_value}', and so we add "
            f"{verbal_score} {verbal_point} making the current total "
            f"{glasgow_score} + {verbal_score} = "
            f"{glasgow_score + verbal_score}.\n"
        )
        glasgow_score += verbal_score

    explanation += (
        f"Based on the patient note, the best motor response "
        f"for the patient is '{best_motor_response_value}', and so we add "
        f"{motor_score} {motor_point} making the current total "
        f"{glasgow_score} + {motor_score} = {glasgow_score + motor_score}.\n"
    )
    glasgow_score += motor_score
    explanation += (
        f"Hence, the patient's glasgow coma score is {glasgow_score}.\n"
    )

    return {"Explanation": explanation, "Answer": glasgow_score}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            "best_eye_response": "eye opening to pain",
            "best_verbal_response": "oriented",
            "best_motor_response": "localizes pain",
        }
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = compute_glasgow_coma_score_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:has_bled_score.py
"""
 below is the content of has_bled_score.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function compute_has_bled_score_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench.utils.age_conversion import (
    age_conversion_explanation,
)


def compute_has_bled_score_explanation(input_variables):
    r"""
    Calculates the patient's Centor Score and generates a detailed
    explanatory text.

        {
            "age": (45, 'years'),
            "hypertension": False,
            "liver_disease_has_bled": False,
            "renal_disease_has_bled": False,
            "stroke": False,
            "prior_bleeding": False,
            "labile_inr": False,
            "medications_for_bleeding": False,
            "alcoholic_drinks": 6
        }

    Parameters:
        input_variables (dict): A dictionary containing the following
        key-value pairs:
            - "age" (tuple): The patient's albumin concentration in the
            format (value, unit).
                - Value (float): Age.
                - Unit (str): The unit can be "months", "years".
            - "hypertension" (boolean): Hypertension (Uncontrolled,
            >160 mmHg systolic).
            - "liver_disease_has_bled" (boolean): Liver disease
            (Cirrhosis or bilirubin > 2x normal with AST/ALT/AP > 3x normal)
            - "renal_disease_has_bled" (boolean): Renal disease (Dialysis,
            transplant, Cr >2.26 mg/dL or > 200 µmol/L).
            - "stroke" (boolean): Stroke history.
            - "prior_bleeding" (boolean): Prior major bleeding or
            predisposition to bleeding.
            - "labile_inr" (boolean): Labile INR (Unstable/high INRs,
            time in therapeutic range < 60%).
            - "medications_for_bleeding" (boolean): Medication usage
            predisposing to bleeding (Aspirin, clopidogrel, NSAIDs).
            - "alcoholic_drinks" (int): Alcohol use (≥8 drinks/week).

    Returns:
        dict: Contains two key-value pairs:
            - "Explanation" (str): A detailed description of
            the calculation process.
            - "Answer" (float): The patient's HAS-BLED Score.

    Notes:
        - None

    Example:
        compute_has_bled_score_explanation()

        output: ""
    """

    explanation = """
    The criteria for the HAS-BLED score are listed below below:
    
       1. Hypertension (Uncontrolled, >160 mmHg systolic): 
       No = 0 points, Yes = +1 point
       2. Renal disease (Dialysis, transplant, Cr >2.26 mg/dL or > 200 
       µmol/L): No = 0 points, Yes = +1 point
       3. Liver disease (Cirrhosis or bilirubin > 2x normal with AST/ALT/AP 
       > 3x normal): No = 0 points, Yes = +1 point
       4. Stroke history: No = 0 points, Yes = +1 point
       5. Prior major bleeding or predisposition to bleeding: 
       No = 0 points, Yes = +1 point
       6. Labile INR (Unstable/high INRs, time in therapeutic range < 60%): 
       No = 0 points, Yes = +1 point
       7. Age >65: No = 0 points, Yes = +1 point
       8. Medication usage predisposing to bleeding (Aspirin, clopidogrel, 
       NSAIDs): No = 0 points, Yes = +1 point
       9. Alcohol use (≥8 drinks/week): No = 0 points, Yes = +1 point
    
    The total HAS-BLED score is calculated by summing the points for each 
    criterion.
    """

    has_bled_score = 0

    num_alcolic_drinks = input_variables["alcoholic_drinks"]

    explanation += "The current HAS-BLED score is 0.\n"
    age_explanation, age_value = age_conversion_explanation(
        input_variables["age"]
    )
    explanation += age_explanation

    if age_value > 65:
        explanation += (
            f"Because the patient's age is greater than 65 years, "
            f"we increment the score by 1, making the "
            f"current score {has_bled_score} + 1 = "
            f"{has_bled_score + 1}.\n"
        )
        has_bled_score += 1
    else:
        explanation += (
            f"Because the patient's age is less than "
            f"66 years, we don't change the score, "
            f"keeping the current score at {has_bled_score}.\n"
        )

    if num_alcolic_drinks >= 8:
        explanation += (
            f"The patient has {num_alcolic_drinks} drinks a "
            f"week. Because the patient has at least 8 alcoholic "
            f"drinks a week, we increment the score by 1, "
            f"making the current score {has_bled_score} + 1 "
            f"= {has_bled_score + 1}.\n"
        )
        has_bled_score += 1
    else:
        explanation += (
            f"The patient has {num_alcolic_drinks} drinks a "
            f"week. Because the patient has less than 8 "
            f"alcoholic drinks a week, we don't change the "
            f"score, keeping the current score "
            f"at {has_bled_score}.\n"
        )

    default_parameters_set = {
        "hypertension": "hypertension",
        "liver_disease_has_bled": "liver disease",
        "renal_disease_has_bled": "renal disease",
        "stroke": "stroke history",
        "prior_bleeding": "prior bleeding",
        "labile_inr": "labile inr",
        "medications_for_bleeding": "medications " "for bleeding",
    }

    for parameter, name in default_parameters_set.items():
        if parameter not in input_variables:
            explanation += (
                f"The issue, {name}, is missing from "
                f"the patient note and so we assume it to "
                f"be absent and so we do not change the score, "
                f"keeping the current score at {has_bled_score}.\n"
            )
            input_variables[parameter] = False
        elif not input_variables[parameter]:
            explanation += (
                f"The issue, {name}, is reported to be absent "
                f"for the patient and so we do not change "
                f"the score, keeping the current score "
                f"at {has_bled_score}.\n"
            )
        else:
            explanation += (
                f"The issue, {name}, is reported to be present "
                f"for the patient note and so we increase the "
                f"score by 1, making the current score "
                f"{has_bled_score} + 1 = {has_bled_score + 1}.\n"
            )
            has_bled_score += 1

    explanation += (
        f"Hence, the patient's HAS-BLED score " f"is {has_bled_score}.\n"
    )

    return {"Explanation": explanation, "Answer": has_bled_score}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            "age": (45, 'years'),
            "hypertension": False,
            "liver_disease_has_bled": False,
            "renal_disease_has_bled": False,
            "stroke": False,
            "prior_bleeding": False,
            "labile_inr": False,
            "medications_for_bleeding": False,
            "alcoholic_drinks": 6,
        }
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = compute_has_bled_score_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:caprini_score.py
"""
 below is the content of caprini_score.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function caprini_score_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench.utils.age_conversion import (
    age_conversion_explanation,
)

param_full_name = {
    "surgery_type": "type of surgery",
    "major_surgery": ("major surgery in the last month", 1),
    "chf": ("congestive heart failure in the last month", 1),
    "sepsis": ("sepsis in the last month", 1),
    "pneumonia": ("pneumonia in the last month", 1),
    "immobilizing_plaster_case": (
        "immobilizing plaster cast in the last month",
        2,
    ),
    "hip_pelvis_leg_fracture": (
        "hip, pelvis, or leg fracture in the last month",
        5,
    ),
    "stroke": ("stroke in the last month", 5),
    "multiple trauma": ("multiple trauma in the last month", 5),
    "acute_spinal_chord_injury": (
        "acute spinal cord injury causing paralysis in the last month",
        5,
    ),
    "varicose_veins": ("varicose veins", 1),
    "current_swollen_legs": ("current swollen legs", 1),
    "current_central_venuous": ("current central venuous access", 2),
    "previous_dvt": ('previous DVT documented', 3),
    "previous_pe": ('previous pulmonary embolism documented', 3),
    "family_history_thrombosis": ("family history of thrombosis", 3),
    "positive_factor_v": ("Positive Factor V Leiden", 3),
    "positive_prothrombin": ("Positive prothrombin 20210A", 3),
    "serum_homocysteine": ("elevated serum homocysteine", 3),
    "positive_lupus_anticoagulant": ("positive lupus anticoagulant", 3),
    "elevated_anticardiolipin_antibody": (
        "elevated anticardiolipin antibody",
        3,
    ),
    "heparin_induced_thrombocytopenia": (
        "heparin-induced thrombocytopenia",
        3,
    ),
    "congenital_acquired_thrombophilia": (
        "Other congenital or acquired thrombophilia",
        3,
    ),
    "mobility": "mobility",
    "inflammatory_bowel_disease": ("history of inflammatory bowel disease", 1),
    "acute_myocardial_infarction": ("acute Myocardial infarction", 1),
    "copd": ("chronic Obstructive Pulmonary Disease", 1),
    "malignancy": ("malignancy", 2),
    "bmi": "bmi",
}

surgery_type = {
    "none": 0,
    "minor": 1,
    "major": 2,
    "laparoscopic": 2,
    "arthroscopic": 2,
    "elective major lower extremity arthroplasty": 5,
}
mobility = {"normal": 0, "on bed rest": 1, "confined to bed >72 hours": 2}


def caprini_score_explanation(input_parameters):
    explanation = """
    The criteria for the Caprini Score are listed below:
  
     1. Age, years: ≤40 = 0 points, 41-60 = +1 point, 61-74 = +2 points, 
     ≥75 = +3 points
     2. Sex: Male = 0 points, Female = +1 point
     3. Type of surgery: None = 0 points, Minor = +1 point, Major >45 min (
     laparoscopic or arthroscopic) = +2 points, Elective major 
     lower extremity arthroplasty = +5 points
     4. Recent (≤1 month) event: Major surgery = +1 point, 
     Congestive heart failure (CHF) = +1 point, Sepsis = +1 point, 
     Pneumonia = +1 point, Immobilizing plaster cast = +1 point, 
     Hip, pelvis, or leg fracture = +5 points, Stroke = +5 points, 
     Multiple trauma = +5 points, Acute spinal 
     cord injury causing paralysis = +5 points
     5. Venous disease or clotting disorder: Varicose 
     veins = +1 point, Current swollen legs = +1 point, 
     Current central venous access = +2 points, History of 
     deep vein thrombosis (DVT) or pulmonary embolism (PE) = +3 
     points, Family history of thrombosis = +3 points, 
     Positive Factor V Leiden = +3 points, Positive prothrombin 
     20210A = +3 points, Elevated serum homocysteine = +3 points
     6. Other congenital or acquired thrombophilia: Positive 
     lupus anticoagulant = +3 points, Elevated anticardiolipin 
     antibody = +3 points, Heparin-induced thrombocytopenia = +3 points
     7. Mobility: Normal, out of bed = 0 points, Medical patient currently 
     on bed rest = +1 point, Patient confined to bed >72 hours = +2 points
     8. Other present and past history: History of inflammatory bowel 
     disease = +1 point, BMI ≥25 = +1 point, Acute myocardial infarction = 
     +1 point, Chronic obstructive pulmonary disease (COPD) = +1 point, 
     Present or previous malignancy = +2 points
  
    The total Caprini Score is calculated by summing 
    the points for each criterion.\n\n
    """

    explanation += "The patient's current caprini score is 0.\n"
    score = 0

    gender = input_parameters["sex"]

    explanation += f"The patient's gender is {gender}.\n"

    age_exp, age = age_conversion_explanation(input_parameters["age"])
    explanation += age_exp

    if age <= 40:
        explanation += (
            f"Because the patient's age is less or equal to 40, "
            f"we do not add any points to the total, keeping the "
            f"current total at {score}.\n"
        )
    elif 41 <= age <= 60:
        explanation += (
            f"Because the patient's age is between 61 and 74, "
            f"we add one point to the current total, making the "
            f"current total, {score} + 1 = {score + 1}.\n"
        )
        score += 1
    elif 61 <= age <= 74:
        explanation += (
            f"Because the patient's age is between 61 and 74, "
            f"we add two points to the current total, making the "
            f"current total, {score} + 2 = {score + 2}.\n"
        )
        score += 2
    elif age >= 75:
        explanation += (
            f"Because the patient's age at least 75, "
            f"we add three points to the current total, "
            f"making the current total, "
            f"{score} + 3 = {score + 3}.\n"
        )
        score += 3

    for param, value in param_full_name.items():
        if param not in input_parameters:
            explanation += (
                f"The patient does not report anything about"
                f" {param_full_name[param][0]} and so we assume "
                f"this to be false. Hence, 0 points are added to "
                f"the score, keeping the total at {score}. "
            )

        elif param == "mobility":
            value = input_parameters[param]

            explanation += (
                f"The patient's mobility status is '{value}'. "
                f"Hence, we add {mobility[value]} points to the "
                f"total, making the current total "
                f"{mobility[value]} + {score} = "
                f"{mobility[value] + score}.\n "
            )
            score += mobility[value]

        elif param == "surgery_type":
            value = input_parameters[param]
            explanation += (
                f"The patient's surgery type is reported to be "
                f"'{value}'. Hence, we add {surgery_type[value]} "
                f"points to the total, making the current total"
                f" {surgery_type[value]} + {score} = "
                f"{surgery_type[value] + score}.\n "
            )
            score += surgery_type[value]

        elif param == "bmi":
            if input_parameters["bmi"][0] > 25:
                explanation += (
                    f"The patient's BMI is "
                    f"{input_parameters['bmi'][0]} kg/m^2 which "
                    f"is greater than 25 kg/m^2, and so we add "
                    f"2 points to the total, making the "
                    f"current total {score} + 2 = {score + 2}.\n"
                )
                score += 2
            else:
                explanation += (
                    f"The patient's BMI is "
                    f"{input_parameters['bmi'][0]} kg/m^2 "
                    f"which is less than 25 kg/m^2, and "
                    f"so we add 0 points to the total, "
                    f"keeping the total at {score}.\n"
                )

        elif input_parameters[param]:
            points = param_full_name[param][1]
            explanation += (
                f"The patient's has {param_full_name[param][0]}. "
                f"Hence, we add {points} to the total, "
                f"making the current total {points} + "
                f"{score} = {int(points) + score}.\n "
            )

        elif not input_parameters[param]:
            points = param_full_name[param][1]
            explanation += (
                f"The patient's has does not have "
                f"{param_full_name[param][0]}. Hence, "
                f"0 points are added to the score, "
                f"keeping the total at {score}.\n"
            )

    return {"Explanation": explanation, "Answer": score}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            'sex': 'Male',
            'age': (17, 'years'),
            # "mobility": "normal",  # Optional
            # "surgery_type": "major",  # Optional
            # "bmi": (22.0, "kg/m^2"),  # Optional
            # "major_surgery": True,  # Optional
            # "chf": False,  # Optional
            # "sepsis": False,  # Optional
            # "pneumonia": False,  # Optional
            # "immobilizing_plaster_case": False,  # Optional
            # "hip_pelvis_leg_fracture": False,  # Optional
            # "stroke": False,  # Optional
            # "multiple trauma": False,  # Optional
            # "acute_spinal_chord_injury": False,  # Optional
            # "varicose_veins": False,  # Optional
            # "current_swollen_legs": False,  # Optional
            # "current_central_venuous": False,  # Optional
            # "previous_dvt": False,  # Optional
            # "previous_pe": False,  # Optional
            # "family_history_thrombosis": False,  # Optional
            # "positive_factor_v": False,  # Optional
            # "positive_prothrombin": False,  # Optional
            # "serum_homocysteine": False,  # Optional
            # "positive_lupus_anticoagulant": False,  # Optional
            # "elevated_anticardiolipin_antibody": False,  # Optional
            # "heparin_induced_thrombocytopenia": False,  # Optional
            # "congenital_acquired_thrombophilia": False,  # Optional
            # "inflammatory_bowel_disease": False,  # Optional
            # "acute_myocardial_infarction": False,  # Optional
            # "copd": False,  # Optional
            # "malignancy": False,  # Optional
        },
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = caprini_score_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:delta_gap.py
"""
 below is the content of delta_gap.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function compute_delta_gap_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench.anion_gap import (
    compute_anion_gap_explanation,
)
from camel.toolkits.medcalc_bench.utils.rounding import round_number


def compute_delta_gap_explanation(input_parameters):
    r"""
    Calculates the patient's delta gap and generates a detailed explanatory
    text.

    Parameters:
        input_parameters (dict): A dictionary containing the following
        key-value pairs:
            - "sodium" (tuple): The patient's blood sodium level in the
            format (value, unit).
                - Value (float): The blood sodium level.
                - Unit (str): The unit of blood sodium level.
            - "chloride" (tuple): The patient's chloride level in the
            format (value, unit).
                - Value (float): The value of chloride level.
                - Unit (str): The unit of chloride level, eg. "mmol/L",
                "mEq/L", and so on.
            - "bicarbonate" (tuple): The patient's bicarbonate level in the
            format (value, unit).
                - Value (float): The value of bicarbonate level.
                - Unit (str): The unit of bicarbonate level, eg. "mmol/L",
                "mEq/L", and so on.

    Returns:
        dict: Contains two key-value pairs:
            - "Explanation" (str): A detailed description of
            the calculation process.
            - "Answer" (float): The patient's delta gap.

    Notes:
        - Uses the compute_anion_gap_explanation function to compute anion gap.

    Example:
        compute_delta_gap_explanation({"chloride": (100.0, "mEq/L"),
        "bicarbonate": (19.0, "mEq/L"),"sodium": (135.0, "mEq/L")})

        output: "{'Explanation': "To compute the formula of the delta gap,
        the formula is anion gap (in mEq/L) - 12. The first step is to
        compute the patient's anion gap.\nThe formula for computing a
        patient's anion gap is: sodium (mEq/L) - (chloride (mEq/L)+
        bicarbonate (mEq/L)).\nThe concentration of sodium is 135.0 mEq/L.
        \nThe concentration of chloride is 100.0 mEq/L. \nThe concentration
        of bicarbonate is 19.0 mEq/L. \nPlugging in these values into the
        anion gap formula gives us 135.0 mEq/L - (100.0 mEq/L + 19.0 mEq/L)
        = 16.0 mEq/L. Hence, The patient's anion gap is 16.0
        mEq/L.\nPlugging in 16.0 mEq/L for the delta gap formula, we get
        16.0 - 12 = 4.0 mEq/L. Hence, the patient's delta gap is 4.0
        mEq/L.\n", 'Answer': 4.0}"
    """

    explanation = (
        "To compute the formula of the delta gap, the formula is anion gap ("
        "in mEq/L) - 12. The first step is to compute the patient's anion "
        "gap.\n"
    )

    anion_gap_resp = compute_anion_gap_explanation(input_parameters)

    explanation += anion_gap_resp["Explanation"]

    anion_gap_val = anion_gap_resp["Answer"]

    answer = round_number(anion_gap_val - 12.0)

    explanation += (
        f"Plugging in {anion_gap_val} mEq/L for the delta gap "
        f"formula, we get {anion_gap_val} - 12 = {answer} mEq/L. "
    )
    explanation += f"Hence, the patient's delta gap is {answer} mEq/L.\n"

    return {"Explanation": explanation, "Answer": answer}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            "chloride": (100.0, "mEq/L"),
            "bicarbonate": (19.0, "mEq/L"),
            "sodium": (135.0, "mEq/L"),
        },
        {
            "chloride": (102.0, "mEq/L"),
            "bicarbonate": (22.0, "mEq/L"),
            "sodium": (137.0, "mEq/L"),
        },
    ]

    # {'Chloride': [100.0, 'mEq/L'], 'Bicarbonate': [19.0, 'mEq/L'],
    # 'Sodium': [135.0, 'mEq/L']}

    # {'Chloride': [102.0, 'mEq/L'], 'Bicarbonate': [22.0, 'mEq/L'],
    # 'Sodium': [137.0, 'mEq/L']}

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = compute_delta_gap_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:gestational_age.py
"""
 below is the content of gestational_age.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function targetweight_explanation
- translation

Date: March 2025
"""

from datetime import datetime


def compute_gestational_age_explanation(input_parameters):
    r"""
    Calculates the patient's gestational age and generates a detailed
    explanatory text.

    Parameters:
        input_parameters (dict): A dictionary containing the following
        key-value pairs:
            - "current_date" (date): The current date in the format "%m/%d/%Y".
            - "menstrual_date" (date): The patient's menstrual date in the
            format "%m/%d/%Y".

    Returns:
        dict: Contains two key-value pairs:
            - "Explanation" (str): A detailed description of
            the calculation process.
            - "Answer" (float): The patient's gestational age.

    Notes:
        - None

    Example:
        compute_gestational_age_explanation({"current_date": "04/29/2022",
        "menstrual_date": "01/06/2022"})

        output: "{'Explanation': "To compute the estimated gestational age,
        we compute the number of weeks and days apart today's date is from
        the patient's last menstrual period date. The current date is
        04/29/2022 and the patient's last menstrual period date was
        01/06/2022. The gap between these two dates is 16 weeks and 1 days.
        Hence, the estimated gestational age is 16 weeks and 1 days. ",
        'Answer': ('16 weeks', '1 days')}"
    """

    date2 = input_parameters["current_date"]
    date1 = input_parameters["menstrual_date"]

    explanation = (
        "To compute the estimated gestational age, we compute the number of "
        "weeks and days apart today's date is from the patient's last "
        "menstrual period date. "
    )
    explanation += (
        f"The current date is {date2} and the patient's last "
        f"menstrual period date was {date1}. "
    )

    datetime1 = datetime.strptime(date1, "%m/%d/%Y")
    datetime2 = datetime.strptime(date2, "%m/%d/%Y")

    delta = abs(datetime2 - datetime1)

    weeks = delta.days // 7
    days = delta.days % 7

    if weeks == 0:
        explanation += (
            f"The gap between these two dates is {days} days. "
            f"Hence, the estimated gestational age is {days} days. "
        )
    elif days == 0:
        explanation += (
            f"The gap between these two dates is {weeks} weeks. "
            f"Hence, the estimated gestational age is {weeks} weeks. "
        )
    else:
        explanation += (
            f"The gap between these two dates is {weeks} weeks and {days} "
            f"days. Hence, the estimated gestational age is {weeks} weeks and "
            f"{days} days. "
        )

    return {
        "Explanation": explanation,
        "Answer": (f"{weeks} weeks", f"{days} days"),
    }


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            "current_date": "04/29/2022",
            "menstrual_date": "01/06/2022",
        },
        {
            "current_date": "11/15/2005",
            "menstrual_date": "06/16/2005",
        },
    ]

    # {'Current Date': '04/29/2022', 'Last menstrual date': '01/06/2022'}
    # {'Current Date': '11/15/2005', 'Last menstrual date': '06/16/2005'}

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = compute_gestational_age_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:sofa.py
"""
 below is the content of sofa.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function compute_sofa_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench.utils.rounding import round_number
from camel.toolkits.medcalc_bench.utils.unit_converter_new import (
    conversion_explanation,
    convert_to_units_per_liter_explanation,
)


def compute_sofa_explanation(input_parameters):
    explanation = """
    The criteria for the SOFA Score are shown below:

       1. PaO₂/FiO₂ ratio (mm Hg): ≥400 = 0 points, 300-399 = +1 point,
        200-299 = +2 points, 100-199 (with respiratory support) = +3 points,
        <100 (with respiratory support) = +4 points
       2. Platelets (10^3/µL): ≥150 = 0 points, 100-149 = +1 point, 50-99 = +2
        points, 20-49 = +3 points, <20 = +4 points
       3. Glasgow Coma Scale (GCS): 15 = 0 points, 13-14 = +1 point, 10-12 =
        +2 points, 6-9 = +3 points, <6 = +4 points
       4. Bilirubin (mg/dL): <1.2 = 0 points, 1.2-1.9 = +1 point, 2.0-5.9 = +2
        points, 6.0-11.9 = +3 points, ≥12.0 = +4 points
       5. Mean arterial pressure (MAP) or administration of vasopressors:
        No hypotension = 0 points, MAP <70 mmHg = +1 point, Dopamine ≤5 or
        Dobutamine (any dose) = +2 points, Dopamine >5 or Epinephrine ≤0.1
        or norepinephrine ≤0.1 = +3 points, Dopamine >15 or Epinephrine >0.1
        or norepinephrine >0.1 = +4 points
       6. Creatinine (mg/dL) or urine output: <1.2 = 0 points, 1.2-1.9 = +1
       point, 2.0-3.4 = +2 points, 3.5-4.9 or urine output <500 mL/day = +3
       points, ≥5.0 or urine output <200 mL/day = +4 points

    The total SOFA Score is calculated by summing the points
    for each criterion.\n\n
    """

    explanation += "The patient's current SOFA score is 0.\n"

    sofa_score = 0

    pao2 = input_parameters["partial_pressure_oxygen"][0]
    fio2 = input_parameters["fio2"][0]

    dopamine = input_parameters.get("dopamine", [0])
    dobutamine = input_parameters.get("dobutamine", [0])
    epinephrine = input_parameters.get("epinephrine", [0])
    norepinephrine = input_parameters.get("norepinephrine", [0])

    explanation += (
        f"The patient's partial pressure of oxygen is {pao2} mm "
        f"Hg and FiO₂ percentage is {fio2} %. "
    )
    ratio = round_number(pao2 / fio2)
    explanation += (
        f"This means that the patient's partial pressure of "
        f"oxygen to FiO₂ ratio is {ratio}. "
    )

    if "mechanical_ventilation" not in input_parameters:
        explanation += (
            "Whether the patient is on mechanical ventillation "
            "is not reported and so we assume this to be false. "
        )
        input_parameters["mechanical_ventilation"] = False
    elif input_parameters["mechanical_ventilation"]:
        explanation += (
            "The patient is reported to be on mechanical " "ventillation. "
        )
    else:
        explanation += (
            "The patient is reported to not be on mechanical " "ventillation. "
        )
        input_parameters["mechanical_ventilation"] = False

    if "cpap" not in input_parameters:
        explanation += (
            "Whether the patient is on continuous positive "
            "airway pressure is not reported and so we assume "
            "this to be false. "
        )
        input_parameters["cpap"] = False
    elif input_parameters["cpap"]:
        explanation += (
            "The patient is reported to be using continuous "
            "positive airway pressure. "
        )
    else:
        explanation += (
            "The patient is reported to not be using continuous "
            "positive airway pressure. "
        )

    if 300 <= ratio < 400:
        explanation += (
            f"Because the patient's partial pressure of oxygen "
            f"to FiO₂ ratio is between 300 and 400, we increase "
            f"the score by one point, makeing the current total "
            f"{sofa_score} + 1 = {sofa_score + 1}.\n"
        )
        sofa_score += 1
    elif 200 <= ratio < 300:
        explanation += (
            f"Because the patient's partial pressure of oxygen "
            f"to FiO₂ ratio is between 200 and 300, we increase "
            f"the score by two points, makeing the current "
            f"total {sofa_score} + 2 = {sofa_score + 2}.\n"
        )
        sofa_score += 2
    elif ratio <= 199 and (
        not input_parameters["mechanical_ventilation"]
        and not input_parameters["cpap"]
    ):
        explanation += (
            f"Because the patient's partial pressure of oxygen "
            f"to FiO₂ ratio is between 200 and 300, the patient "
            f"is not on mechanical ventillation and is not using "
            f"continious positive airway pressure, we increase "
            f"the score by two points, makeing the current "
            f"total {sofa_score} + 2 = {sofa_score + 2}.\n"
        )
        sofa_score += 2
    elif 100 <= ratio < 199 and (
        input_parameters["mechanical_ventilation"] or input_parameters["cpap"]
    ):
        explanation += (
            f"Because the patient's partial pressure of oxygen "
            f"to FiO₂ ratio is between 100 to 199, and the "
            f"patient is using at least one of (i) mechanical "
            f"ventillation or (ii) continious positive airway "
            f"pressure, we increase the score by three points, "
            f"makeing the current total {sofa_score} + 3 = "
            f"{sofa_score + 3}.\n"
        )
        sofa_score += 3
    elif ratio < 100 and input_parameters["mechanical_ventilation"]:
        explanation += (
            f"Because the patient's partial pressure of oxygen "
            f"to FiO₂ ratio is less than 100, and the patient "
            f"is using at least one of (i) mechanical "
            f"ventillation or (ii) continious positive airway "
            f"pressure, we increase the score by four points, "
            f"makeing the current total {sofa_score} + 4 = "
            f"{sofa_score + 4}.\n"
        )
        sofa_score += 4

    if (
        'sys_bp' in input_parameters
        and 'dia_bp' in input_parameters
        and 1 / 3 * input_parameters['sys_bp'][0]
        + 2 / 3 * input_parameters['dia_bp'][0]
        < 70
        and (
            not dobutamine[0] and not epinephrine[0] and not norepinephrine[0]
        )
    ):
        sys_bp = input_parameters['sys_bp'][0]
        dia_bp = input_parameters['dia_bp'][0]
        map = round_number(1 / 3 * sys_bp + 2 / 3 * dia_bp)
        explanation = (
            f"The patient's systolic blood pressure is {sys_bp} "
            f"mm Hg and the patient's diastolic blood pressure "
            f"is {dia_bp} mm Hg, making the patient's mean "
            f"arterial blood pressure {map} mm Hg. "
        )
        explanation += (
            f"For one point to be given, the patient's mean "
            f"arterial pressure must be less than 70 mm Hg, "
            f"making the current total {sofa_score} + 1 "
            f"= {sofa_score + 1}.\n"
        )
        sofa_score += 1
    elif dopamine[0] <= 5 or dobutamine[0]:
        explanation += (
            f"For two points to be given, the patient must "
            f"be taking less than or equal to 5 micrograms/kg/min "
            f"or any amount of dobutamine. Because at least "
            f"one of these cases is true for the patient, "
            f"we increment the score by two points, "
            f"making the current total {sofa_score} + 2 "
            f"= {sofa_score + 2}.\n"
        )
        sofa_score += 2
    elif dopamine[0] > 5 or epinephrine[0] <= 0.1 or norepinephrine[0] <= 0.1:
        explanation += (
            f"For three points to be given, the patient "
            f"must be taking more than 5 micrograms/kg/min, "
            f"less than or equal to 0.1 micrograms/kg/min "
            f"of epinephrine, or less than or equal to 0.1 "
            f"micrograms/kg/min of norepinephrine. "
            f"Because at least one of these cases is true for the "
            f"patient, we increment the score by three "
            f"points, making the current total "
            f"{sofa_score} + 3 = {sofa_score + 3}.\n"
        )
        sofa_score += 3
    elif dopamine[0] > 15 or epinephrine[0] > 0.1 or norepinephrine[0] > 0.1:
        explanation += (
            f"For four points to be given, the patient "
            f"must be taking more than 15 micrograms/kg/min, "
            f"more than 0.1 micrograms/kg/min of epinephrine, "
            f"or more than 0.1 micrograms/kg/min of norepinephrine. "
            f"Because at least one of these cases is true "
            f"for the patient, we increment the score by "
            f"four points, making the current total "
            f"{sofa_score} + 4 = {sofa_score + 4}.\n"
        )
        sofa_score += 4

    if 'gcs' not in input_parameters:
        gcs = 15
        explanation += f"The patient's glasgow coma score is {gcs}. "
    else:
        gcs = input_parameters["gcs"]
        explanation += (
            "The patient's glasgow coma score is not "
            "reported so we take it to be 15. "
        )

    if gcs < 6:
        explanation += (
            f"Because the patient's glasgow coma score is "
            f"less than 6, we add 4 points to the score, "
            f"making the current score {sofa_score} + 4 "
            f"= {sofa_score + 4}.\n "
        )
        sofa_score += 4
    elif 6 <= gcs <= 9:
        explanation += (
            f"Because the patient's glasgow coma score "
            f"is between 6 and 9, we add 3 points to the "
            f"score, making the current score "
            f"{sofa_score} + 3 = {sofa_score + 3}.\n "
        )
        sofa_score += 3
    elif 10 <= gcs <= 12:
        explanation += (
            f"Because the patient's glasgow coma score "
            f"is between 10 and 12, we add 2 points to "
            f"the score, making the current score "
            f"{sofa_score} + 2 = {sofa_score + 2}.\n "
        )
        sofa_score += 2
    elif 13 <= gcs <= 14:
        explanation += (
            f"Because the patient's glasgow coma score "
            f"is between 13 and 14, we add 1 point to "
            f"the score, making the current score "
            f"{sofa_score} + 1 = {sofa_score + 1}.\n "
        )
        sofa_score += 1
    else:
        explanation += (
            f"Because the patient's glasgow coma score "
            f"is 15, we add 0 points to the score, "
            f"keeping the score at {sofa_score}.\n "
        )

    bilirubin_exp, bilirubin = conversion_explanation(
        input_parameters['bilirubin'][0],
        'bilirubin',
        584.66,
        None,
        input_parameters['bilirubin'][1],
        "mg/dL",
    )
    explanation += bilirubin_exp

    if bilirubin < 1.2:
        explanation += (
            f"Because the patient's bilirubin concentration is "
            f"less than 1.2 mg/dL, we add 0 points to the score, "
            f"keeping the score at {sofa_score}.\n "
        )
    if 1.2 <= bilirubin < 2.0:
        explanation += (
            f"Because the patient's bilirubin concentration is "
            f"at least 1.2 mg/dL but less than 2.0 mg/dL, "
            f"we increment the score by one point, "
            f"make the current score {sofa_score} + 1 = "
            f"{sofa_score + 1}.\n"
        )
        sofa_score += 1
    elif 2.0 <= bilirubin < 6.0:
        explanation += (
            f"Because the patient's bilirubin concentration is "
            f"at least 2.0 mg/dL but less than 6.0 mg/dL, "
            f"we increment the score by two points, "
            f"make the current score {sofa_score} + 2 "
            f"= {sofa_score + 2}.\n"
        )
        sofa_score += 2
    elif 6.0 <= bilirubin < 12.0:
        explanation += (
            f"Because the patient's bilirubin concentration "
            f"is at least 6.0 mg/dL but less than 12.0 mg/dL, "
            f"we increment the score by three points, "
            f"make the current score {sofa_score} + 3 "
            f"= {sofa_score + 3}.\n"
        )
        sofa_score += 3
    elif bilirubin >= 12.0:
        explanation += (
            f"Because the patient's bilirubin concentration is "
            f"at least 12.0 mg/dL, we increment the score by "
            f"four points, make the current score"
            f"{sofa_score} + 4 = {sofa_score + 4}.\n"
        )
        sofa_score += 4

    platelet_count_exp, platelet_count = (
        convert_to_units_per_liter_explanation(
            input_parameters["platelet_count"][0],
            input_parameters["platelet_count"][1],
            "platelet",
            "µL",
        )
    )
    explanation += platelet_count_exp

    if platelet_count >= 150000:
        explanation += (
            f"Because the patient's platelet count is at "
            f"least 150*10³/µL, we do not any points to "
            f"the score, keeping the current score "
            f"at {sofa_score}.\n"
        )
    if 100000 <= platelet_count < 150000:
        explanation += (
            f"Because the patient's platelet count is "
            f"between 100*10³/µL but less than 150*10³/µL, "
            f"we increment the score by one point, "
            f"making the current score {sofa_score} + 1 "
            f"= {sofa_score + 1}.\n"
        )
        sofa_score += 1
    elif 50000 <= platelet_count < 100000:
        explanation += (
            f"Because the patient's platelet count is "
            f"between 50*10³/µL but less than 100*10³/µL, "
            f"we increment the score by two points, "
            f"making the current score {sofa_score} + 2 "
            f"= {sofa_score + 2}.\n"
        )
        sofa_score += 2
    elif 20000 <= platelet_count < 50000:
        explanation += (
            f"Because the patient's platelet count is "
            f"between 20*10³/µL but less than 50*10³/µL, "
            f"we increment the score by three points, "
            f"making the current score {sofa_score} + 3 "
            f"= {sofa_score + 3}.\n"
        )
        sofa_score += 3
    elif platelet_count < 20000:
        explanation += (
            f"Because the patient's platelet count is "
            f"less than 20*10³/µL, we increment the score "
            f"by four points, making the current score "
            f"{sofa_score} + 4 = {sofa_score + 4}.\n"
        )
        sofa_score += 4

    if 'creatinine' not in input_parameters:
        urine_output = input_parameters["urine_output"][0]

        explanation += f"The patients urine output is {urine_output} mL/day. "

        if urine_output < 500:
            explanation += (
                f"Because the patient's urine output is "
                f"less than 500 mL/day, we increment the "
                f"score by three points, making the current "
                f"total {sofa_score} + 3 = {sofa_score + 3}.\n"
            )
            sofa_score += 3
        elif urine_output < 200:
            explanation += (
                f"Because the patient's urine output is "
                f"less than 200 mL/day, we increment the "
                f"score by four points, making the current "
                f"total {sofa_score} + 4 = {sofa_score + 4}.\n"
            )
            sofa_score += 4

    elif 'urine_output' not in input_parameters:
        creatinine_exp, creatinine = conversion_explanation(
            input_parameters['creatinine'][0],
            "creatinine",
            113.12,
            None,
            input_parameters['creatinine'][1],
            "mg/dL",
        )

        explanation += creatinine_exp

        if 1.2 <= creatinine < 2.0:
            explanation += (
                f"Because the patient's creatinine concentration "
                f"is at least 1.2 mg/dL but less than 2.0 mg/dL, "
                f"we increment the score by one point, "
                f"making the current total {sofa_score} + 1 "
                f"= {sofa_score + 1}.\n"
            )
            sofa_score += 1
        elif 2.0 <= creatinine < 3.5:
            explanation += (
                f"Because the patient's creatinine concentration "
                f"is at least 2.0 mg/dL but less than 3.5 mg/dL, "
                f"we increment the score by two points, making "
                f"the current total {sofa_score} + 2 = "
                f"{sofa_score + 2}.\n"
            )
            sofa_score += 2
        elif 3.5 <= creatinine < 5.0:
            explanation += (
                f"Because the patient's creatinine concentration "
                f"is at least 3.5 mg/dL but less than 5.0 mg/dL, "
                f"we increment the score by three points, "
                f"making the current total {sofa_score} + 3 "
                f"= {sofa_score + 3}.\n"
            )
            sofa_score += 3
        elif creatinine >= 5.0:
            explanation += (
                f"Because the patient's creatinine concentration "
                f"is greater than 5.0 mg/dL, "
                f"we increment the score by four points, "
                f"making the current total {sofa_score} + 4 "
                f"= {sofa_score + 4}.\n"
            )
            sofa_score += 4

    explanation += f"Hence, the patient's SOFA score is {sofa_score} points.\n"

    return {"Explanation": explanation, "Answer": sofa_score}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            'partial_pressure_oxygen': (80, 'mm'),
            'fio2': (0.2, 'Hg'),
            'platelet_count': (150000, 'µL'),
            'gcs': 15,
            'dopamine': (97.2, "pg/mL"),
            'dobutamine': (15, "µg/kg/min"),
            'epinephrine': (19, "pg/mL"),
            'norepinephrine': (200, "pg/mL"),
            'cpap': False,
            'sys_bp': (70, "mm"),
            'dia_bp': (12, "Hg"),
            'bilirubin': (2.8, "mg/dL"),
            'creatinine': (3.7, 'mg/dL'),
        }
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = compute_sofa_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:sch.py
"""
 below is the content of sch.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function compute_sodium_correction_hyperglycemia_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench.utils.rounding import round_number
from camel.toolkits.medcalc_bench.utils.unit_converter_new import (
    conversion_explanation,
)


def compute_sodium_correction_hyperglycemia_explanation(input_variables):
    r"""
    Calculates the patient's corrected sodium concentration in terms of
    mEq/L and generates a detailed explanatory text.

    Parameters:
        input_variables (dict): A dictionary containing the following
        key-value pairs:
            - "glucose" (tuple): The patient's blood glucose level in the
            format (value, unit).
                - Value (float): The value of blood glucose level.
                - Unit (str): The unit of blood glucose level,
                eg. "mmol/L", "mEq/L", and so on.
            - "sodium" (array): The patient's blood sodium level in the
            format (value, unit).
                - Value (float): The blood sodium level.
                - Unit (str): The unit of blood sodium level.

    Returns:
        dict: Contains two key-value pairs:
            - "Explanation" (str): A detailed description of
            the calculation process.
            - "Answer" (float): The patient's corrected sodium concentration.

    Notes:
        - None

    Example:
        free_water_deficit_explanation({
        'glucose': (90.0, 'mg/dL'),
        'sodium': (134.0, 'mEq/L')})

        output: "{'Explanation': "The formula for Sodium Correction for
        Hyperglycemia is Measured sodium + 0.024 * (Serum glucose - 100),
        where Measured Sodium is the sodium concentration in mEq/L and the
        Serum glucose is the concentration of glucose in mg/dL.\nThe
        concentration of sodium is 134.0 mEq/L. \nThe concentration of
        glucose is 90.0 mg/dL. \nPlugging in these values into the formula
        gives us 134.0 mEq/L + 0.024 * (90.0 - 100) = 133.76 mEq/L.\nHence,
        the patient's corrected concentration of sodium is 133.76 mEq/L.\n",
        'Answer': 133.76}"
    """

    sodium = input_variables["sodium"]
    glucose = input_variables["glucose"]

    sodium_explanation, sodium = conversion_explanation(
        sodium[0], "sodium", 22.99, 1, sodium[1], "mEq/L"
    )
    glucose_explanation, glucose = conversion_explanation(
        glucose[0], "glucose", 180.16, None, glucose[1], "mg/dL"
    )

    corrected_sodium = round_number(sodium + 0.024 * (glucose - 100))

    explanation = (
        "The formula for Sodium Correction for Hyperglycemia is "
        "Measured sodium + 0.024 * (Serum glucose - 100), "
        "where Measured Sodium is the sodium concentration in "
        "mEq/L and the Serum glucose is the concentration of "
        "glucose in mg/dL.\n"
    )

    explanation += sodium_explanation + "\n"
    explanation += glucose_explanation + "\n"

    explanation += (
        f"Plugging in these values into the formula gives us "
        f"{sodium} mEq/L + 0.024 * ({glucose} - 100) = "
        f"{corrected_sodium} mEq/L.\n"
    )

    explanation += (
        f"Hence, the patient's corrected concentration of sodium "
        f"is {corrected_sodium} mEq/L.\n"
    )

    return {"Explanation": explanation, "Answer": corrected_sodium}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {'glucose': (90.0, 'mg/dL'), 'sodium': (134.0, 'mEq/L')},
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = compute_sodium_correction_hyperglycemia_explanation(
            input_variables
        )
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:target_weight.py
"""
 below is the content of target_weight.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function targetweight_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench.utils.height_conversion import (
    height_conversion_explanation,
)
from camel.toolkits.medcalc_bench.utils.rounding import round_number


def targetweight_explanation(input_variables):
    r"""
    Calculates the patient's delta gap and generates a detailed explanatory
    text.

    Parameters:
        input_variables (dict): A dictionary containing the following
        key-value pairs:
            - "body_mass_index" (tuple): The patient's BMI in the
            format (value, unit).
                - Value (float): The patient's BMI value.
                - Unit (str): The unit of BMI.
            - "height" (tuple): The patient's height information in the
            format (value, unit).
                - Value (float): The numerical height measurement.
                - Unit (str): The unit of height, which can be "cm"
                (centimeters) or "in" (inches).

    Returns:
        dict: Contains two key-value pairs:
            - "Explanation" (str): A detailed description of
            the calculation process.
            - "Answer" (float): The patient's target weight.

    Notes:
        - Uses the `height_conversion_explanation` function to convert
        height to meters.

    Example:
        targetweight_explanation({"body_mass_index": (20.1, "kg/m^2"),
        "height": (72, "in"),})

        output: "{'Explanation': "The patient's target bmi is 20.1 kg/m^2.
        The patient's height is 72 in, which is 72 in * 0.0254 m / in =
        1.829 m. From this, the patient's target weight is 20.1 kg/m^2 *
        1.829 m * 1.829 m = 67.239 kg. ", 'Answer': 67.239}"
    """

    bmi = input_variables["body_mass_index"][0]
    height_exp, height = height_conversion_explanation(
        input_variables["height"]
    )
    target_weight_val = round_number(bmi * (height * height))

    explanation = ""

    explanation += f"The patient's target bmi is {bmi} kg/m^2. "

    explanation += f"{height_exp}"

    explanation += (
        f"From this, the patient's target weight is {bmi} kg/m^2 "
        f"* {height} m * {height} m = {target_weight_val} kg. "
    )

    return {"Explanation": explanation, "Answer": target_weight_val}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            "body_mass_index": (20.1, "kg/m^2"),
            "height": (72, "in"),
        },
        {
            "body_mass_index": (22.0, "kg/m^2"),
            "height": (75, "in"),
        },
    ]
    # {'Body Mass Index (BMI)': [20.1, 'kg/m^2'], 'height': [72, 'in']}
    # {'Body Mass Index (BMI)': [22.0, 'kg/m^2'], 'height': [75, 'in']}

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = targetweight_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:ideal_body_weight.py
"""
 below is the content of ideal_body_weight.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function ibw_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench.utils.height_conversion import (
    height_conversion_explanation_in,
)
from camel.toolkits.medcalc_bench.utils.rounding import round_number


def ibw_explanation(input_variables):
    r"""
    Calculates the patient's Ideal Body Weight (IBW) and generates a
    detailed explanatory text.

    Parameters:
        input_variables (dict): A dictionary containing the following
        key-value pairs:
            - "height" (tuple): The patient's height information in the
            format (value, unit).
                - Value (float): The numerical height measurement.
                - Unit (str): The unit of height, which can be "cm" (
                centimeters), "in" (inches), or other supported units.
            - "sex" (str): The patient's gender, which can be either "Male"
            or "Female".

    Returns:
        dict: Contains two key-value pairs:
            - "Explanation" (str): A detailed description of
            the calculation process.
            - "Answer" (float): The patient's ideal body weight (in kilograms).

    Notes:
        - Uses the `height_conversion_explanation_in` function to convert
        height to inches.
        - Uses the `round_number` function to round the result.
        - If the input gender is not "Male" or "Female," the function will
        not calculate IBW.

    Example:
        ibw_explanation({'height': (72, 'in'), 'sex': 'Male'})

        output: "{'Explanation': "The patient's gender is Male.\nThe
        patient's height is 170 cm, which is 170 cm * 0.393701 in/cm =
        66.929 in. \nFor males, the ideal body weight (IBW) is calculated
        as follows:\nIBW = 50 kg + 2.3 kg * (height (in inches) -
        60)\nPlugging in the values gives us 50 kg + 2.3 kg * (66.929 (in
        inches) - 60) = 65.937 kg.\nHence, the patient's IBW is 65.937 kg.",
        'Answer': 65.937}"
    """

    height = input_variables["height"]
    gender = input_variables["sex"]

    height_explanation, height = height_conversion_explanation_in(height)

    explanation = (
        f"The patient's gender is {gender}.\n" + f"{height_explanation}\n"
    )
    ibw = 0.0

    if gender == "Male":
        ibw = round_number(50 + 2.3 * (height - 60))
        explanation += (
            f"For males, the ideal body weight (IBW) is calculated as "
            f"follows:\nIBW = 50 kg + 2.3 kg * (height (in inches) - 60)\n"
            f"Plugging in the values gives us 50 kg + 2.3 kg * ({height} "
            f"(in inches) - 60) = {ibw} kg.\n"
        )

    elif gender == "Female":
        ibw = round_number(45.5 + 2.3 * (height - 60))
        explanation += (
            f"For females, the ideal body weight (IBW) is calculated as "
            f"follows:\nIBW = 45.5 kg + 2.3 kg * (height (in inches) - 60)\n"
            f"Plugging in the values gives us 45.5 kg + 2.3 kg * ({height} "
            f"(in inches) - 60) = {ibw} kg.\n"
        )

    explanation += f"Hence, the patient's IBW is {ibw} kg."

    return {"Explanation": explanation, "Answer": ibw}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            "height": (72, 'in'),  # weight 150 lbs
            "sex": "Male",  # Male
        }
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = ibw_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:compute_fena.py
"""
 below is the content of compute_fena.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function compute_fena_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench.utils.rounding import round_number
from camel.toolkits.medcalc_bench.utils.unit_converter_new import (
    conversion_explanation,
)


def compute_fena_explanation(input_variables):
    explanation = (
        "The formula for computing the FEna percentage is ("
        "creatinine * urine_sodium)/(sodium * urine_creatinine) * "
        "100, where creatinine is the concentration in mg/dL, "
        "urine sodium is the concentration in mEq/L, sodium is "
        "the concentration mEq/L, and urine creatinine is the "
        "concentration in mg/dL.\n"
    )

    sodium_exp, sodium = conversion_explanation(
        input_variables["sodium"][0],
        "sodium",
        22.99,
        1,
        input_variables["sodium"][1],
        "mEq/L",
    )
    creatinine_exp, creatinine = conversion_explanation(
        input_variables["creatinine"][0],
        "creatinine",
        113.12,
        1,
        input_variables["creatinine"][1],
        "mg/dL",
    )
    urine_sodium_exp, urine_sodium = conversion_explanation(
        input_variables["urine_sodium"][0],
        "urine sodium",
        22.99,
        1,
        input_variables["urine_sodium"][1],
        "mEq/L",
    )
    urine_creatinine_exp, urine_creatinine = conversion_explanation(
        input_variables["urine_creatinine"][0],
        "urine creatinine",
        113.12,
        1,
        input_variables["urine_creatinine"][1],
        "mg/dL",
    )

    explanation += sodium_exp + '\n'
    explanation += creatinine_exp + '\n'
    explanation += urine_creatinine_exp + '\n'
    explanation += urine_sodium_exp + '\n'

    result = round_number(
        (creatinine * urine_sodium) / (sodium * urine_creatinine) * 100
    )

    explanation += (
        f"Plugging in these values, we get 100 * ("
        f"{creatinine} * {urine_sodium})/("
        f"{sodium} * {urine_creatinine}) = {result} % FENa.\n"
    )
    explanation += f"Hence, the patient's FEna percentage is {result} %.\n"

    return {"Explanation": explanation, "Answer": result}


if __name__ == "__main__":
    # Defining test cases
    test_cases = [
        {
            "sodium": (134.0, 'mmol/L'),
            "creatinine": (3.7, 'mg/dL'),
            "urine_sodium": (21.0, 'mmol/L'),
            "urine_creatinine": (5.0, 'mg/dL'),
        },
    ]

    # Iterate the test cases and print the results
    for i, input_variables in enumerate(test_cases, 1):
        print(f"Test Case {i}: Input = {input_variables}")
        result = compute_fena_explanation(input_variables)
        print(result)
        print("-" * 50)
"""

!!!!!!!!python file name:age_conversion.py
"""
 below is the content of age_conversion.py

r"""
This code is borrowed and modified based on the source code from
    the 'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- None

Date: March 2025
"""


def age_conversion(input):
    count = 0
    while count < len(input):
        if "year" in input[count + 1]:
            return input[count]
        elif "months" in input[count + 1]:
            return input[count] // 12
        elif "weeks" in input[count + 1]:
            return input[count] // 52
        elif "days" in input[count + 1]:
            return 0
        count += 2


def age_conversion_explanation(input):
    count = 0
    text = "The patient is "

    if len(input) == 2 and input[1] == "months":
        if input[0] // 12 >= 1:
            years = input[0] // 12
            months = input[0] % 12

            add_s = "s"
            if years == 1:
                add_s = ""

            return (
                f"This means that the patient is {years} year{add_s} and "
                f"{months} old",
                input[0] // 12,
            )

    while count < len(input):
        text += f"{input[count]} {input[count + 1]}"
        if len(input) - count - 2 == 0:
            text += " old. "
        elif len(input) - count - 2 > 2:
            text += ", "
        elif len(input) - count - 2 == 2:
            text += ", and "
        count += 2

    if "year" not in text:
        text += "This means the patient is 0 years old.\n"

    return text, age_conversion(input)
"""

!!!!!!!!python file name:unit_converter_new.py
"""
 below is the content of unit_converter_new.py

r"""
This code is borrowed and modified based on the source code from
    the 'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function vol_to_vol_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench.utils.rounding import round_number


def vol_to_vol_explanation(
    value, src_unit, tgt_unit, compound="", conversion_factor=False
):
    conversion_factors_L = {
        'L': 1,
        'dL': 0.1,
        'mL': 0.001,
        'µL': 0.000001,
        'mm^3': 0.000001,
        'cm^3': 0.001,
        'm^3': 1000,
    }

    explanation = ""

    if src_unit == tgt_unit:
        return f"The volume of {compound} is {value} {tgt_unit}. ", value
    else:
        if not conversion_factor:
            answer = round_number(value * conversion_factor)

            explanation += (
                f"To convert {src_unit} {compound} to {tgt_unit}, "
                f"multiply by the conversion factor {conversion_factor} "
                f"{tgt_unit}/{src_unit}, resulting to {src_unit} {compound} "
                f"* {conversion_factor} {tgt_unit}/{src_unit} = "
                f"{answer} {tgt_unit} {compound}. "
            )
        else:
            conversion_factor = (
                conversion_factors_L[src_unit] / conversion_factors_L[tgt_unit]
            )
            answer = round_number(conversion_factor)
            explanation += (
                f"The conversion factor is {answer} {tgt_unit} "
                f"for every unit of {src_unit}. "
            )

    return explanation, answer


def molg_to_molg_explanation(mass, compound, src_unit, tgt_unit):
    conversion_factors_mol = {
        'mol': 1,
        'mmol': 0.001,
        'µmol': 0.000001,
        'pmol': 0.000000001,
    }

    conversion_factors_g = {'kg': 1000, 'g': 1, 'mg': 0.001, 'µg': 0.000001}

    conversion_factors_dict = {}

    if "mol" in src_unit and "mol" in tgt_unit:
        conversion_factors_dict = conversion_factors_mol
    elif "g" in src_unit and "g" in tgt_unit:
        conversion_factors_dict = conversion_factors_g

    explanation = ""

    if src_unit == tgt_unit:
        return f"The mass of {compound} is {mass} {tgt_unit}. ", mass
    else:
        conversion_factor = round_number(
            conversion_factors_dict[src_unit]
            / conversion_factors_dict[tgt_unit]
        )

        answer = round_number(mass * conversion_factor)

        explanation += (
            f"To convert {mass} {src_unit} of {compound} to {tgt_unit}, "
            f"multiply by the conversion factor {conversion_factor}, "
            f"giving us {mass} {src_unit} {compound} * {conversion_factor} "
            f"{tgt_unit}/{src_unit} = {answer} {tgt_unit} {compound}. "
        )

        return explanation, answer


def mol_g_explanation(value, compound, molar_mass, src_unit, tgt_unit):
    explanation = ""

    mol_explanation, mol = molg_to_molg_explanation(
        value, compound, src_unit, 'mol'
    )

    explanation += mol_explanation

    grams_value = round_number(mol * molar_mass)

    explanation += (
        f"To convert from mol {compound} to grams, multiply by the molar "
        f"mass {molar_mass} g/mol, which will give {mol} mol {compound} * "
        f"{molar_mass} g/mol = {grams_value} g {compound}. "
    )

    grams_explanation, grams = molg_to_molg_explanation(
        grams_value, compound, "g", tgt_unit
    )

    explanation += grams_explanation

    return explanation, grams


def g_to_mol_explanation(value, compound, molar_mass, src_unit, tgt_unit):
    explanation = ""

    g_explanation, grams = molg_to_molg_explanation(
        value, compound, src_unit, 'g'
    )

    explanation += g_explanation

    mol = round_number(grams / molar_mass)

    explanation += (
        f"To convert from grams of {compound} to moles, divide by the molar "
        f"mass {molar_mass} g/mol, which will give {grams} "
        f"g/({molar_mass} g {compound}/mol) = {mol} mol {compound}. "
    )

    mol_explanation, answer = molg_to_molg_explanation(
        mol, compound, 'mol', tgt_unit
    )

    explanation += mol_explanation

    return explanation, answer


def mEq_to_mol_explanation(value, compound, valence, tgt_unit):
    explanation = (
        f"To convert from {value} mEq to {tgt_unit}, convert from "
        f"mEq to mmol. "
    )

    mol = round_number(value / valence)

    explanation += (
        f"The compound {value} has a valence of {valence}, "
        f"and so divide the valence by the value of mEq to get, "
        f"{value} mEq/({valence} mEq/mmol) = {mol} mmol {compound}. "
    )

    if tgt_unit != 'mmol':
        mol_explanation, mol = molg_to_molg_explanation(
            mol, compound, 'mmol', tgt_unit
        )

        explanation += mol_explanation

    return explanation, mol


def mol_to_mEq_explanation(value, compound, valence, src_unit):
    mmol_value = value

    explanation = ""

    if src_unit != 'mmol':
        explanation = (
            f"To convert from {value} {src_unit} to mEq, "
            f"first convert from {src_unit} to mmol. "
        )
        mmol_explanation, mmol_value = molg_to_molg_explanation(
            value, compound, src_unit, 'mmol'
        )
        explanation += mmol_explanation

    mEq_val = round_number(mmol_value * valence)

    explanation += (
        f"The compound, {compound}, has a valence of {valence}, "
        f"and so multiply the valence by the value of mmol to get, {value} "
        f"mmol * {valence} mEq/mmol = {mEq_val} mEq {compound}. "
    )

    return explanation, mEq_val


def mEq_to_g_explanation(value, compound, molar_mass, valence, tgt_unit):
    explanation = (
        f"To convert from {value} mEq to {tgt_unit} mmol, "
        f"first convert from mEq to mmol. "
    )

    mmol_val = round_number(value / valence)

    explanation += (
        f"The compound, {compound}, has a valence of {valence}, and so "
        f"divide the valence by the value of mEq to get, {value} mEq/("
        f"{valence} mEq/mmol) = {mmol_val} mmol {compound}. "
    )

    mol_explanation, mol_value = molg_to_molg_explanation(
        mmol_val, compound, 'mmol', 'mol'
    )

    explanation += mol_explanation

    gram_explanation, answer = mol_g_explanation(
        mol_value, compound, molar_mass, 'mol', tgt_unit
    )

    explanation += gram_explanation

    return explanation, answer


def g_to_mEq_explanation(value, compound, molar_mass, valence, src_unit):
    explanation = (
        f"To convert from {value} {src_unit} to "
        f"mEq, first convert from {src_unit} to mmol."
    )

    mol_explanation, mol_value = g_to_mol_explanation(
        value, compound, molar_mass, src_unit, "mmol"
    )

    explanation += mol_explanation

    answer = round_number(mol_value * valence)

    explanation += (
        f"To convert from {mol_value} mmol {compound} to mEq, "
        f"multiply the mmol amount by the valence, "
        f"to get {mol_value} mmol * {valence} mEq/mmol = {answer} mEq "
        f"{compound}. "
    )

    return explanation, answer


def conversion_explanation(
    value, compound, molar_mass, valence, src_unit, tgt_unit
):
    conversion_factors_mass = {
        'mol',
        'mmol',
        'µmol',
        'pmol',
        'kg',
        'g',
        'mg',
        'µg',
        'mEq',
    }
    conversion_factors_volume = {'L', 'dL', 'mL', 'µL', 'mm^3', 'cm^3', 'm^3'}

    explanation = ""

    if "/" in src_unit and "/" in tgt_unit:
        src_mass_unit = src_unit.split("/")[0]
        src_volume_unit = src_unit.split("/")[1]

        tgt_mass_unit = tgt_unit.split("/")[0]
        tgt_volume_unit = tgt_unit.split("/")[1]

        if (
            src_mass_unit == tgt_mass_unit
            and src_volume_unit == tgt_volume_unit
        ):
            return (
                f"The concentration of {compound} is {value} "
                f"{src_mass_unit}/{src_volume_unit}. ",
                value,
            )

        explanation += (
            f"The concentration of {compound} is {value} {src_mass_unit}/"
            f"{src_volume_unit}. We need to convert the concentration to "
            f"{tgt_mass_unit}/{tgt_volume_unit}. "
        )

        if src_mass_unit != tgt_mass_unit:
            explanation += (
                f"Let's first convert the mass of {compound} "
                f"from {src_mass_unit} to {tgt_mass_unit}. "
            )
            mass_explanation, mass_value = mass_conversion_explanation(
                value,
                compound,
                valence,
                molar_mass,
                src_mass_unit,
                tgt_mass_unit,
            )
        else:
            explanation += (
                "The mass units of the source and target are the "
                "same so no conversion is needed. "
            )
            mass_value = value

        if src_mass_unit != tgt_mass_unit:
            explanation += mass_explanation

        if src_volume_unit == tgt_volume_unit:
            volume_conversion_factor = 1
            result = round_number(mass_value / volume_conversion_factor)

            explanation += (
                f"The volume units is {tgt_volume_unit} so no "
                f"volume conversion is needed. "
            )
            explanation += (
                f"Hence, the concentration value of {value} {src_mass_unit} "
                f"{compound}/{src_volume_unit} converts to {result} "
                f"{tgt_mass_unit} {compound}/{tgt_volume_unit}. "
            )

            return explanation, result
        else:
            explanation += (
                f"The current volume unit is {src_volume_unit} "
                f"and the target volume unit is {tgt_volume_unit}. "
            )
            explanation_volume, volume_conversion_factor = (
                vol_to_vol_explanation(
                    1, src_volume_unit, tgt_volume_unit, "water", True
                )
            )
            explanation += explanation_volume

        result = round_number(mass_value / volume_conversion_factor)

        explanation += (
            f"Our next step will be to divide the mass by the volume "
            f"conversion factor of {volume_conversion_factor} "
            f"to get the final concentration in terms of {tgt_mass_unit}/"
            f"{tgt_volume_unit}. "
        )
        explanation += (
            f"This will result to {mass_value} {tgt_mass_unit} "
            f"{compound}/{volume_conversion_factor} "
            f"{tgt_volume_unit} = {result} {tgt_mass_unit} "
            f"{compound}/{tgt_volume_unit}. "
        )
        explanation += (
            f"The concentration value of {value} {src_mass_unit} "
            f"{compound}/{src_volume_unit} converts to {result} "
            f"{tgt_mass_unit} {compound}/{tgt_volume_unit}. "
        )
    elif (
        ("/" not in src_unit and "/" not in tgt_unit)
        and src_unit in conversion_factors_mass
        and tgt_unit in conversion_factors_mass
    ):
        if src_unit == tgt_unit:
            return (
                f"The mass of {compound} is {round_number(value)} "
                f"{tgt_unit}. ",
                value,
            )

        explanation, result = mass_conversion_explanation(
            value, compound, valence, molar_mass, src_unit, tgt_unit
        )

    elif (
        ("/" not in src_unit and "/" not in tgt_unit)
        and src_unit in conversion_factors_volume
        and tgt_unit in conversion_factors_volume
    ):
        if src_unit == tgt_unit:
            return f"The volume is {value} {tgt_unit}. ", value

        explanation, value = vol_to_vol_explanation(value, src_unit, tgt_unit)

    return explanation, result


def mass_conversion_explanation(
    value, compound, valence, molar_mass, src_mass_unit, tgt_mass_unit
):
    explanation = f"The mass of {compound} is {value} {src_mass_unit}. "

    if ("g" in src_mass_unit and "g" in tgt_mass_unit) or (
        "mol" in src_mass_unit and "mol" in tgt_mass_unit
    ):
        conv_explanation, mass_value = molg_to_molg_explanation(
            value, compound, src_mass_unit, tgt_mass_unit
        )
        explanation += conv_explanation

    elif "mol" in src_mass_unit and "g" in tgt_mass_unit:
        conv_explanation, mass_value = mol_g_explanation(
            value, compound, molar_mass, src_mass_unit, tgt_mass_unit
        )
        explanation += conv_explanation

    elif "g" in src_mass_unit and "mol" in tgt_mass_unit:
        conv_explanation, mass_value = g_to_mol_explanation(
            value, compound, molar_mass, src_mass_unit, tgt_mass_unit
        )
        explanation += conv_explanation

    elif "mol" in src_mass_unit and "mEq" in tgt_mass_unit:
        conv_explanation, mass_value = mol_to_mEq_explanation(
            value, compound, valence, src_mass_unit
        )
        explanation += conv_explanation

    elif "mEq" in src_mass_unit and "mol" in tgt_mass_unit:
        conv_explanation, mass_value = mEq_to_mol_explanation(
            value, compound, valence, tgt_mass_unit
        )
        explanation += conv_explanation

    elif "mEq" in src_mass_unit and "g" in tgt_mass_unit:
        conv_explanation, mass_value = mEq_to_g_explanation(
            value, compound, molar_mass, valence, tgt_mass_unit
        )
        explanation += conv_explanation

    elif "g" in src_mass_unit and "mEq" in tgt_mass_unit:
        conv_explanation, mass_value = g_to_mEq_explanation(
            value, compound, molar_mass, valence, src_mass_unit
        )
        explanation += conv_explanation

    return explanation, mass_value


def convert_to_units_per_liter_explanation(value, unit, compound, target_unit):
    # Dictionary to define conversion factors to liters
    unit_to_liter = {
        'L': 1,
        'dL': 1e-1,
        'mL': 1e-3,
        'µL': 1e-6,
        'mm^3': 1e-6,
        'cm^3': 1e-3,
        'm^3': 1e3,
    }

    explanation = ""

    if unit == target_unit:
        return (
            f"The patient's concentration of {compound} is {value} count/"
            f"{unit}. ",
            value,
        )
    else:
        explanation += (
            f"The patient's concentration of {compound} is "
            f"{value} count/{unit}. "
        )

    conversions_factor = round_number(
        unit_to_liter[target_unit] / unit_to_liter[unit]
    )
    # print(conversions_factor)

    result = round_number(conversions_factor * value)

    explanation += (
        f"To convert {value} count/{unit} of {compound} to {target_unit}, "
        f"multiply by the conversion factor {conversions_factor} {unit}/"
        f"{target_unit} which will give {value} {compound} count/{unit} * "
        f"{conversions_factor} {unit}/{target_unit} = {result} {compound} "
        f"count/{target_unit}. "
    )
    return explanation, result


def mmHg_to_kPa_explanation(mmHg, compound):
    answer = round_number(0.133322 * mmHg)
    explanation = (
        f"To convert the partial pressure of {compound} from mm Hg of "
        f"{compound} to kPa, multiply by the conversion factor of 0.133322 "
        f"mm Hg/kPa, which will give us {mmHg} * 0.133322 mm Hg/kPa = "
        f"{answer} kPa of {compound}.\n"
    )

    return explanation, answer


def kPa_to_mmHg_explanation(kPa, compound):
    answer = round_number(7.50062 * kPa)
    explanation = (
        f"To convert the partial pressure of {compound} from mm Hg of "
        f"{compound} to kPa, multiply by the conversion factor of 0.133322 "
        f"mm Hg/kPa, which will give us {kPa} * 0.133322 mm Hg/kPa = "
        f"{answer} kPa of {compound}.\n"
    )

    return explanation, answer
"""

!!!!!!!!python file name:height_conversion.py
"""
 below is the content of height_conversion.py

r"""
This code is borrowed and modified based on the source code from the
    'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- None

Date: March 2025
"""

from camel.toolkits.medcalc_bench.utils.rounding import round_number


def height_conversion_explanation(height_info):
    if len(height_info) == 4:
        inches = height_info[0] * 12 + height_info[2]
        meters = round_number(inches * 0.0254)

        return (
            f"The patient's height is {height_info[0]} ft {height_info[2]} "
            f"in which converts to {height_info[0]} ft * 12 in/ft + "
            f"{height_info[2]} in = {inches} in. Hence, the patient's "
            f"height is {inches} in * 0.0254 m/in = {meters} m. ",
            meters,
        )

    elif height_info[-1] == "m":
        return f"The patient's height is {height_info[0]} m. ", height_info[0]
    elif height_info[-1] == "cm":
        height = round_number(height_info[0] / 100)
        return (
            f"The patient's height is {height_info[0]} cm, which is "
            f"{height_info[0]} cm * 1 m / 100 cm = {height} m. ",
            height,
        )
    elif height_info[-1] == "ft":
        height = round_number(height_info[0] * 0.3048)
        return (
            f"The patient's height is {height_info[0]} ft, which is "
            f"{height_info[0]} ft * 0.3048 m / ft = {height} m. ",
            height,
        )
    elif height_info[-1] == "in":
        height = round_number(height_info[0] * 0.0254)
        return (
            f"The patient's height is {height_info[0]} in, which is "
            f"{height_info[0]} in * 0.0254 m / in = {height} m. ",
            height,
        )


def height_conversion_explanation_cm(height_info):
    if len(height_info) == 4:
        feet = height_info[0]
        inches = height_info[2]
        total_inches = feet * 12 + inches
        centimeters = round_number(total_inches * 2.54)
        explanation = (
            f"The patient's height is {feet} ft {inches} in which converts to "
            f"{feet} ft * 12 in/ft + {inches} in = {total_inches} in. "
            f"Hence, the patient's height is {total_inches} in * 2.54 cm/in "
            f"= {centimeters} cm. "
        )
        return explanation, centimeters

    elif height_info[-1] == "m":
        height_meters = height_info[0]
        centimeters = round_number(height_meters * 100)
        explanation = (
            f"The patient's height is {height_meters} m, which is "
            f"{height_meters} m * 100 cm/m = {centimeters} cm. "
        )
        return explanation, centimeters

    elif height_info[-1] == "cm":
        height_cm = height_info[0]
        explanation = f"The patient's height is {height_cm} cm. "
        return explanation, height_cm

    elif height_info[-1] == "ft":
        height_ft = height_info[0]
        centimeters = round_number(height_ft * 30.48)
        explanation = (
            f"The patient's height is {height_ft} ft, which is "
            f"{height_ft} ft * 30.48 cm/ft = {centimeters} cm. "
        )
        return explanation, centimeters

    elif height_info[-1] == "in":
        height_in = height_info[0]
        centimeters = round_number(height_in * 2.54)
        explanation = (
            f"The patient's height is {height_in} in, which is "
            f"{height_in} in * 2.54 cm/in = {centimeters} cm. "
        )
        return explanation, centimeters


def height_conversion_explanation_in(height_info):
    if len(height_info) == 4:
        feet = height_info[0]
        inches = height_info[2]
        total_inches = round_number(feet * 12 + inches)
        explanation = (
            f"The patient's height is {feet} ft {inches} in which converts to "
            f"{feet} ft * 12 in/ft + {inches} in = {total_inches} in. "
            f"Hence, the patient's height is {total_inches} in. "
        )
        return explanation, total_inches

    elif height_info[-1] == "m":
        height_meters = height_info[0]
        inches = round_number(height_meters * 39.3701)
        explanation = (
            f"The patient's height is {height_meters} m, which is "
            f"{height_meters} m * 39.3701 in/m = {inches} in. "
        )
        return explanation, inches

    elif height_info[-1] == "cm":
        height_cm = height_info[0]
        inches = round_number(height_cm * 0.393701)
        explanation = (
            f"The patient's height is {height_cm} cm, which is "
            f"{height_cm} cm * 0.393701 in/cm = {inches} in. "
        )
        return explanation, inches

    elif height_info[-1] == "ft":
        height_ft = height_info[0]
        inches = round_number(height_ft * 12)
        explanation = (
            f"The patient's height is {height_ft} ft, which is "
            f"{height_ft} ft * 12 in/ft = {inches} in. "
        )
        return explanation, inches

    elif height_info[-1] == "in":
        height_in = height_info[0]
        explanation = f"The patient's height is {height_in} in. "
        return explanation, height_in
"""

!!!!!!!!python file name:rounding.py
"""
 below is the content of rounding.py

r"""
This code is borrowed and modified based on the source code from the
    'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- None

Date: March 2025
"""

from math import floor, log10


def round_number(num):
    if num > 0.001:
        # Round to the nearest thousandth
        return round(num, 3)
    else:
        # Round to three significant digits
        if num == 0:
            return 0
        return round(num, -int(floor(log10(abs(num)))) + 2)
"""

!!!!!!!!python file name:__init__.py
"""
 below is the content of __init__.py

"""

!!!!!!!!python file name:weight_conversion.py
"""
 below is the content of weight_conversion.py

r"""
This code is borrowed and modified based on the source code from the
'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- rewrite function weight_conversion_explanation
- translation

Date: March 2025
"""

from camel.toolkits.medcalc_bench.utils.rounding import round_number


def weight_conversion_explanation(weight_info):
    r"""
    Converts a patient's weight from different units (pounds, grams,
    or kilograms) to kilograms
    and generates an explanatory text.

    Parameters:
        weight_info (tuple): A tuple containing two elements:
            - First element (float): The patient's weight value.
            - Second element (str): The unit of weight, which can be one of
            the following:
                - "lbs" for pounds.
                - "g" for grams.
                - "kg" for kilograms.

    Returns:
        tuple: Contains two elements:
            - First element (str): An explanatory text describing the
            conversion process and result.
            - Second element (float): The converted weight value (in
            kilograms).

    Notes:
        - Uses the `round_number` function to round the result.
        - If the input unit is not "lbs," "g," or "kg," the function
        defaults to returning the input value as kilograms.

    Example:
        convert_weight((150, "lbs"))
        output: "The patient's weight is 150 lbs so this converts to
        150 lbs * 0.453592 kg/lbs = 68.04 kg."
    """
    assert len(weight_info) == 2
    weight = weight_info[0]
    weight_label = weight_info[1]

    answer = round_number(weight * 0.453592)

    if weight_label == "lbs":
        return (
            f"The patient's weight is {weight} lbs so this converts to "
            f"{weight} lbs * 0.453592 kg/lbs = {answer} kg. ",
            answer,
        )
    elif weight_label == "g":
        return (
            f"The patient's weight is {weight} g so this converts to "
            f"{weight} lbs * kg/1000 g = "
            f"{round_number(weight / 1000)} kg. ",
            weight / 1000,
        )
    else:
        return f"The patient's weight is {weight} kg. ", weight
"""

!!!!!!!!python file name:convert_temperature.py
"""
 below is the content of convert_temperature.py

r"""
This code is borrowed and modified based on the source code from the
    'MedCalc-Bench' repository.
Original repository: https://github.com/ncbi-nlp/MedCalc-Bench

Modifications include:
- None

Date: March 2025
"""

from camel.toolkits.medcalc_bench.utils.rounding import round_number


def fahrenheit_to_celsius_explanation(temperature, units):
    if units == "degrees celsius":
        return (
            f"The patient's temperature is {temperature} "
            f"degrees celsius. ",
            temperature,
        )

    celsius = round_number((temperature - 32) * 5 / 9)

    explanation = (
        f"The patient's temperature is {temperature} degrees " f"fahrenheit. "
    )
    explanation += (
        "To convert to degrees celsius, apply the formula 5/9 * "
        "[temperature (degrees fahrenheit) - 32]. "
    )
    explanation += (
        f"This means that the patient's temperature is 5/9 * "
        f"{temperature - 32} = {celsius} degrees celsius. "
    )

    return explanation, celsius
"""

